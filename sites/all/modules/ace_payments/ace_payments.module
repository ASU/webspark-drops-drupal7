<?php 

include_once('Cart.php');
include_once('CartItem.php');
include_once('Order.php');
include_once('PaymentGateway.php');

define('CHECKOUT_REDIRECT', 'cart/checkout');
define('CART_PAGE', 'cart');

function ace_payments_menu() 
{
  $items = array();

  $items[CART_PAGE] = array(
	'title'            => 'Cart',
	'page callback'    => 'cart_page',
	'access arguments' => array('access content'),
  	'file'             => 'cart.inc',
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['cart/add/%cac'] = array(
    'title'            => 'Add Item to Cart',
    'page callback'    => 'cart_add_item',
    'page arguments'   => array(2),
    'access arguments' => array('access content'),
    'file'             => 'cart.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['cart/remove/%cac'] = array(
    'title'            => 'Remove Item from Cart',
    'page callback'    => 'cart_remove_item',
    'page arguments'   => array(2),
    'access arguments' => array('make payments'),
    'file'             => 'cart.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['cart/update/%'] = array(
    'title'            => 'Update Cart',
    'page callback'    => 'cart_update',
    'page arguments'   => array(2),
    'access arguments' => array('admin registration'),
    'file'            => 'cart.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['cart/select-user'] = array(
    'title'            => 'Select User',
    'page callback'    => 'cart_select_user',
    'page arguments'   => array(2),
    'access arguments' => array('admin registration'),
    'file'            => 'cart.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['cart/checkout/%'] = array(
	'title'            => 'Check Out',
	'page callback'    => 'ace_payments_checkout_redirect',
    'page arguments'   => array(2),
	'access arguments' => array('make payments'),
    'type'             => MENU_CALLBACK,
  );

  $items['user/%user/orderhistory'] = array(
    'title'            => 'Order History',
    'page callback'    => 'order_history_page',
    'page arguments'   => array(1),
    'access callback'  => 'user_edit_access',
    'access arguments' => array(1),
    'type'             => MENU_LOCAL_TASK,
  );

  $items['admin/ace/payments'] = array(
    'title'            => 'Payments Settings',
    'description'      => 'Change payment settings.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('ace_payments_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type'             => MENU_NORMAL_ITEM,
    'file'             => 'ace_payments.admin.inc',
  );

  return $items;
}

function cac_load($cac_list) 
{
  $parts = explode('-', $cac_list);

  $items = array();
  foreach ($parts as $cac) 
  {
    $i = CartItem::get($cac);
    if ($i) 
    {
      $items[] = $i;
    }
  }

  return $items;
}

/**
 * hook_permission() implementation
 */
function ace_payments_permission() 
{
  return array(
    'admin registration' => array(
      'title' => t('Admin Registration')
    ),
    'make payments' => array(
      'title' => t('Make Payments')
    )
  );
}

/**
 * hook_theme() implementation
 */
function ace_payments_theme($existing, $type, $theme, $path) 
{
  return array(
    'ace_cart' => array(
      'variables' => array('cart' => NULL, 'purchaser' => NULL, 'disable_checkout' => FALSE, 'index' => 0, 'show_fmv' => TRUE),
      'template' => 'ace_cart',
    ),
    'ace_cart_admin' => array(
      'variables' => array('cart' => NULL, 'purchaser' => NULL, 'disable_checkout' => FALSE, 'index' => 0, 'show_fmv' => TRUE),
      'template' => 'ace_cart_admin',
    ),
    'order_history' => array(
      'variables' => array('orders' => NULL),
      'template' => 'order_history',
    ),
    'order_details' => array(
      'variables' => array('order' => NULL),
      'template' => 'order_details',
    ),
  );
}

function ace_payments_mail($key, &$message, $params) 
{
  switch($key) 
  {
    case 'order_confirmation_admin':
      $subject = variable_get('order_confirmation_admin_email_subject', '');
      $body    = t(variable_get('order_confirmation_admin_email_body', ''), $params);
      ace_payments_make_html_mail($message, $key, $subject, $body);
      break;

    case 'order_confirmation_user':
      $subject = variable_get('order_confirmation_user_email_subject', '');
      $body    = t(variable_get('order_confirmation_user_email_body', ''), $params);
      ace_payments_make_html_mail($message, $key, $subject, $body);
      break;
  }
}

function ace_payments_gateways($gateway_key = NULL) 
{
  $defined = module_invoke_all('ace_payments_gateways');
  
  $gateways = array();
  foreach ($defined as $g) 
  {
    $gateways[$g->getKey()] = $g;
  }
  
  if ($gateway_key) 
  {
    return $gateways[$gateway_key];
  } 
  else 
  {
    return $gateways;
  }
}

function ace_payments_gateway_names() 
{
  $gateways = ace_payments_gateways();
  $gateway_names = array();
  foreach ($gateways as $gw) 
  {
    $gateway_names[$gw->getKey()] = $gw->getName();
  }

  return $gateway_names;
}

function cart_update($gateway_key) 
{
  if(user_access('admin registration') && isset($_SESSION['checkout_purchaser'])) 
  {
    $purchaser = user_load(array('uid' => $_SESSION['checkout_purchaser']));
  } 
  else 
  {
    global $user;
    $purchaser = user_load(array('uid' => $user->uid));
  }
  
  $cart = Cart::get($gateway_key);
  if (is_null($cart)) 
  {
    drupal_set_message('Cannot update an empty cart.');
    drupal_goto(CART_PAGE);
  } 
  else 
  {
    $items = $cart->getItems();
    if (empty($items)) 
    {
      drupal_set_message('Cannot update an empty cart.');
      drupal_goto(CART_PAGE);
    }
  }
  
  foreach ($_REQUEST as $key => $value) 
  {
    if (strstr($key, 'price_')) 
    {
      $parts = explode('_', $key);
      $cac = $parts[1];
      $item = $cart->getItem($cac);
      $item->setOverridePrice($value);
    } 
    else if (strstr($key, 'gift_')) 
    {
      $parts = explode('_', $key);
      $cac = $parts[1];
      $item = $cart->getItem($cac);
      $item->setOverrideGiftAmount($value);
    } 
    else if (strstr($key, 'remove_')) 
    {
      $parts = explode('_', $key);
      $cac = $parts[1];
      $cart->removeItem($cac);
    }
  }
  
  foreach ($cart->getItems() as $item) 
  {
    if ($item->getPrice($purchaser) < $item->getGiftAmount($purchaser)) 
    {
      drupal_set_message('Gift amount cannot be greater than price.');
      drupal_goto(CART_PAGE);
    }
  }
  
  Cart::save($cart);
}

/**
 * Redirects the user to the appropriate payment gateway and handles some
 * initial checkout logic.
 */
function ace_payments_checkout_redirect($gateway_key) 
{
  // Update cart from post variables, if any.
  cart_update($gateway_key);
  
  if($_POST['update']) 
  {
    // Redirect back to cart.
    drupal_goto(CART_PAGE);
  }
  
  if(!$_REQUEST['accept_terms']) 
  {
    drupal_set_message('You must first accept the cancellation policy terms.');
    drupal_goto(CART_PAGE);
    return;
  }
  
  if(user_access('admin registration')) 
  {
    if(isset($_SESSION['checkout_purchaser'])) 
    {
      $purchaser = user_load(array('uid' => $_SESSION['checkout_purchaser']));
    } 
    else 
    {
      drupal_set_message('You must select a user to check out for.');
      drupal_goto(CART_PAGE);
      return;
    }
  } 
  else 
  {
    global $user;
    $purchaser = user_load(array('uid' => $user->uid)); // Load profile fields.
  }
  
  $cart = Cart::get($gateway_key);
  
  if(is_null($cart)) 
  {
    drupal_set_message(t('Cannot check out while your cart is empty.'));
    drupal_goto(CART_PAGE);
    return;
  } 
  else 
  {
    $items = $cart->getItems();
    if(empty($items)) 
    {
      drupal_set_message(t('Cannot check out while your cart is empty.'));
      drupal_goto(CART_PAGE);
      return;
    }
  }
  
   // Create order.
   $order = checkout_start($cart, $purchaser);
  
  if(!empty($order)) 
  {
    if($order->total > 0) 
    {
      // Redirect to payment gateway.
      $gateway = ace_payments_gateways($gateway_key);
      if($gateway->canRedirect($purchaser, $order)) 
      {
        drupal_set_message(t('Thank you! Your order has been submitted. Please make sure you have completed payment in the new window.'));
        Cart::deleteCarts($gateway_key);
        $gateway->redirectToCompletePayment($purchaser, $order);

        return;
      }
    } 
    else 
    {
      // Complete order process immediately.
      checkout_finish($order->order_id, TRUE);
      Cart::deleteCarts($gateway_key);
      drupal_set_message(t('Thank you! Your purchase is complete; no further action is required.'));
      drupal_goto(CART_PAGE);
      return;
    }
  }
  
 drupal_set_message(t('Unable to complete your payment: please try again later.'));
 drupal_goto(CART_PAGE);
}

/**
 * Starts the process of purchasing an item. This process will be finished when payment
 * information has been received.
 *
 * @param $cart the cart for this order.
 * @param $purchaser the user purchasing the cart.
 * @return the order object if successful, otherwise NULL.
 */
function checkout_start($cart, $purchaser) 
{
  global $user;
  $admin = ($purchaser->uid != $user->uid) ? $user : NULL; 
  $order = Order::save($cart, $purchaser, $admin);
  
  $success = FALSE;
  if ($order) 
  {
    $success = TRUE;
    foreach ($cart->getItems() as $item) 
    {
      $success = $success && $item->startPurchase($purchaser, $order->order_id);
    }
  }
  
  if ($success) 
  {
    // Give modules a chance to react to a successful order beginning.
    module_invoke_all('checkout_start', $order);
    return $order;
  } 
  else 
  {
    // Something failed along the way, set internal failure status.
    db_query('UPDATE {ace_order} SET status = 99 WHERE order_id = %d', $order->order_id);
    return NULL;
  }
}

/**
 * Completes the checkout process. This method is run
 *    a) when payment notification comes back successful,
 * or b) immediately if payment is not required.
 * @param $order_id the order we're completing.
 * @param $auto true if this registration was automatic (no payment required),
 * false if it was triggered by a QuikPAY notification.
 */
function checkout_finish($order_id, $auto = FALSE) 
{
  $order = Order::load($order_id);
  
  if($order) 
  {
    $purchaser = user_load(array('uid' => $order->uid));
    
    foreach ($order->items as $order_item) 
    {
      $item = CartItem::get($order_item->cac, $order);
      $item->finishPurchase($order, $purchaser);
    }
    
    _send_order_confirmation_emails($order, $purchaser);
    
    // Set ace_order status if payment was not required.
    if ($auto) 
    {
      db_query('UPDATE {ace_order} SET status = 0 WHERE order_id = %d', $order_id);
    }
  } 
  else 
  {
    watchdog('Payments', 'Failed to get order record @oid', array('@oid' => $order_id), WATCHDOG_ERROR);
  }
}

function _send_order_confirmation_emails($order, $purchaser = NULL) 
{
  if (is_numeric($order)) 
  {
    $order = Order::load($order); // Load order from order id.
  }
  if (is_null($purchaser)) 
  {
    $purchaser = user_load(array('uid' => $order->uid));
  }
  
  // Prepare emails.
  $admins = variable_get('order_confirmation_admin_emails', 'ace.asu@asu.edu');
  $mail_params = array(
  	'!uid'        => $purchaser->uid,
    '!user_mail'  => $purchaser->mail,
    '!first_name' => $purchaser->profile->field_first_name[0]['value'],
    '!last_name'  => $purchaser->profile->field_last_name[0]['value'],
    '!details'    => theme('order_details', $order),
  );
  
  // Send admin email.
  drupal_mail('ace_payments', 'order_confirmation_admin', $admins, NULL, $mail_params, NULL, TRUE);
  
  // Send user email.
  drupal_mail('ace_payments', 'order_confirmation_user', $purchaser->mail, user_preferred_language($purchaser), $mail_params, NULL, TRUE);
}

function order_history_page($user) 
{
  $orders = Order::loadHistory($user->uid);
  $output = '<h1>Order History</h1>';
  $output .= theme('order_history', $orders);
  return $output;
}

/**
 * Utility functions for finding items the user has purchased.
 */

/**
 * Determines if a user has purchased a particular item, based on 
 * the node and type for that item.
 * @param unknown_type $node the node of the item.
 * @param unknown_type $type the type of the item.
 * @param unknown_type $account optionally, the user account
 * to check, otherwise the current user is checked.
 * @return TRUE if the user has purchased the item,
 * FALSE if they have not.
 */
function has_purchased($node, $type, $account = NULL) 
{
  if(is_null($node)) 
  {
    return FALSE;
  }
  if(is_null($account)) 
  {
    global $user;
    $account = $user;
  }
  
  $purchased = get_purchased_items($account);
  if(isset($purchased["{$type}.{$node->nid}"])) 
  {
    return TRUE;
  } 
  else 
  {
    return FALSE;
  }
}

function get_purchased_events($account = NULL) 
{
  $types = array();
  if(defined('COURSE_TYPE')) 
  {
    $types[] = COURSE_TYPE;
  }

  if(defined('MEETING_TYPE')) 
  {
    $types[] = MEETING_TYPE;
  }

  return get_purchased_items_by_type($types, $account);
}

function get_purchased_files($account = NULL) 
{
  $types = array();
  if(defined('LIBRARY_FILE_TYPE')) 
  {
    $types[] = LIBRARY_FILE_TYPE;
  }

  return get_purchased_items_by_type($types, $account);
}

/**
 * Filters the list of purchased items by type.
 * @param $types an array of types to include.
 * @param $account optionally, the user account whose
 * purchases to retrieve, otherwise the current user is used.
 */
function get_purchased_items_by_type(array $types, $account = NULL) 
{
  $data = get_purchased_items($account);
  
  // Filter for types.
  $type_matches = array();
  foreach ($data as $item) 
  {
    if (in_array($item->type, $types)) 
    {
      $type_matches[] = $item->nid;
    }
  }

  return $type_matches;
}

/**
 * Gets a cached list of items a user has purchased. Note this only covers
 * items which have a node equivalent. Sponsorships, for instance, will
 * not show up in this list.
 * @param $account the user to check
 * @param $clear_cache TRUE to clear the cache, FALSE (default) to use a cached version.
 */
function get_purchased_items($account = NULL, $clear_cache = FALSE) 
{
  if(is_null($account)) 
  {
    global $user;
    $account = $user;
  }
  
  // Create or use cache.
  if(!isset($_SESSION['ace_purchase_cache'][$account->uid]) || $clear_cache) 
  {
    $data = _get_purchased_items_from_db($account);
    $salesforce = _get_purchased_items_from_salesforce($account);

    foreach($salesforce as $nid => $item) 
    {
      $data[$nid] = $item;
    }

    $_SESSION['ace_purchase_cache'][$account->uid] = $data;
  } 
  else
  {
    $data = $_SESSION['ace_purchase_cache'][$account->uid];
  }

  return $data;
}

function ace_payments_user($op, &$edit, &$account, $category = NULL) 
{
  // Clear cached permissions on login to pickup changes from Salesforce.
  if($op == 'login') 
  {
    get_purchased_items($account, TRUE);
  }
}

/*
 * hook_checkout_start() used to clear the cached purchases when the user is
 * purchasing something.
 */
function ace_payments_checkout_start($order) 
{
  // Clear cached purchases, as they may have changed.
  unset($_SESSION['ace_purchase_cache']);
}

function _get_purchased_items_from_db($user) 
{
  if ($user->uid == 0) 
  {
    return array();
  }

  $sql = 'SELECT i.cac, i.type FROM {ace_order} o '
       . 'LEFT JOIN {ace_order_status} s '
       . 'ON o.status = s.status '
       . 'LEFT JOIN {ace_order_item} i '
       . 'ON o.order_id = i.order_id '
       . 'WHERE o.uid = %d AND s.successful = 1';

  $result = db_query($sql, $user->uid);
  
  $purchased_items = array();
  foreach($result as $row)
  {
    if (!$row->type) 
    {
      continue;
    }

    $cart_item = CartItem::get($row->cac);
    if(!$cart_item) 
    {
      continue;
    }

    $node = $cart_item->getNode();
    if (!$node) 
    {
      continue;
    }

    $item = new stdClass();
    $item->nid = $node->nid;
    $item->type = $row->type;
    $purchased_items["{$item->type}.{$item->nid}"] = $item;
  }

  return $purchased_items;
}

function _get_purchased_items_from_salesforce($user) 
{
  if($user->uid == 0) 
  {
    return array();
  }

  if(!$user->salesforce) 
  {
    $user = user_load(array('uid' => $user));
  }

  if (!$user->salesforce) 
  {
    return array();
  }
  
  $sf = salesforce_api_connect();
  if (!$sf) 
  {
    $error = "Failed to connect to Salesforce. Couldn't query for registration status.";
    watchdog('Coursereg', $error, array(), WATCHDOG_ERROR);
    return;
  }
  
  $soql = 'SELECT r.Opportunity.CampaignId, r.Opportunity.RecordTypeId '
        . 'FROM OpportunityContactRole r '
        . "WHERE r.ContactId = '{$user->salesforce['sfid']}' "
        . "AND r.Opportunity.StageName = 'Closed Won'";
  
  $queryResp = $sf->client->query($soql);
  
  if ($queryResp->size == 0) 
  {
    return array();
  }
  
  $purchased_items = array();
  $done = FALSE;
  while (!$done) 
  {
    foreach ($queryResp->records as $record) 
    {
      $type = _get_type_by_salesforce_record_id($record->Opportunity->RecordTypeId);
      if (is_null($type)) 
      {
        continue;
      }

      $node = get_node_by_sfid($record->Opportunity->CampaignId);
      if (!$node) 
      {
        continue;
      }

      $item = new stdClass();
      $item->nid = $node->nid;
      $item->type = $type;
      $purchased_items["{$item->type}.{$item->nid}"] = $item;
    }

    $done = $queryResp->done;
    if (!$done) 
    {
      $queryResp = $sf->client->queryMore($queryResp->queryLocator);
    }
  }

  return $purchased_items;
}

/**
 * Convert a Salesforce record ID into a purchasable item type. 
 */
function _get_type_by_salesforce_record_id($record_id) 
{
  if (strpos($record_id, COURSE_OPPORTUNITY_RECORD_TYPE_ID) === 0)
  {
    return COURSE_TYPE;
  }
  
  if (strpos($record_id, MEETING_OPPORTUNITY_RECORD_TYPE_ID) === 0)
  {
    return MEETING_TYPE;
  }

  if (strpos($record_id, FILE_LIBRARY_OPPORTUNITY_RECORD_TYPE_ID) === 0)
  {
    return FILE_LIBRARY_TYPE;
  }

  return NULL;
}

/**
 * Utility method to create a suitable HTML email template for a hook_mail() method.
 * @param $message the $message parameter of hook_mail().
 * @param $mail_id a unique identifier for this message.
 * @param $subject the subject of the message.
 * @param $body the body of the message: may be HTML.
 */
function ace_payments_make_html_mail(&$message, $mail_id, $subject, $body) 
{
  $message['mail_id'] = $mail_id;
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8;';
  $message['headers']['X-Mailer'] = 'Drupal';
  $message['subject'] = $subject;
  $message['body'] =
  	"<html>\n" .
    "<head>\n" .
    "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n" .
    "</head>\n" .
    "<body>\n". $body ."</body>\n" .
    "</html>\n";
}
