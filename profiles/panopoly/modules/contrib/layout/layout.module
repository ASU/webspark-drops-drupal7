<?php

/**
 * @file
 * Responsive layout builder tool for Panels.
 */

/**
 * Implements hook_init().
 */
function layout_init() {
  // Don't load the ResponsiveLayoutDesigner preview bar on admin pages.
  if (arg(0) == 'admin') {
    return;
  }

  // Load the responsive layout object.
  ctools_include('plugins');
  $layouts = ctools_get_plugins('panels', 'layouts');
  $layout = $layouts['responsive'];

  $breakpoints = layout_breakpoint_load_all();
  $grids = gridbuilder_load_all();
  // Push the breakpoints info to settings for the layoutPreviewer.
  drupal_add_js(array(
    'layout' => array(
      'breakpoints' => $breakpoints,
      'grids' => $grids,
    ),
  ), 'setting');

  // Add the ResponsiveLayoutDesigner application.
  layout_responsive_load_rld_application($layout['path']);
  drupal_add_css($layout['path'] . '/responsive-in-place.css');
  // Add integration code for Drupal.
  drupal_add_js($layout['path'] . '/responsive-in-place.js');
}

/**
 * Implementation of hook_module_implements_alter().
 */
function layout_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'menu_alter') {
    // Move layout_menu_alter() to the end of the list. module_implements()
    // iterates through $implementations with a foreach loop which PHP iterates
    // in the order that the items were added, so to move an item to the end of
    // the array, we remove it and then add it.
    $group = $implementations['layout'];
    unset($implementations['layout']);
    $implementations['layout'] = $group;
  }
}

/**
 * Implementation of hook_menu_alter().
 */
function layout_menu_alter(&$items) {
  // Convert the automatically created ctools menu items to local tasks.
  if (isset($items['admin/structure/panels/layouts/breakpoints'])) {
    $items['admin/structure/panels/layouts/breakpoints']['type'] = MENU_LOCAL_TASK;
  }
  if (isset($items['admin/structure/panels/layouts/regions'])) {
    $items['admin/structure/panels/layouts/regions']['type'] = MENU_LOCAL_TASK;
  }

  // Hide this local action so its not visible anymore in Panels.
  if (isset($items['admin/structure/panels/layouts/add-flexible'])) {
    $items['admin/structure/panels/layouts/add-flexible']['type'] = MENU_CALLBACK;
    $items['admin/structure/panels/layouts/add-responsive']['title'] = 'Add layout';
    // Modify the title on the 'List' tab, although this makes it pretty
    // non-standard, by putting more things on the same level (breakpoints,
    // grids and regions by side of layouts), it becomes confusing as long
    // as the tab is labeled 'List'.
    $items['admin/structure/panels/layouts/list']['title'] = 'Layouts';
  }
}

/**
 * Implements hook_permission().
 */
function layout_permission() {
  return array(
    'administer layouts' => array(
      'title' => t('Administer responsive layouts'),
      'description' => t('Administer backend settings for responsive layouts.'),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function layout_ctools_plugin_directory($owner, $plugin_type) {
  if (($owner == 'panels' && $plugin_type == 'layouts') || ($owner == 'ctools' && $plugin_type =='export_ui')) {
    return "plugins/$plugin_type";
  }
}

/**
 * Implementation of hook_ctools_plugin_api().
 *
 * Tell CTools that we support the default_layout_breakpoint and
 * default_panels_layout APIs.
 */
function layout_ctools_plugin_api($owner, $api) {
  if (($owner == 'layout' && $api == 'default_layout_breakpoint') ||
      ($owner == 'layout' && $api == 'default_layout_region') ||
      ($owner == 'panels' && $api == 'layouts')) {
    return array('version' => 1);
  }
}

// == Layouts =================================================================

/**
 * Implementation of hook_default_panels_layout().
 *
 * Provide a couple default layouts.
 */
function layout_default_panels_layout() {
  $export = array();

  $layout = new stdClass();
  $layout->disabled = FALSE;
  $layout->api_version = 1;
  $layout->name = 'default';
  $layout->admin_title = 'Default responsive layout';
  $layout->admin_description = '';
  $layout->category = '';
  $layout->plugin = 'responsive';
  $layout->settings = array(
    'regions' => array(
      'header_a' => 'header_a',
      'header_b' => 'header_b',
      'header_c' => 'header_c',
      'subheader_a' => 'subheader_a',
      'subheader_b' => 'subheader_b',
      'subheader_c' => 'subheader_c',
      'navigation' => 'navigation',
      'title' => 'title',
      'body' => 'body',
      'sidebar_a' => 'sidebar_a',
      'sidebar_b' => 'sidebar_b',
      'sidebar_c' => 'sidebar_c',
      'footer_a' => 'footer_a',
      'footer_b' => 'footer_b',
      'footer_c' => 'footer_c',
    ),
    'overrides' => array(),
  );
  $export['default'] = $layout;

  return $export;
}

// == Regions =================================================================

/**
 * Implementation of hook_default_layout_region().
 *
 * Provide a couple of default regions.
 */
function layout_default_layout_region() {
  $export = array();

  $base_regions = array(
    'header_a' => 'Header A',
    'header_b' => 'Header B',
    'header_c' => 'Header C',
    'subheader_a' => 'Subheader A',
    'subheader_b' => 'Subheader B',
    'subheader_c' => 'Subheader C',
    'navigation' => 'Navigation',
    'title' => 'Title',
    'body' => 'Body',
    'sidebar_a' => 'Sidebar A',
    'sidebar_b' => 'Sidebar B',
    'sidebar_c' => 'Sidebar C',
    'footer_a' => 'Footer A',
    'footer_b' => 'Footer B',
    'footer_c' => 'Footer C',
  );
  foreach ($base_regions as $name => $admin_title) {
    $region = new stdClass;
    $region->api_version = 1;
    $region->name = $name;
    $region->admin_title = $admin_title;
    $export[$name] = $region;
  }

  return $export;
}

/**
 * Add or update region in common set of regions.
 *
 * @param $region
 *   A fully populated region object.
 */
function layout_region_save($region) {
  ctools_include('export');
  $regions = ctools_export_crud_save('layout_region', $region);
  return $regions;
}

/**
 * Load all common layout regions.
 *
 * @return
 *   All common regions in an associative array keyed by machine name.
 */
function layout_region_load_all() {
  ctools_include('export');
  $regions = ctools_export_crud_load_all('layout_region');
  return $regions;
}

/**
 * Load one layout based on its machine name.
 */
function layout_region_load($name) {
  ctools_include('export');
  return ctools_export_crud_load('layout_region', $name);
}

/**
 * Get a list of layout names using the given region machine name.
 */
function layout_get_layouts_using_region($name) {
  $layouts = layout_get_responsive_layouts();
  $layouts_using_region = array();
  foreach ($layouts as $data) {
    if (isset($data['layout']->settings['regions']) && is_array($data['layout']->settings['regions']) && isset($data['layout']->settings['regions'][$name])) {
      $layouts_using_region[$data['layout']->name] = $data['title'];
    }
  }
  return $layouts_using_region;
}

// == Breakpoints =============================================================

/**
 * Implementation of hook_default_layout_breakpoint().
 *
 * Provide a couple of default breakpoints.
 */
function layout_default_layout_breakpoint() {
  $export = array();

  $breakpoint = new stdClass;
  $breakpoint->api_version = 1;
  $breakpoint->name = 'smartphone';
  $breakpoint->admin_title = 'Smartphone';
  $breakpoint->width = '0px';
  $breakpoint->grid_name = 'three_column_fluid';
  $export['smatphone'] = $breakpoint;

  $breakpoint = new stdClass;
  $breakpoint->api_version = 1;
  $breakpoint->name = 'tablet';
  $breakpoint->admin_title = 'Tablet';
  $breakpoint->width = '320px';
  $breakpoint->grid_name = 'six_column_fluid';
  $export['tablet'] = $breakpoint;

  $breakpoint = new stdClass;
  $breakpoint->api_version = 1;
  $breakpoint->name = 'standard';
  $breakpoint->admin_title = 'Standard';
  $breakpoint->width = '760px';
  $breakpoint->grid_name = 'twelve_column_fluid';
  $export['standard'] = $breakpoint;

  return $export;
}

/**
 * API function to get all responsive breakpoint on the site.
 */
function layout_breakpoint_load_all() {
  ctools_include('export');
  $breakpoints = ctools_export_crud_load_all('layout_breakpoint');
  uasort($breakpoints, 'layout_breakpoint_sort_by_width');
  return $breakpoints;
}

/**
 * Look up one breakpoint setup based on machine name.
 */
function layout_breakpoint_load($name) {
  ctools_include('export');
  return ctools_export_crud_load('layout_breakpoint', $name);
}

/**
 * Build CSS for the breakpoints with media queries.
 *
 * @param boolean $include_media_queries
 *   Whether generate one flat CSS without media queries (useful for
 *   administration), or wrap breakpoints with media queries (for frontend).
 *
 * @todo
 *   Figure out a good way to avoid equal max/min-weights in subsequent
 *   breakpoints if that is a problem.
 */
function layout_breakpoint_get_css($include_media_queries = TRUE) {
  $breakpoints = layout_breakpoint_load_all();
  
  $breakpoint_css = array();
  $min_width = 0;

  $breakpoint_count = count($breakpoints);
  $breakpoint_index = 0;
  foreach ($breakpoints as $name => $breakpoint) {
    if ($include_media_queries) {
      $first_breakpoint = $breakpoint_index == 0;
      $last_breakpoint = ($breakpoint_index == ($breakpoint_count - 1));

      // Build the media query for this breakpoint. The first item should not have
      // a min-width (open ended to 0), and the last item should have no max-width
      // (open-ended to infinity). Mid-items should both have a min-width and a
      // max-width.
      $breakpoint_css[] =
        '@media screen and (' .
        ($first_breakpoint ? '' : 'min-width:' . $min_width) .
        ((!$first_breakpoint && !$last_breakpoint) ? ') and (' : '') .
        ($last_breakpoint ? '' : 'max-width:' . $breakpoint->width) .
        ') {';
      // Get grid CSS from gridbuilder and apply some extra indentation.
      $breakpoint_css[] = '  ' . str_replace("\n", "\n  ", gridbuilder_get_css($breakpoint->grid_name, '.panel-responsive', '.rld-span-' . $name . '_'));
      $breakpoint_css[] = "\n}";

      // Remember min-width for next breakpoint if applicable. The breakpoints
      // are in ascending width order, so we can rely on this sequence.
      $min_width = $breakpoint->width;
      $breakpoint_index++;
    }
    else {
      $breakpoint_css[] = gridbuilder_get_css($breakpoint->grid_name, NULL, NULL, TRUE);
    }
  }
  $css = join("\n", $breakpoint_css);

  return $css;
}

/**
 * Sort the breakpoints in ascending order by their width.
 */
function layout_breakpoint_sort_by_width($a, $b) {
  // Cast the width to int. Whether it provided as px or em, the cast should
  // result in a relevant number. It will not sort mixed em/px numbers properly
  // but that sounds like a broken setup. Not desigining for that.
  if ((int) $a->width == (int) $b->width) {
    return 0;
  }
  return ((int) $a->width < (int) $b->width) ? -1 : 1;
}

// == Layouts =================================================================

/**
 * Get all responsive layout info arrays from panels.
 */
function layout_get_responsive_layouts() {
  ctools_include('plugins', 'panels');
  $all_layouts = panels_get_layouts();
  $responsive_layouts = array();
  foreach ($all_layouts as $name => $data) {
    if (empty($data['builder']) && isset($data['layout']->plugin) && ($data['layout']->plugin == 'responsive')) {
      $responsive_layouts[$name] = $data;
    }
  }
  return $responsive_layouts;
}
