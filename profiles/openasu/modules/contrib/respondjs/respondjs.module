<?php

/**
 * @file
 * Main file for the Respond.js module
 */

define('RESPONDJS_SCOPE_DEFAULT','header');
define('RESPONDJS_QUIET_DEFAULT',NULL);

/**
 * Implements hook_menu().
 *
 * Provides admin config pages.
 */
function respondjs_menu() {
  $items = array();
  $items['admin/config/media/respondjs'] = array(
    'title' => 'Respond.js',
    'description' => 'Configure respond.js settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('respondjs_admin'),
    'access arguments' => array('access administration pages'),
    'file' => 'respondjs.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_init().
 *
 * This is the function that adds respond.js to the page.
 * Feel free to snatch this code if you're adding it directly into your theme.
 */
function respondjs_init() {
  // We need respond.js to load as soon in the HTML as possible, because it can
  // affect the presentation of a page. The options below ensure that it happens.
  drupal_add_js(
    respondjs_get_library_file(),
    array(
      'type' => 'file',
      'scope' => variable_get('respondjs_scope', RESPONDJS_SCOPE_DEFAULT),
      'group' => JS_LIBRARY,
      'every_page' => TRUE,
      'weight' => -999,
      'preprocess' => 0,
    )
  );
}

/**
 * Implements hook_library().
 */
function respondjs_library() {
  $libraries['respondjs'] = array(
    'title' => 'Respond.js',
    'website' => 'https://github.com/scottjehl/Respond',
    'version' => '',
    'js' => array(
      respondjs_get_library_file() => array(),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_requirements().
 */
function respondjs_requirements($phase) {
  $requirements = array();
  if ($phase == "runtime") {
    $library_path = respondjs_get_library_file();
    $requirements['respondjs'] = array(
      'title' => t('Respond.js script'),
      'value' => t('Enabled'),
    );
    // If CSS aggregated is not enabled, inform users it will not work.
    if (variable_get('preprocess_css') != 1) {
      $requirements['respondjs']['value'] = t('Respond.js will not work with CSS aggregation disabled.');
      if (variable_get('respondjs_quiet', RESPONDJS_QUIET_DEFAULT) == 1) {
        // If the user disabled the warning, reduce the severity of this requirement.
        $requirements['respondjs']['severity'] = REQUIREMENT_WARNING;
        $requirements['respondjs']['description'] = t('The Respond.js module is enabled, but CSS aggregation is disabled. The script cannot function until <a href="@url">CSS agregation is enabled</a>.', array('@url' => url('admin/config/development/performance')));
      }
      else {
        // By default, failure to meet this requirement will result in an admin warning.
        $requirements['respondjs']['severity'] = REQUIREMENT_ERROR;
        $requirements['respondjs']['description'] = t('The Respond.js module is enabled, but CSS aggregation is disabled. The script cannot function until <a href="@url1">CSS agregation is enabled</a>. You can <a href="@url2">disable this warning</a>.', array('@url1' => url('admin/config/development/performance'), '@url2' => url('admin/config/media/respondjs')));
      }
    }
    // If Libraries API is enabled but respond.js is not found within the sites/all/libraries folder
    // report a warning. The module will fall back to its included copy so this isn't a showstopper.
    if (function_exists('libraries_get_path') && strpos($library_path,'libraries/respondjs') === FALSE) {
      $requirements['respondjs']['value'] = t('Respond.js is not correctly using Libraries API');
      $requirements['respondjs']['severity'] = REQUIREMENT_WARNING;
      $requirements['respondjs']['description'] = t('Please install <a href="https://raw.github.com/scottjehl/Respond/master/respond.min.js">Respond.js</a> in <b>'. libraries_get_path('respondjs') .'</b>. The module is using its included copy at <b>'.drupal_get_path('module','respondjs') .'/lib</b>');
    }
    // If the included copy of respond.js has been removed or renamed report an error.
    // At this point the module cannot function properly.
    if (!file_exists($library_path)) {
      $requirements['respondjs']['value'] = t('Respond.js is not correctly installed');
      $requirements['respondjs']['severity'] = REQUIREMENT_ERROR;
      $requirements['respondjs']['description'] = t('Please install <a href="https://raw.github.com/scottjehl/Respond/master/respond.min.js">Respond.js</a> in the repsondjs folder under /lib');
    }
  }
  return $requirements;
}

/**
 * Helper function gets the path to the library directory
 */
function respondjs_get_library_path() {
  $default_path = drupal_get_path('module', 'respondjs') . '/lib';

  // If Libraries API is enabled, make sure the file exists before pointing there
  if (function_exists('libraries_get_path') && file_exists(libraries_get_path('respondjs'))) {
    $path = libraries_get_path('respondjs');
  }
  // Respond.js is GPLv2 so we can ship it in the module folder as a fallback.
  // However, we still check to be on the safe side.
  else if (file_exists($default_path)) {
    $path = $default_path;
  }
  // If the module's files have been altered, we should not report the default path.
  // repsondjs_requirements() will report this error.
  else {
    $path = NULL;
  }

  return $path;
}

/**
 * Helper function gets the path to the library Javascript file
 */
function respondjs_get_library_file() {
  return respondjs_get_library_path() . '/respond.min.js';
}
