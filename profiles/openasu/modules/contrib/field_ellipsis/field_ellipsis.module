<?php

/**
 * Implements hook_field_formatter_info().
 */
function field_ellipsis_field_formatter_info() {
  return array(
    'text_trimmed_ellipsis' => array(
      'label' => t('Trimmed with ellipsis'),
      'field types' => array('text', 'text_long', 'text_with_summary'),
      'settings' => array('trim_length' => 600, 'allowed_tags' => ''),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function field_ellipsis_theme($existing, $type, $theme, $path) {
  return array(
    'field_ellipsis' => array(
      'variables' => array(
        'text' => NULL,
        'allowed_tags' => NULL,
        'trim_length' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function field_ellipsis_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if (strpos($display['type'], '_trimmed') !== FALSE) {
    $element['trim_length'] = array(
      '#title' => t('Trim length'),
      '#type' => 'textfield',
      '#size' => 10,
      '#default_value' => $settings['trim_length'],
      '#element_validate' => array('element_validate_integer_positive'),
      '#required' => TRUE,
    );
    $element['allowed_tags'] = array(
      '#title' => t('Allowed Tags'),
      '#description' => 'Add tags you would like to retain. Use basic tag with no spaces or commas between them.<br />'
        . '<em>It is recommended that you do not allow &lt;p&gt; tags.</em><br />Example &lt;em&gt;&lt;u&gt;&lt;br&gt;&lt;strong&gt;',
      '#type' => 'textfield',
      '#size' => 20,
      '#default_value' => $settings['allowed_tags'],
      '#required' => FALSE,
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function field_ellipsis_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if (strpos($display['type'], '_trimmed') !== FALSE) {
    $summary = t('Trim length') . ': ' . $settings['trim_length'] . '<br />' .
      t('Allowed tags') . ': ' .htmlentities($settings['allowed_tags']);
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_view()
 */
function field_ellipsis_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'text_trimmed_ellipsis':
      foreach ($items as $delta => $item) {
        $output = _text_sanitize($instance, $langcode, $item, 'value');
        if ($display['type'] == 'text_trimmed_ellipsis' && strlen($output) > $display['settings']['trim_length']) {

          // We would use text_summary() to trim but it doesn't use some of
          // truncate_utf8's more useful features.
          $output = text_summary($output, $instance['settings']['text_processing'] ? $item['format'] : NULL);

          // Truncate to length, allow selected tags, respect word boundaries and add ellipses.
          $output = theme('field_ellipsis',
            array(
              'text' => $output,
              'trim_length' => $display['settings']['trim_length'],
              'allowed_tags' => $display['settings']['allowed_tags'],
            )
          );
        }
        $element[$delta] = array('#markup' => $output);
      }
      break;
  }

  return $element;
}

/**
 * Render the truncated field and ellipsis.
 *
 * @param array $variables
 *    Theme function variables.
 *
 * @return string
 *    The truncated and ellipsis'd string.
 */
function theme_field_ellipsis($variables) {
    $trim = truncate_utf8(strip_tags($variables['text'], $variables['allowed_tags']), $variables['trim_length'], TRUE, TRUE);
    return '<p>' . $trim . '</p>';
}
