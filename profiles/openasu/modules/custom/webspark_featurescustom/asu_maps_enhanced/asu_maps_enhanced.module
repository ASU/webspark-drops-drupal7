<?php

/**
 * Implementation of hook_entity_info_alter()
 **/
function asu_maps_enhanced_entity_info_alter(&$entity_info) {

  // ASU Maps Enhanced Entity Info
  $entity_info['fieldable_panels_pane']['bundles']['asu_maps_enhanced'] = array(
    'label' => t('Add Enhanced ASU Map'),
    'description' => t('Add Enhanced ASU Map'),
    'pane category' => t('Custom'),
    'pane top level' => TRUE,
    'pane icon' => drupal_get_path('module', 'panopoly_widgets') . '/images/icon_map.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/asu_maps_enhanced',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );
}

function asu_maps_enhanced_field_info() {
  return array(
    'asu_maps_enhanced' => array(
      'label' => t('ASU Enhanced Maps'),
      'description' => t('A field to store ASU Map Items'),
      'default_widget' => 'asu_maps_enhanced_form',
      'default_formatter' => 'asu_maps_enhanced',
      'settings' => array(
        //'uri_scheme' => variable_get('file_default_scheme', 'public'),
        //'default_image' => 1,
      ),
      'instance_settings' => array(

      ),
    ),
  );
}

/*
*Function to check if asu_maps_enhanced field is empty
*
*/
function asu_maps_enhanced_field_is_empty($item, $field) {
  if (empty($item['map_items'])) {
      return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_field_formatter_info().
 *
 */
function asu_maps_enhanced_field_formatter_info() {
  return array(
    'asu_maps_enhanced' => array(
      'label' => t('ASU Enhanced Maps'),
      'field types' => array('asu_maps_enhanced'),
      'settings' => array(
      ),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function asu_maps_enhanced_theme($existing, $type, $theme, $path) {
  return array(
    'asu_maps_enhanced_view' => array(
      'variables' => array(
        'items' => NULL,
        'delta' => NULL,
        'settings' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function asu_maps_enhanced_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $map_items = array();
  if(isset($items[0]['map_items'])) {
      $map_items = drupal_json_decode($items[0]['map_items']);

      $element = array();
      $settings = $display['settings'];
      $formatter = $display['type'];
  }
  foreach ($items as $delta => $item_data) {
      $element[$delta]['#markup'] = theme('asu_maps_enhanced_view', array('items' => $map_items, 'delta' => $delta, 'settings' => $settings));

  }

  if(isset($items[0]['description'])) {
      if($items[0]['description']!='<none>' || $items[0]['description']!='none') {
          $element[$delta]['#markup'] .= '<div>'.$items[0]['description'].'</div>';
      }
  }

  return $element;
}

/**
* Theme function for asu_maps view
**/
function theme_asu_maps_enhanced_view($variables) {

  $output = '';
  if(!empty($variables['items'])) {
      $output .= '<div id="asu_map" style="height:642px; width: 100%;"><iframe style="height: 100%;" id="embed-iframe" class="map dev" src="//myatlascms.maps.asu.edu/map/?id=120&amp;em=1#!f/';

      $count = count($variables['items']);
      $i = 1;

      foreach($variables['items'] as $location) {

          $output .= $location['id'];
          if($i!=$count) {
            $output .= ',';
          }
          $i++;
      }

      $output .='" frameborder="0" width="100%"></iframe></div>';
  }
  return $output;
}


//Originallly copied in and refactored from ASU Spotlight
/**
* Implements hook_field_widget_info().
**/
function asu_maps_enhanced_field_widget_info() {
  return array(
    'asu_maps_enhanced_form' => array(
      'label' => t('ASU Enhanced Maps'),
      'field types' => array('asu_maps_enhanced'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_settings_form()
 */
function asu_maps_enhanced_field_settings_form($field, $instance, $has_data) {
  $form = array();

  return $form;
}

/**
 * Implements hook_field_instance_settings_form()
 */
function asu_maps_enhanced_field_instance_settings_form($field, $instance) {
  $form = array();
  //$form = image_field_instance_settings_form($field, $instance);
  return $form;
}

/**
 * Implements hook_field_formatter_settings_form().
 *
 */
function asu_maps_enhanced_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 *
 */
function asu_maps_enhanced_field_formatter_settings_summary($field, $instance, $view_mode) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  return $summary;
}


/**
 * Implements hook_field_widget_form().
 */
function asu_maps_enhanced_field_widget_form(&$form, &$form_state, $field, $instance,  $langcode, $items, $delta, $element) {

  if ($instance['widget']['type'] == 'asu_maps_enhanced_form') {
    variable_set('panopoly_magic_live_preview', 0);

    //Initial Campus Bird interation in order to grap categories and subcategories
    $catarray = asu_maps_enhanced_get_cbird('categories', '', false);

    //get the top level categories, and place all other categories into  other_cats array
    $category_options = array();
    $other_cats = array();

    //top_level is the array where we will store the actual top-level choices for the form
    $top_level = array();
    foreach($catarray as $value) {
      if($value['parent']==0) {
          $category_options[$value['catId']]['parent']=$value['name'];
          $category_options[$value['catId']]['children']= array();
          $top_level[$value['catId']] = $value['name'];
      } else {
          $other_cats[$value['catId']]=$value;
      }
    }

    //build out category_options array which has the parent category ids as keys
    //and a subarray 'children', which holds all child category ID's
    foreach($category_options as $key => &$top) {
        $i = 0;
        foreach($other_cats as $thing) {
              if($thing['parent']==$key) {
                  $top['children'][$thing['catId']] = $thing['name'];
                  $i++;
              }
        }
    }

    $prev_json_locations = array();
    //get the item values that we will need to populate the category and location default values
    if(isset($items[$delta]['map_items'])) {
        $prev_json_locations = drupal_json_decode($items[$delta]['map_items']);
    }

    //get the previous locations selected, and the previous categories selected
    $prev_loc_selects = array();
    $prev_cat_selects = array();
    foreach($prev_json_locations as $pjl) {
          $prev_cat_selects[$pjl['catId']] = $pjl['catId'];
          $prev_loc_selects[$pjl['id']] = $pjl['id'];
    }

    $prev_cat_selects = array_unique($prev_cat_selects);
    $prev_loc_select = array_unique($prev_loc_selects);

    //now we need to find the top level categories which were selected previously
    //and we separate the rest into the prev_sub_selects array
    $prev_top_selects = array();
    $prev_sub_selects = array();

    foreach($prev_cat_selects as $prev_key => $prev) {
        $top_marker = 0;
        foreach($top_level as $key => $top) {
            if($key==$prev) {
                $prev_top_selects[$key] = $prev;
                $top_marker = 1;
            }
        }
        if($top_marker==0) {
            //if category selected is not parent, insert into the prev_sub_selects array,
            //and insert its parent into the prev_top_selects array
            $prev_sub_selects[$prev] = $prev;
            $prev_top_selects[$other_cats[$prev]['parent']] = $other_cats[$prev]['parent'];
        }
    }

    $prev_sub_selects= array_unique($prev_sub_selects);
    $prev_top_selects= array_unique($prev_top_selects);

    //Begin building the widget form
    $element['description'] = array(
      '#title' => t('Description'),
      '#type' => 'textfield',
      '#rows' => 2,
      '#default_value' => isset($items[$delta]['description']) ? $items[$delta]['description'] : NULL,
    );

    $element['bird_fieldset'] = array(
        '#type' => 'fieldset',
        '#title' => t('Location Selection Form'),
        // Set up the wrapper so that AJAX will be able to replace the fieldset.
        '#prefix' => '<div class="col-md-12" id="bird_form_div">',
        '#suffix' => '</div>',
    );

    //This is where the user selects the top categories he/she wishes to choose locations from.
    //It also sets up an ajax callback to asu_maps_enhanced_get_locations.  Which
    //will reload the form with our updated sub category values.
    $element['bird_fieldset']['top_category_id'] = array(
      '#title' => t('Categories'),
      '#type' => 'checkboxes',
      '#options' => $top_level,
      '#prefix' => '<div class="col-md-4">',
      '#suffix' => '</div>',
      '#ajax' => array(
          'event' => 'change',
          'callback' => 'asu_maps_enhanced_get_fields',
          'wrapper' => 'bird_form_div',//'sub_div',
          'method' => 'replace',
          'effect' => 'fade',
      ),
      '#default_value' => isset($prev_top_selects) ? $prev_top_selects : NULL,
    );

    //Grab Sub-Categories (dependent on top categories)
    //
    $top_cat_selected = array();
    if(isset($form_state['values']['field_asu_maps_enhanced_items']['und'][$delta]['bird_fieldset']['top_category_id'])) {
        $top_cat_selected = $form_state['values']['field_asu_maps_enhanced_items']['und'][$delta]['bird_fieldset']['top_category_id'];
    } else if (isset($prev_top_selects)) {
        $top_cat_selected = $prev_top_selects;
    }

    //Loop through the array of selected items, grabbing the subcategories for each
    //along the way
    $sub_options = array();
    $subarray = array();
    foreach($top_cat_selected as $top_cat) {
        if($top_cat!=0) {
            $subarray = $category_options[$top_cat]['children'];
            $sub_options = $sub_options + $subarray;
        }
    }

    //SUB-CATEGORY FORM FIELD
    //
    $element['bird_fieldset']['sub_category'] = array(
      '#title' => t('Sub-Categories'),
      '#type' => 'checkboxes',
      '#prefix' => '<div class="col-md-4">',
      '#suffix' => '</div>',
      '#options' => $sub_options,
      '#ajax' => array(
          'event' => 'change',
          'callback' => 'asu_maps_enhanced_get_fields',
          'wrapper' => 'bird_form_div',//'bird_locations_div',
          'method' => 'replace',
          'effect' => 'fade',
      ),
      '#default_value' => isset($prev_sub_selects) ? $prev_sub_selects: NULL
      );

      //Grab the selected sub categories from the form state, or the prev_selected subs
      //if unavailable
      //
      $sub_cat_selected = array();
      if(isset($form_state['values']['field_asu_maps_enhanced_items']['und'][$delta]['bird_fieldset']['sub_category'])) {
          $sub_cat_selected = $form_state['values']['field_asu_maps_enhanced_items']['und'][$delta]['bird_fieldset']['sub_category'];
      } else if (isset($prev_sub_selects)) {
          $sub_cat_selected = $prev_sub_selects;
      }


      //get the locations that the user has selected
      $loc_selected = array();
      if(isset($form_state['values']['field_asu_maps_enhanced_items']['und'][0]['bird_fieldset']['location_id'])) {
          $loc_selected = $form_state['values']['field_asu_maps_enhanced_items']['und'][0]['bird_fieldset']['location_id'];
      } else {
          $loc_selected = $prev_loc_selects;
      }


      //Loop through the array of sub_category selected items, grabbing the locations for each
      //along the way
      $loc_by_subcat = array();
      $loc_options = array();
      $loc_array = array();

      foreach($sub_cat_selected as $subcat) {
          if($subcat!=0) {
              $loc_array = asu_maps_enhanced_get_cbird('locations', $subcat, false);

              $loc_by_subcat[$subcat] = $loc_array;
          }
      }

      foreach($loc_by_subcat as $locsub) {
          foreach($locsub as $lo) {
              $loc_options[$lo['id']] = $lo;
          }
      }

      //Grab Location Options, and compare against user locations selected

      //Now we need to to loop through each categorical array, and add the form element
      //choices to the loc_choices array.  At the same time we are adding each of the
      //json elements to an array which will then be selected from for final storage.
      $loc_json = array();
      $loc_choices = array();
      $i = 0;
      foreach($loc_options as $loc) {
          $loc_choices[$loc['id']]=$loc['name'];
          $loc_json[$i] = $loc;
          $i++;
      }



    //add the location choices to the field form element
    $element['bird_fieldset']['location_id'] = array(
      '#title' => t('Locations'),
      '#type' => 'checkboxes',
      '#prefix' => '<div id="bird_locations_div" class="col-md-4">',
      '#suffix' => '</div>',
      '#ajax' => array(
          'event' => 'change',
          'callback' => 'asu_maps_enhanced_get_fields',
          'wrapper' => 'bird_form_div',
          'method' => 'replace',
          'effect' => 'fade',
      ),
      '#options' => $loc_choices,
      '#default_value' => isset($loc_selected) ? $loc_selected : NULL,
    );


    //loop through prev_loc_selects and remove any which are unavailable now
    /*if(!empty($loc_choices)) {

        foreach($prev_loc_selects as &$ploc) {
            $found = 0;
            foreach($loc_choices as $key => $choice) {
                if($key == $ploc) {
                  $found = 1;
                }
            }

            if($found==0) {
              unset($ploc);
            }
        }
    }*/

    //MAP_ITEMS HIDDEN FIELD LOGIC
    //loop through and fill final array, json_locations, with selected locations, then json encode
    //and send value to hidden map items element. This element is mapped to the map_items
    //text field in the database.
    $i=0;
    $json_locations = array();
    foreach($loc_selected as $loc_item) {

        if($loc_item!=0) {
            foreach($loc_json as $json_loc_item) {
                if($loc_item==$json_loc_item['id']) {
                    $json_locations[$i] = $json_loc_item;
                    $i++;
                }
            }
        }
    }

    $encoded_loc = drupal_json_encode($json_locations);

    $element['map_items'] = array(
      '#title' => t('Map Items'),
      '#type' => 'hidden',
      '#value' => $encoded_loc,
      '#prefix' => '<div id="map_items_hidden">',
      '#suffix' => '</div>',
      '#default_value' => isset($items['map_items']) ? $items['map_items'] : NULL,
    );


  }

  return $element;
}

function asu_maps_enhanced_get_fields($form, &$form_state) {

  $commands = array();
  $commands[] = ajax_command_replace('#bird_form_div', drupal_render($form['field_asu_maps_enhanced_items']['und'][0]['bird_fieldset']));
  $commands[] = ajax_command_replace("#map_items_hidden", drupal_render($form['field_asu_maps_enhanced_items']['und'][0]['map_items']));
  return array('#type' => 'ajax', '#commands' => $commands);
}
/*not needed for now*****
function asu_maps_enhanced_get_locations($form, &$form_state) {


function asu_maps_enhanced_user_loc_choices($form, &$form_state) {

}
*/

/**
*Function to get json objects from campus bird
*@param  string $type needs to be either locations or categories for now
*@param string $category is the category id of locations to return (optional)
*@param boolean $visible, if set to true, will only return an array of items
*        which are set to visible=1 by Campus Bird
*
*/
function asu_maps_enhanced_get_cbird($type, $category='', $visible=false) {
    $visible = $visible || false;
    $URL1 = 'http://myatlascms.com/map/api/v2/';
    $KEY = '&api_key=ca4738acd976cc0702f7ef7dc25b3568';
    $MAP = '?map=120';
    $COD = null;
    switch ($type) {
        case 'locations':
            //list of locations
            $COD = $URL1 . $type . '/' . $category . $MAP . $KEY;
            break;
        case 'categories':
            //list of categories
            $COD = $URL1 . $type . $MAP . $KEY;
            break;
    }

    $request = drupal_http_request($COD);
    $jsonarray = drupal_json_decode($request->data);

    if($visible) {
      $filtered = array_filter($jsonarray, function($x) { return $x['visible']=='1'; });

      return $filtered;
    }
      return $jsonarray;
}


/**
 * Implements hook_field_validate().
 */
function asu_maps_enhanced_field_validate($entity_type, $entity, $field, $instance, $langcode, &$items, &$errors) {

  foreach ($items as &$item) {

  }
}


/**
 * Implements hook_field_presave()
 */
function asu_maps_enhanced_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {

  if (!empty($items)) {
    foreach ($items as &$item) {

    }
  }
}

/**
 * Implements hook_field_load().
 */
function asu_maps_enhanced_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {

}

/**
 * Implements hook_field_insert().  Turns preview back on upon inserting new field.
 */
function asu_maps_enhanced_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
    variable_set('panopoly_magic_live_preview', 1);
}

/**
 * Implements hook_field_update().  Turns preview back on upon updating field.
 */
function asu_maps_enhanced_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
    variable_set('panopoly_magic_live_preview', 1);
}

/**
 * Implements hook_field_delete().
 */
function asu_maps_enhanced_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {

}

/**
 * Implements hook_field_delete_revision().
 */
function asu_maps_enhanced_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, &$items) {

}

/**
 * Implements hook_field_prepare_view().
 */
function asu_maps_enhanced_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {

}
