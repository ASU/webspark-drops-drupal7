<?php /** @noinspection PhpPossiblePolymorphicInvocationInspection */
/** @noinspection PhpUnhandledExceptionInspection */
/** @noinspection PhpUnused */
/** @noinspection PhpDocSignatureInspection */
/** @noinspection PhpUnusedParameterInspection */

/**
 * Implementation of hook_schema().
 */
function asu_rfi_schema() {
  /* US states schema */
  $schema['asu_rfi_states_list'] = array(
    'description' => 'List of US states',
    'fields' => array(
    'stateCode' => array(
      'description' => 'State code',
      'type' => 'varchar',
      'length' => 225,
      'not null' => TRUE
    ),
    'stateDesc' => array(
      'description' => 'State Name',
      'type' => 'varchar',
      'length' => 225,
      'not null' => TRUE,
      ),
    ),
    'primary key' => array('stateCode'),
  );
  /* US countries schema */
  $schema['asu_rfi_countries'] = array(
    'description' => 'Countries list',
    'fields' => array(
      'countryCode3' => array(
        'description' => 'Country code',
        'type' => 'varchar',
        'length' => 225,
        'not null' => TRUE
      ),
      'countryDesc' => array(
        'description' => 'Country name',
        'type' => 'varchar',
        'length' => 225,
        'not null' => TRUE
      ),
    ),
    'primary key' => array('countryCode3'),
  );
  /* Semester dates */
  $schema['asu_rfi_sem_dates'] = array(
    'description' => 'Start term dates',
    'fields' => array(
      'semId' => array(
        'description' => 'Semeter term ID',
        'type' => 'varchar',
        'length' => 225,
        'not null' => TRUE
      ),
      'semLabel' => array(
        'description' => 'Semester term label',
        'type' => 'varchar',
        'length' => 225,
        'not null' => TRUE
      ),
      'semSortCode' => array(
        'description' => 'ASU-valid Semester term code',
        'type' => 'varchar',
        'length' => 4,
        'not null' => TRUE
      ),
    ),
    'primary key' => array('semId'),
  );

  return $schema;
}

function asu_rfi_install() {
  // Call initial configuration for form options upon install
  include('data/asu_rfi.form_options.inc');

  // Check middleware access up front and store
  asu_libs_set_asset_access_value('asu_rfi');
  // Set the RFI form mode to "Test" initially upon module installation
  variable_set('asu_rfi_form_mode','test');
  variable_set('asu_rfi_middleware_env', 'prod');
  flogger('asu_rfi', 'All RFI forms are currently running in Test mode (managed in ASU RFI settings).');

  // Update/insert local countries DB table
  asu_rfi_get_form_select_options('country');
  // Update/insert states into DB table
  asu_rfi_get_form_select_options('state_province');
  // Update/insert semester dates into DB table
  asu_rfi_get_form_select_options('rfi_dedupe_list_terms');

  $rfi_config_url = "/admin/config/content/asurfi";
  flogger('asu_rfi','ASU RFI module has been installed. Configure module settings at '
    . '<a href="'. $rfi_config_url . '">admin settings page</a>', array(), 8);

  // Check if CAS module exists and enabled and update cas_exclude variables with asu_rfi callback urls
  if (module_exists('cas')) {
    $out = variable_get('cas_exclude', 'none');
    $out = $out . "\r\nasu_rfi/success/*\r\nasu_rfi/failure/*";
    variable_set('cas_exclude', $out);
  }

  // If honeypot module exists, set its variable value
  if (module_exists('honeypot')){
      variable_set('honeypot_element_name','rfihurl');
  }

  // Enable entityreference_autocomplete module for the ASU RFI admin form
  if (!module_exists('entityreference_autocomplete')) {
    module_enable(array('entityreference_autocomplete'));
  }
}

/**
 * Delete all variables and remove DB tables
 */
function asu_rfi_uninstall() {
  drupal_uninstall_schema('asu_rfi');
  db_delete('variable')
    ->condition('name', 'asu_rfi_%', 'LIKE')
    ->execute();
 }

/**
 * Implements hook_update_dependencies().
 */
function asu_rfi_update_dependencies() {
  // Enable asu_libs module BEFORE applying ANY asu_rfi module updates.
  $deps['asu_rfi'][7200] = array(
    'webspark_featurescustom' => 7018,
  );
}

/**
 * Enable Honeypot module if ASU RFI module is enabled (Now required for 1.2+)
 */
function asu_rfi_update_7000(&$sandbox) {
  if (module_exists('asu_rfi') && !module_exists('honeypot'))  {
    module_enable(array('honeypot'));
  }
}

/**
 * Forces a rebuild of the module's features to include the domain and location piece
 */
function asu_rfi_update_7001(&$sandbox) {
  features_revert_module('asu_rfi_feature');
}

/**
 * Enable Flogger, Entityreference Autocomplete modules; Update non-namespaced variable names.
 * @throws InvalidMergeQueryException
 */
function asu_rfi_update_7200(&$sandbox){
  if (!module_exists('flogger')) {
    module_enable(array('flogger'));
  }
  if (!module_exists('entityreference_autocomplete')) {
    module_enable(array('entityreference_autocomplete'));
  }
  $or = db_or()
    ->condition('v.name', 'last_attempt_SF_posting', 'LIKE')
    ->condition('v.name', 'last_success_SF_posting', 'LIKE')
    ->condition('v.name', 'last_failure_SF_posting', 'LIKE')
    ->condition('v.name', 'SF_error_message_sent', 'LIKE')
    ->condition('v.name', 'siteDomain', 'LIKE');
  $updates_needed = Database::getConnection('default', 'default')
    ->select('variable', 'v')
    ->fields('v', array('name', 'value'))
    ->condition($or)
    ->execute()
    ->fetchAllKeyed();
  if (count($updates_needed) > 0) {
    $additions = array();
    foreach ($updates_needed as $name => $value) {
      $additions['asu_rfi_' . $name] = $value;
    }
    foreach ($additions as $name => $value) {
      db_merge('variable')
        ->key(array(
          'name' => $name))
        ->fields(array(
          'name' => $name,
          'value' => $value,
        ))
        ->execute();
    }
    foreach ($updates_needed as $name => $value) {
      Database::getConnection('default', 'default')
        ->delete('variable')
        ->condition('name', $name, 'LIKE')
        ->execute();
    }
    $message = count($updates_needed) . " names of the ASU RFI module settings"
     . " in the variable table were updated. See the ASU RFI module CHANGELOG "
     . "file for more information.";
  } else {
    $message = "No variable naming updates were needed for the ASU RFI module.";
  }
  flogger('asu_rfi', $message, array(), WATCHDOG_INFO, TRUE);

}
/**
 * Delete deprecated asu_rfi_siteDomain variable; Include expired asu_rfi nodes
 * with cron executions of resubmitting them to middleware or deleting them (locally).
 */
function asu_rfi_update_7201(&$sandbox) {
  Database::getConnection('default', 'default')
    ->delete('variable')
    ->condition('name', 'asu_rfi_siteDomain', 'LIKE')
    ->execute();
  variable_set('asu_rfi_expired_submit', 'all');
  variable_set('asu_rfi_expired_delete', 'all');
  flogger('asu_rfi', 'The unused asu_rfi_siteDomain setting was deleted,'
    . ' and expired RFI submissions will be resubmitted and/or deleted on every future cron run.');
}

/**
 * Update submission statuses to more instructional, guiding values
 */
function asu_rfi_update_7202(&$sandbox) {
  // 1) Update EXISTING Submission Status values in field_data tables
  // Complete => Form_Completed
  // Incomplete => Form_Multi_Partial
  // Pending => SF_Multi_Pending
  // action_required => SF_Failed
  // SF_Complete => SF_Completed
  $tables = _asu_rfi_get_status_field_tables();
  $statuses = array(
    'Complete' => 'Form_Completed',
    'Incomplete' => 'Form_Multi_Partial',
    'Pending' => 'SF_Multi_Pending',
    'action_required' => 'SF_Failed',
    'SF_Complete' => 'SF_Completed',
  );
  foreach ($tables as $table) {
    foreach ($statuses as $old => $new) {
      $query = Database::getConnection('default', 'default')
        ->update($table)
        ->fields(array(
          'field_rfi_submission_status_value' => $new,
        ))
        ->condition('field_rfi_submission_status_value', $old, 'LIKE');
      $query->execute();
    }
  }

  // 2) MANUALLY update field_rfi_submission_status in field_config (values exist),
  // and adding new Current student completed value.
  $query = Database::getConnection('default', 'default')
    ->select('field_config', 'fc')
    ->fields('fc', array('data'))
    ->condition('fc.field_name', 'field_rfi_submission_status', 'LIKE')
    ->execute();
  $field_base = $query->fetchField();
  if (!empty($field_base)) {
    $field_base = unserialize($field_base);
    if (isset($field_base['settings']['allowed_values'])) {
      $field_base['settings']['allowed_values'] = array(
        'Form_Completed' => 'Ready for middleware POST',
        'Form_Multi_Partial' => 'Partial multiform submitted',
        'SF_Multi_Pending' => 'Pending middleware POST (multiform)',
        'SF_Failed' => 'FAILED Middleware POST',
        'SF_Completed' => 'SUCCESSFUL Middleware POST',
        'Form_Completed_No_SF' => 'Completed (No Salesforce)',
      );
    } else {
      flogger('asu_rfi', __FUNCTION__ . ': Field field_rfi_submission_status settings could not be updated.'
        . 'Check the Submission status field dropdown to ensure the proper values are available.',
        array(), WATCHDOG_ERROR);
    }
    $field_base = serialize($field_base);
    Database::getConnection('default')
      ->update('field_config')
      ->fields(array('data' => $field_base))
      ->condition('field_name', 'field_rfi_submission_status', 'LIKE')
      ->execute();

    // Empty form_cache table to reset node edit forms with old values (probably needs cleanup anyways)
    Database::getConnection('default')
      ->delete('cache_form')
      ->execute();
  }

  // 3) Rebuild ASU RFI feature to update the RFI forms
  features_revert_module('asu_rfi_feature');
  // 4) Manually clears views cache for Submissions report view.
  $view = views_get_view('asu_rfi_submissions_report');
  $view->set_display('default');
  $cache = $view->display_handler->get_plugin('cache');
  $cache->cache_flush();

  flogger('asu_rfi', 'Submission status values were updated to more'
  . ' helpful, friendly values');
}

/**
 * Delete ALL RFI form submissions that have been sent to Salesforce or are expired (more than X days old).
 */
function asu_rfi_update_7203(&$sandbox) {

  $nids_per_pass = 50;

  // First update run ONLY (Initialize update counters, data)
  if (!isset($sandbox['total'])) {
    $total_count = _asu_rfi_get_submissions_to_delete(0, TRUE, TRUE);
    $sandbox['total'] = $total_count;
    $sandbox['max'] = $nids_per_pass;
    $sandbox['progress'] = 0;
    $sandbox['messages'] = array();
    $sandbox['current'] = -1; // Last node ID read (starts at -1)

    $message = t(__FUNCTION__ . ' - There are @count nodes to delete.', array('@count' => $total_count));
    flogger('asu_rfi', $message);
    }

  // Actual batch operation to delete
  $all_nids = _asu_rfi_get_submissions_to_delete($nids_per_pass, FALSE, TRUE);

  foreach ($all_nids as $nid) {
    node_delete($nid);
    $sandbox['progress']++;
    $sandbox['current'] = $nid;
  }

  // Check to see if finished.
  $sandbox['#finished'] = ($sandbox['progress'] >= $sandbox['total'])
    ? TRUE : ($sandbox['progress'] / $sandbox['total']);

  if ($sandbox['#finished'] === TRUE) {
    return "\n" . t('The expired/completed RFI form submissions have been deleted.');
  }
  else {
    $percentage = $sandbox['#finished'];
    $percentage = round((float) $percentage * 100, 1) . '%';
    $message = t('Deleted ' . $sandbox['progress'] . ' of '
      . $sandbox['total'] . " submissions (" . $percentage . " complete). "
      . "Last node deleted: @nid...",
      array('@nid' => (isset($nid)) ? $nid : 'unknown'));

    // Set message and add for final report.
    //$sandbox['messages'][] = $message . "\n";
    return $message;
  }
}

/**
 * Add separate VBO permission for using views bulk operations.
 */
function asu_rfi_update_7204(&$sandbox) {
  $roles = user_roles(TRUE, 'administer asu rfi');
  if (count($roles)) {
    foreach ($roles as $nid => $name) {
      user_role_grant_permissions($nid, array('execute asu rfi vbo'));
    }
    flogger('asu_rfi', __FUNCTION__ . ' - Added new VBO permission for roles that had existing '
      . '"administer ASU RFI" permissions.');
  }
}

/**
 * Update current student form submissions status to Completed (No Salesforce)
 */
function asu_rfi_update_7205(&$sandbox) {
  // #1 Update existing form_type values to human English
  $tables = array(
    'field_data_field_rfi_form_type',
    'field_revision_field_rfi_form_type',
  );
  $values = array(
    'current_undergrad_form' => 'Current undergraduate form',
    'current_grad_form' => 'Current Grad form',
  );
  foreach ($tables as $table) {
    foreach ($values as $old => $new) {
      Database::getConnection('default', 'default')
        ->update($table)
        ->fields(array('field_rfi_form_type_value' => $new))
        ->condition('field_rfi_form_type_value', $old, 'LIKE')
        ->execute();
    }
  }

  // #2 Update submission status of all current student forms, using NIDs from form_type tables.
  $db_or = db_or()
    ->condition('field_rfi_form_type_value', $values['current_undergrad_form'])
    ->condition('field_rfi_form_type_value', $values['current_grad_form']);
  $query = Database::getConnection('default')
    ->select($tables[0], 'ft')
    ->fields('ft', array('entity_id'))
    ->condition($db_or)->execute()->fetchCol();

  // Change to submission status tables
  $tables = array(
    'field_data_field_rfi_submission_status',
    'field_revision_field_rfi_submission_status',
  );

  if (count($query) > 0) {
    $nids = implode(',', $query);
    foreach ($tables as $table) {
      Database::getConnection('default', 'default')
        ->update($table)
        ->fields(array(
          'field_rfi_submission_status_value' => 'Form_Completed_No_SF',
        ))
        ->where('entity_id IN (' . $nids . ')')
        ->execute();
    }
    flogger('asu_rfi', __FUNCTION__ . ': Any current student form '
      . ' submissions (if they existed) were updated to "Completed (No Salesforce)".');
  }
}

/**
 * Copy confirmation node values into replacement confirmation_page values.
 */
function asu_rfi_update_7206(&$sandbox) {
  $values = array(
    'asu_rfi_undergrad_confirm_node' => 'asu_rfi_undergrad_confirm',
    'asu_rfi_grad_confirm_node' => 'asu_rfi_grad_confirm',
  );
  foreach ($values as $old => $new) {
    $nid = variable_get($old);
    if (!empty($nid)) {
      $node = entity_load_single('node', (int) $nid);
      if ($node) {
        $entity = serialize(
          array(
            'entity_id' => (string) $node->nid,
            'entity_label' => $node->title,
            'entity_type' => 'node',
            'entity_bundle' => $node->type,
            'entity_uuid' => $node->uuid,
          )
        );
        // manually insert serialized array
        Database::getConnection('default', 'default')
          ->merge('variable')
          ->fields(array(
            'name' => $new,
            'value' => $entity,
          ))
          ->condition('name', $new, 'LIKE')
          ->execute();
        // Add separate value for NIDs
        variable_set($new . '_nid', $node->nid);
        variable_del($old);
        flogger('asu_rfi', __FUNCTION__ . ': ' . $old
          . ' has been updated to ' . $new . ' in the variables table.');
      }
      else {
        flogger('asu_rfi', __FUNCTION__ . ': Node ID @nid does'
        . ' not exist. Skipping update of @old.', array('@nid' => $nid, '@old' => $old),
          WATCHDOG_WARNING, TRUE, TRUE, FALSE);
      }
    } else {
      flogger('asu_rfi', __FUNCTION__ . ': ' . $old . ' was not'
       . ' already set. Skipping variable update.');
    }
  }
}

/**
 * Add Online campus URL to variable table for admin form configuration options
 */
function asu_rfi_update_7207(&$sandbox) {
  variable_set('asu_rfi_online_url', 'https://asuonline.asu.edu/lead-submissions-v3.3/programs');
}

/**
 * Add sorting logic (via ASU semester codes) to asu_rfi_sem_dates table.
 */
function asu_rfi_update_7208(&$sandbox) {
  db_truncate('asu_rfi_sem_dates')->execute();
  $semSortCode = array(
      'description' => 'Four-digit ASU semester term code',
      'type' => 'varchar',
      'length' => 4,
      'not null' => TRUE,
  );
  db_add_field('asu_rfi_sem_dates', 'semSortCode', $semSortCode);
  // Then rebuild semester terms in DB table
  flogger('asu_rfi', '!!IMPORTANT!! -- Run cron immediately to update your ASU RFI semester start date'
    . ' options or your RFI forms will not work properly! Either use Drush (recommended) or run cron at ' . $_SERVER['HTTP_HOST']
    . '/admin/config/system/cron', array(), WATCHDOG_WARNING, TRUE, TRUE, FALSE);
}

/**
 * Set middleware access value (T/F) for checking access, middleware env selection
 */
function asu_rfi_update_7209(&$sandbox) {
  if (!module_exists('asu_libs')) {
    module_enable(array('asu_libs'));
  }
  asu_libs_set_asset_access_value('asu_rfi');
  variable_set('asu_rfi_middleware_env', 'prod');
  variable_set('asu_rfi_hide_online_alerts', 1);
  variable_set('asu_rfi_online_url', 'https://asuonline.asu.edu/lead-submissions-v3.3/programs');
  features_revert_module('asu_rfi_feature');
}

/**
 * Manually re-update the RFI form's <select> elements
 */
function asu_rfi_update_7210(&$sandbox) {
  _asu_rfi_update_form_options();
}

/**
 * Set middleware access value (T/F) for checking access again.
 */
function asu_rfi_update_7211(&$sandbox) {
  if (!module_exists('asu_libs')) {
    module_enable(array('asu_libs'));
  }
  asu_libs_set_asset_access_value('asu_rfi');
}

/**
 * Reapply updates for 7210, 7211
 */
function asu_rfi_update_7212(&$sandbox) {
  if (!module_exists('asu_libs')) {
    module_enable(array('asu_libs'));
  }
  variable_set('asu_rfi_middleware_env', 'prod');
  variable_set('asu_rfi_hide_online_alerts', 1);
  variable_set('asu_rfi_online_url', 'https://asuonline.asu.edu/lead-submissions-v3.3/programs');
  features_revert_module('asu_rfi_feature');
  asu_libs_set_asset_access_value('asu_rfi');
}

/**
 * Extend deletion period of RFI submissions out to 45 days
 */
function asu_rfi_update_7213(&$sandbox) {
  variable_set('asu_rfi_expired_period', 45);
  variable_set('asu_rfi_use_jr_js', 0);
}

/**
 * Repeat of 7203 with addendum to delete ALL RFI form submissions - REGARDLESS OF STATUS - that are expired (45 days old).
 */
function asu_rfi_update_7214(&$sandbox) {

  $nids_per_pass = 50;
  // First update run ONLY (Initialize update counters, data)
  if (!isset($sandbox['total'])) {
    $total_count = _asu_rfi_get_submissions_to_delete(0, TRUE, TRUE);
    $sandbox['total'] = $total_count;
    $sandbox['max'] = $nids_per_pass;
    $sandbox['progress'] = 0;
    $sandbox['messages'] = array();
    $sandbox['current'] = -1; // Last node ID read (starts at -1)

    $message = t(__FUNCTION__ . ' - There are @count nodes to delete.', array('@count' => $total_count));
    flogger('asu_rfi', $message);
  }

  // Actual batch operation to delete
  $all_nids = _asu_rfi_get_submissions_to_delete($nids_per_pass, FALSE, TRUE);
  foreach ($all_nids as $nid) {
    node_delete($nid);
    $sandbox['progress']++;
    $sandbox['current'] = $nid;
  }

  // Check to see if finished.
  $sandbox['#finished'] = ($sandbox['progress'] >= $sandbox['total'])
    ? TRUE : ($sandbox['progress'] / $sandbox['total']);

  if ($sandbox['#finished'] === TRUE) {
    return "\n" . t('The expired/completed RFI form submissions have been deleted.');
  }
  else {
    $percentage = $sandbox['#finished'];
    $percentage = round((float) $percentage * 100, 1) . '%';
    $message = t('Deleted ' . $sandbox['progress'] . ' of '
      . $sandbox['total'] . " submissions (" . $percentage . " complete). "
      . "Last node deleted: @nid...",
      array('@nid' => (isset($nid)) ? $nid : 'unknown'));

    // Set message and add for final report.
    //$sandbox['messages'][] = $message . "\n";
    return $message;
  }
}
