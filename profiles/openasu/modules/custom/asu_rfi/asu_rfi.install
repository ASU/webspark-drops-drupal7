<?php /** @noinspection PhpUnused */
/** @noinspection PhpDocSignatureInspection */
/** @noinspection PhpUnusedParameterInspection */

/**
 * Implementation of hook_schema().
 */
function asu_rfi_schema() {
  /* US states schema */
  $schema['asu_rfi_states_list'] = array(
    'description' => 'List of US states',
    'fields' => array(
    'stateCode' => array(
      'description' => 'State code',
      'type' => 'varchar',
      'length' => 225,
      'not null' => TRUE
    ),
    'stateDesc' => array(
      'description' => 'State Name',
      'type' => 'varchar',
      'length' => 225,
      'not null' => TRUE,
      ),
    ),
    'primary key' => array('stateCode'),
  );
  /* US countries schema */
  $schema['asu_rfi_countries'] = array(
    'description' => 'Countries list',
    'fields' => array(
      'countryCode3' => array(
        'description' => 'Country code',
        'type' => 'varchar',
        'length' => 225,
        'not null' => TRUE
      ),
      'countryDesc' => array(
        'description' => 'Country name',
        'type' => 'varchar',
        'length' => 225,
        'not null' => TRUE
      ),
    ),
    'primary key' => array('countryCode3'),
  );
  /* Semester dates */
  $schema['asu_rfi_sem_dates'] = array(
    'description' => 'Start term dates',
    'fields' => array(
      'semId' => array(
        'description' => 'Semeter term ID',
        'type' => 'varchar',
        'length' => 225,
        'not null' => TRUE
      ),
      'semLabel' => array(
        'description' => 'Semester term label',
        'type' => 'varchar',
        'length' => 225,
        'not null' => TRUE
      ),
    ),
    'primary key' => array('semId'),
  );

  return $schema;
}

function asu_rfi_install() {
  // Call initial configuration for form options upon install
  include('data/asu_rfi.form_options.inc');

  // Update countries DB table
  asu_rfi_get_form_select_options('country', TRUE);
  // Insert states into DB table
  asu_rfi_get_form_select_options('state_province', TRUE);
  // Insert semester dates into DB table
  asu_rfi_get_form_select_options('rfi_dedupe_list_terms', TRUE);

  drupal_set_message('ASU RFI module has been installed. Configure module settings at <a href="/admin/config/content/asurfi">admin settings page</a>');

  // Check if CAS module exists and enabled and update cas_exclude variables with asu_rfi callback urls
  if (module_exists('cas')) {
    $out = variable_get('cas_exclude', 'none');
    $out = $out . "\r\nasu_rfi/success/*\r\nasu_rfi/failure/*";
    variable_set('cas_exclude',$out);
  }

  // If honeypot module exists, set it's variable value
  if(module_exists('honeypot')){
      variable_set('honeypot_element_name','rfihurl');
  }

  // Set the RFI form mode to "Test" initially upon module installation
  variable_set('asu_rfi_form_mode','test');
}

/**
 * Delete all variables and remove DB tables
 */
function asu_rfi_uninstall() {
  drupal_uninstall_schema('asu_rfi');
  db_delete('variable')
    ->condition('name', 'asu_rfi_%', 'LIKE')
    ->execute();
 }

/**
 * Enable Honeypot module if ASU RFI module is enabled (Now required for 1.2+)
 */
function asu_rfi_update_7000(&$sandbox) {
  if (module_exists('asu_rfi') && !module_exists('honeypot'))
  {
    module_enable(array('honeypot'));
  }
}

/**
 * Forces a rebuild of the module's features to include the domain and location piece
 */
function asu_rfi_update_7001(&$sandbox){
  features_revert_module('asu_rfi_feature');
}

/**
 * Updates variable names not properly set by ASU RFI module
 * @throws \InvalidMergeQueryException
 */
function asu_rfi_update_7002(&$sandbox){
  $or = db_or()
    ->condition('v.name', 'last_attempt_SF_posting', 'LIKE')
    ->condition('v.name', 'last_success_SF_posting', 'LIKE')
    ->condition('v.name', 'last_failure_SF_posting', 'LIKE')
    ->condition('v.name', 'SF_error_message_sent', 'LIKE')
    ->condition('v.name', 'siteDomain', 'LIKE');
  $updates_needed = Database::getConnection('default', 'default')
    ->select('variable', 'v')
    ->fields('v', array('name', 'value'))
    ->condition($or)
    ->execute()
    ->fetchAllKeyed();
  if (count($updates_needed) > 0) {
    $additions = array();
    foreach ($updates_needed as $name => $value) {
      $additions['asu_rfi_' . $name] = $value;
    }
    foreach ($additions as $name => $value) {
      db_merge('variable')
        ->key(array(
          'name' => $name))
        ->fields(array(
          'name' => $name,
          'value' => $value,
        ))
        ->execute();
    }
    foreach ($updates_needed as $name => $value) {
      Database::getConnection('default', 'default')
        ->delete('variable')
        ->condition('name', $name, 'LIKE')
        ->execute();
    }
    $message = count($updates_needed) . " names of the ASU RFI module settings in
     the variable table were updated. See the ASU RFI module CHANGELOG file for more information.";
  } else {
    $message = "No updates were needed for the ASU RFI module.";
  }
  watchdog('asu_rfi', $message, array(), WATCHDOG_INFO);
  drupal_set_message($message, 'status');
}
/**
 * Delete deprecated asu_rfi_siteDomain variable
 */
function asu_rfi_update_7003(&$sandbox) {
  Database::getConnection('default', 'default')
    ->delete('variable')
    ->condition('name', 'asu_rfi_siteDomain', 'LIKE')
    ->execute();
}

/**
 * Update ASU RFI submission statuses to more instructional, guiding values
 */
function asu_rfi_update_7004(&$sandbox) {
  // Update these four Status values:
  // Complete => Form_Completed
  // Incomplete => Form_Multi_Partial
  // Pending => SF_Pending
  // action_required => SF_Failed
  // SF_Complete => SF_Completed
  $tables = _asu_rfi_get_status_field_tables();
  $statuses = array(
    'Complete' => 'Form_Completed',
    'Incomplete' => 'Form_Multi_Partial',
    'Pending' => 'SF_Pending',
    'action_required' => 'SF_Failed',
    'SF_Complete' => 'SF_Completed',
  );
  foreach ($tables as $table) {
    foreach ($statuses as $old => $new) {
      $query = Database::getConnection('default', 'default')
        ->update($table)
        ->fields(array(
          'field_rfi_submission_status_value' => $new,
        ))
        ->condition('field_rfi_submission_status_value', $old, 'LIKE');
      $query->execute();
    }
  }
  // Rebuild ASU RFI feature to update the RFI forms
  features_rebuild(array(
    'asu_rfi_feature' => array(
      'views_default', 'field_base')
    )
  );
}

/**
 * Delete old Salesforce submissions that have processed or expired.
 * @return array|mixed|string|null
 */
function asu_rfi_update_7005(&$sandbox) {
  // Get ASU RFI nodes to delete.
  $all_nids = _asu_rfi_get_submissions_to_delete();

  // Delete ASU RFI nodes, using the Batch API
  if (count($all_nids) > 0) {
    // Batch API used, just in case there are a ton of nodes to delete.
    if (!isset($sandbox['progress'])) {
      $sandbox['progress'] = 0;
      $sandbox['max'] = count($all_nids);
      $sandbox['messages'] = array();
      $sandbox['current_node'] = -1; // Last node read (starts at -1)
    }
    // Actual node deletions
    foreach ($all_nids as $nid) {
      node_delete($nid);
      $sandbox['progress']++;
      $sandbox['current_node'] = $nid;
      // Show progress message if in Drush.
      if (function_exists('drush_log')) {
        drush_log(t('Deleted ASU RFI node @nid.', array('@nid' => $nid)), 'success');
      }
    }
    // Set message.
    // $sandbox['messages'][] = t("Last node deleted: @nid", array('@nid' => $nid));

    // Check to see if finished.
    $sandbox['#finished'] = ($sandbox['progress'] >= $sandbox['max'])
      ? TRUE : ($sandbox['progress'] / $sandbox['max']);

    if ($sandbox['#finished']) {
      // $final_message = '<ul><li>' . implode('</li><li>', $sandbox['messages']) . "</li></ul>";
      return t('The ASU RFI update has completed; All expired, stale or completed ASU RFI
      form submissions have been deleted.');
    }

  } else {
    $message = "No expired, stale or completed ASU RFI nodes to delete. Skipping...";
    drupal_set_message($message, 'info');
  }
}
