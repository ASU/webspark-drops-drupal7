<?php /** @noinspection PhpUnhandledExceptionInspection */
/** @noinspection SqlNoDataSourceInspection */
/** @noinspection PhpUnusedParameterInspection */
/** @noinspection PhpUndefinedMethodInspection */
/** @noinspection PhpDocSignatureInspection */
/** @noinspection SpellCheckingInspection */
/** @noinspection PhpUnused */

/**
 * @file
 * asu_rfi.module - ASU RFI Module
 *
 * @author
 * Archana Puliroju (apuliroj@asu.edu)
 * Michael Samuelson (mlsamuel@asu.edu)
 * Jared Rounsavall (jrounsav@asu.edu)
 *
 * Module provides ASU RFI form submission functionality.
 */

/*********************************************************************
 * DRUPAL HOOKS
 *********************************************************************/

module_load_include('inc', 'asu_rfi', 'includes/asu_rfi_grad_post');
module_load_include('inc', 'asu_rfi', 'includes/asu_rfi_undergrad_post');
module_load_include('inc', 'asu_rfi', 'includes/asu_rfi_get_programs');

/**
 * Implements hook_permission().
 */
function asu_rfi_permission() {
  return array(
    'administer asu rfi' => array(
      'title' => t('Administer ASU RFI'),
      'description' => t('Administer ASU RFI module'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function asu_rfi_menu() {
  $items = array();
  $items['countries/autocomplete'] = array(
    'page callback' => 'asu_rfi_countries',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/asu_rfi.pages.inc',
  );
  $items['degree-programs/request-info-thank-you/%'] = array(
    'page callback' => 'asu_rfi_confirmation',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'file' => 'includes/asu_rfi_confirmation.inc',
  );
  $items['states/autocomplete'] = array(
    'page callback' => 'asu_rfi_usStates',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/asu_rfi.pages.inc',
  );
  // request info form admin settings page
  $items['admin/config/content/asurfi'] = array(
    'title' => 'ASU RFI Form Settings',
    'description' => t('Administer RFI form settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asu_rfi_admin_settings'),
    'access arguments' => array('administer asu rfi'),
    'options' => array('attributes' => array('class' => 'title')),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/asu_rfi.admin.inc'
  );
  // RFI submissions call back webservices
  $items['asu_rfi/success/%/%'] = array(
    'page callback' => 'asu_rfi_success_post',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/asu_rfi.backpost.inc',
  );
  $items['asu_rfi/failure/%/%'] = array(
    'page callback' => 'asu_rfi_fail_post',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/asu_rfi.backpost.inc',
  );
  $items['asu_rfi/test_mode/%/%'] = array(
    'page callback' => 'asu_rfi_test_post',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/asu_rfi.backpost.inc',
  );
  // Grab middleware key
  $items["asu_rfi/key/%"] = array(
    'page callback' => 'asu_rfi_middle_key',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/asu_rfi.backpost.inc',
  );

  return $items;
}


/**
 * Implements hook_block_info().
 */
function asu_rfi_block_info() {
  // Call the RFI form.
  $blocks['asu_rfi_form_block'] = array(
    'info' => t('RFI Master'),
    'cache' => DRUPAL_NO_CACHE,
    'mb_enabled' => TRUE, // Multiblock module integration.
  );
  return $blocks;
}

/**
 * Implements hook_block_info().
 *
 * @param string $delta
 * @param array $multi_id (for Multiblock)
 * @throws
 * @return array
 */
function asu_rfi_block_view($delta = '', $multi_id = NULL) {
  $block = array();
  switch ($delta) {
    case 'asu_rfi_form_block':
      // If we have a multiblock ID, line it up for use getting settings.
      $multi_id = $multi_id ? $multi_id : NULL;

      // Default programs array
      $programs = array();
      // Get instance settings.
      $instance_settings = asu_rfi_get_block_instance_settings($multi_id);

      if ($instance_settings['form_type'] == 'multiform') {
        $block['subject'] = t('Request information');
        module_load_include('inc', 'asu_rfi', 'includes/asu_rfi.pages');
        //Load the multi form
        $block['content'] = asu_rfi_form($delta);
      }

      // Undergrad long form settings ONLY
        // Only array keys are passed, so load all programs and compare with saved
        // instance setting using array_intersect_key function
      if (($instance_settings['form_type'] == 'ugrad_longform')
        || ($instance_settings['form_type'] == 'current_undergrad_form')) {
        $program_options = _asu_rfi_get_undergrad_programs();
        if (!empty($instance_settings['programs'])) {
          $programs = array_intersect_key($program_options, array_flip($instance_settings['programs']));
        }
        // If none of the programs is selected in block settings page, show all
        // the programs in the RFI form drop down.
        else {
          $programs = $program_options;
        }
      }

      // Grad long form settings ONLY
      if (($instance_settings['form_type'] == 'graduate_longform')
        || ($instance_settings['form_type'] == 'current_grad_form')) {
        $program_options = _asu_rfi_get_grad_programs();
        if (!empty($instance_settings['grad_programs'])) {
          $programs = array_intersect_key($program_options, array_flip($instance_settings['grad_programs']));
        }
        else {
          $programs = $program_options;
        }
      }
      // Future student form settings (ugrad or grad)
      if (($instance_settings['form_type'] == 'ugrad_longform')
        || ($instance_settings['form_type'] == 'graduate_longform')) {
        $form_type = $instance_settings['form_type'];
        $block['subject'] = t('Future Student Form');
        module_load_include('inc', 'asu_rfi', 'includes/asu_rfi.pages');
        // TODO Load the RFI form in this block.
        $block['content'] = asu_rfi_long_form($delta, $programs, $form_type);
      }
      // Current student form settings (ugrad or grad)
      if (($instance_settings['form_type'] == 'current_undergrad_form')
        || ($instance_settings['form_type'] == 'current_grad_form')) {
        $form_type = $instance_settings['form_type'];
        $block['subject'] = t('Current Student Form');
        module_load_include('inc', 'asu_rfi', 'includes/asu_rfi.pages');
        // TODO Load the RFI form in this block.
        $block['content'] = asu_rfi_current_form($delta, $programs, $form_type);
      }

      // Default - ERROR: No programs selected by above logic.
      if (empty($programs) && !($instance_settings['form_type'] == 'multiform')) {
        $message = "No relevant programs set for this "
          . check_plain($instance_settings['form_type']) . " form.";
        watchdog('asu_rfi', $message, array(), WATCHDOG_ERROR);
        drupal_set_message($message, 'error', FALSE);
      }

      break;
  }
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function asu_rfi_block_configure($delta = '', $multi_id = NULL) {
  // Load the currently logged in user.
  global $user;
  // Check if the ASU Academic Programs module is disabled. If so, AND the user has the 'administrator' role OR is user-1, then set the warning.
  if (!module_exists('asu_ap') && (in_array('administrator', $user->roles) || $user->uid == 1)) {
    drupal_set_message('ASU Degrees has been deprecated and will be removed in a future release. Please switch to ASU Academic Programs as soon as possible to avoid data loss.', 'warning');
  }

  $form = array();

  switch ($delta) {
    case 'asu_rfi_form_block':

      $multi_id = $multi_id ? $multi_id : NULL;
      $instance_settings = asu_rfi_get_block_instance_settings($multi_id);

      // Get degree type (grad or undergrad) variables
      $ugrad_degree_type = variable_get('asu_rfi_ugrad_degree_type');
      $graduate_degree_type = variable_get('asu_rfi_graduate_degree_type');

      // Check if the site has grad and undergrad degrees and show form type options accordingly
      $form_types = array();
      if ((!empty($ugrad_degree_type)) && (!empty($graduate_degree_type))) {
        $form_types = array(
          'multiform' => 'Multi step form (This multi step form will be shown only on degree pages. Select content type and choose "ASU Academic Programs" in block Visibility settings)',
          'ugrad_longform' => 'Undergraduate Long form',
          'graduate_longform' => 'Graduate Long form',
          'current_undergrad_form' => 'Current undergrad form',
          'current_grad_form' => 'Current Grad form'
        );
      }
      elseif ((!empty($ugrad_degree_type)) && (empty($graduate_degree_type))) {
        $form_types = array(
          'multiform' => 'Multi step form (This multi step form will be shown only on degree pages. Select content type and choose "ASU Academic Programs" in block Visibility settings)',
          'ugrad_longform' => 'Undergraduate Long form',
          'current_undergrad_form' => 'Current undergrad form'
        );
      }
      elseif ((empty($ugrad_degree_type)) && (!empty($graduate_degree_type))) {
        $form_types = array(
          'multiform' => 'Multi step form (This multi step form will be shown only on degree pages. Select content type and choose "ASU Academic Programs" in block Visibility settings)',
          'graduate_longform' => 'Graduate Long form',
          'current_grad_form' => 'Current Grad form'
        );
      }
      else { // ERROR: Degree type was uncaptured by logic above
        watchdog('asu_rfi', 'No form types selected for either undergrad or graduate programs.', array(), WATCHDOG_ERROR);
        if (empty($form_types)) {
          header("Location: " . $_SERVER['REQUEST_URI']);
        }
      }

      $form_type_settings = $instance_settings['form_type'] ? $instance_settings['form_type'] : NULL;
      $form['asu_rfi_form_block_type'] = array(
        '#type' => 'radios',
        '#title' => t('ASU RFI Form type:'),
        '#default_value' => $form_type_settings,
        '#options' => $form_types,
        '#required' => TRUE,
      );

      $program_settings = $instance_settings['programs'] ? $instance_settings['programs'] : NULL;

      $program_options = _asu_rfi_get_undergrad_programs();
      //undergrad programs list
      $form['asu_rfi_form_block_programs'] = array(
        '#type' => 'select',
        '#title' => t('ASU RFI Form Programs'),
        '#default_value' => $program_settings,
        '#options' => $program_options,
        '#multiple' => TRUE,
        '#size' => 10,
        '#description' => t('CTRL + click to select programs to display in this RFI Form instance. Selecting NO programs will display ALL.'),
        '#states' => array(
          'visible' => array( // Only show if method selected was long forms
            ':input[name="asu_rfi_form_block_type"]' => array(
              array('value' => 'ugrad_longform'),

            ),
          ),
          'required' => array(
            ':input[name="asu_rfi_form_block_type"]' => array('value' => 'ugrad_longform'),
          ),
        ),
      );
      // if grad degrees are available, populate the grad degrees field
      if (variable_get('asu_rfi_graduate_degree_type') == 'graduate') {
        $grad_program_settings = $instance_settings['grad_programs'] ? $instance_settings['grad_programs'] : NULL;
        $grad_program_options = _asu_rfi_get_grad_programs();

        //grad programs list
        $form['asu_rfi_form_block_grad_programs'] = array(
          '#type' => 'select',
          '#title' => t('ASU RFI Form Programs'),
          '#default_value' => $grad_program_settings,
          '#options' => $grad_program_options,
          '#multiple' => TRUE,
          '#size' => 10,
          '#description' => t('CTRL + click to select programs to display in this RFI Form instance. Selecting NO programs will display ALL.'),
          '#states' => array(
            'visible' => array( // Only show if method selected was long forms
              ':input[name="asu_rfi_form_block_type"]' => array(
                array('value' => 'graduate_longform'),
              ),
            ),
            'required' => array(
              ':input[name="asu_rfi_form_block_type"]' => array('value' => 'graduate_longform'),
            ),
          ),
        );
      }
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 *
 * @param string $delta
 * @param array $edit (for Multiblock)
 */
function asu_rfi_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'asu_rfi_form_block':
      $multi_id = isset($edit['multiblock_delta']) ? '_' . $edit['multiblock_delta']['#value'] : NULL;
      //Below line added by Archana
      variable_set('asu_rfi_form_block_type' . $multi_id, $edit['asu_rfi_form_block_type']);
      variable_set('asu_rfi_form_block_programs' . $multi_id, $edit['asu_rfi_form_block_programs']);
      if (!empty($edit['asu_rfi_form_block_grad_programs'])) {
        variable_set('asu_rfi_form_block_grad_programs' . $multi_id, $edit['asu_rfi_form_block_grad_programs']);
      }
      break;
  }
}


/**
 * Helper function to obtain all settings for a block (Multiblock compatible).
 *
 * @param mixed (string or integer) $multi_id Multiblock block delta value
 * @param boolean
 * @return array
 */
function asu_rfi_get_block_instance_settings($multi_id = NULL, $endpoint_build = FALSE) {

  // Get multi_id value from array (no longer a string in Multiblock v1.1 -> 1.6)
  $multi_id = isset($multi_id['multiblock_delta']['#value']) ? '_' . $multi_id['multiblock_delta']['#value'] : NULL;

  $block_instance_settings = array();
  if (!$endpoint_build) {
    $block_instance_settings['programs'] = variable_get('asu_rfi_form_block_programs' . $multi_id, array());
    //Below line added by Archana
    $block_instance_settings['form_type'] = variable_get('asu_rfi_form_block_type' . $multi_id, NULL);
    $block_instance_settings['grad_programs'] = variable_get('asu_rfi_form_block_grad_programs' . $multi_id, NULL);
  }
  else { // Default build settings, used by our GET/POST endpoint.
    $block_instance_settings['programs'] = array();
    $block_instance_settings['form_type'] = NULL;
    $block_instance_settings['grad_programs'] = array();
  }
  return $block_instance_settings;
}

/**
 * Implements hook_cron().
 * @throws \Exception
 */
function asu_rfi_cron() {

  asu_rfi_check_cached_programs();

  // Set as system variables so we can adjust via devel/php if desired.
  $last_ran = variable_get('asu_rfi_cron_last_ran', 0);
  $stale_time = variable_get('asu_rfi_stale_time', 86400); // 86400 seconds == 1 day

  if (($last_ran + $stale_time) < time()) { // If we last ran over $stale_time seconds ago.

    module_load_include('inc', 'asu_rfi', 'data/asu_rfi.form_options');
    drupal_flush_all_caches();

    // Update countries table
    asu_rfi_get_options_data('country', TRUE);
    // Update states table
    asu_rfi_get_options_data('state_province', TRUE);
    // Update semester dates table
    asu_rfi_get_options_data('rfi_dedupe_list_terms', TRUE);

    // Update asu_rfi_cron_last_ran time.
    variable_set('asu_rfi_cron_last_ran', time());

  }

  // Check for unposted leads (confirmation == -1), and add them to the cron
  // queue.
  $queue = DrupalQueue::get('asu_rfi_failed_leads_queue');
  $queue->deleteQueue();
  $queue = DrupalQueue::get('asu_rfi_failed_leads_queue');
  variable_set('asu_rfi_cron_last_ran', time());
  // Get failed RFI Leads.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'asu_rfi')
    // Don't let this keep happening forever if we have permanent failure.
    ->propertyCondition('created', array(
      REQUEST_TIME - 864000,
      REQUEST_TIME - 900
    ), 'between')// Created in the last 10 days (864000 = 10(24 * 3600)).
    ->propertyCondition('changed', array(
      REQUEST_TIME - 864000,
      REQUEST_TIME
    ), 'between')// changed in the last 10 days (864000 = 10(24 * 3600)).
    ->propertyOrderBy('created', 'DESC')
    ->fieldCondition('field_rfi_submission_status', 'value', array(
      'Incomplete',
      'Pending'
    ), 'IN')// Failed lead.
    ->addMetaData('account', user_load(1)); // Run the query as user 1.
  $results = $query->execute();

  // Add failed leads to the cron jobs queue.
  if (isset($results['node'])) {
    // For each failed lead, add it to the asu_rfi_failed_leads_queue.
    foreach ($results['node'] as $key => $failed_rfi_lead) {
      $queue->createItem($failed_rfi_lead);
    }
  }

  //check if the site hasn't posted submissions to salesforce for two days. If yes, send an email to administrator.
  //Get last time site had successful submission
  $last_sf_success = variable_get('asu_rfi_last_success_SF_posting', 0);
  $last_sf_failure = variable_get('asu_rfi_last_failure_SF_posting', 0);
  $timediff = $last_sf_failure - $last_sf_success;
  $last_sf_attempt = variable_get('asu_rfi_last_attempt_SF_posting', 0);
  $timediff_attempt = $last_sf_attempt - $last_sf_success;
  $last_email_sent = variable_get('asu_rfi_SF_error_message_sent', 0);
  $to_email = variable_get('asu_rfi_error_email', NULL); //get error reporting email address from rfi admin settings page

  if (($last_email_sent - time()) > 86400) { // If the email was sent within 24hrs, don't send it again.
    if (($timediff > 172800) || ($timediff_attempt > 172800)) { // greater that two days
      if (!empty($to_email)) {
        // send email to admin reporting the issue
        _asu_rfi_failed_post_email($to_email, 0);
      }
    }
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function asu_rfi_cron_queue_info() {
  // Process to repost failed leads.
  $queues = array();
  $queues['asu_rfi_failed_leads_queue'] = array(
    'worker callback' => '_asu_rfi_repost_rfi', // Function to call, each item.
    'time' => 20, // Seconds to spend working on the queue.
  );
  return $queues;
}

/*********************************************************************
 * CALLBACKS
 *********************************************************************/

/**
 * POSTs data to Salesforce for all programs.
 * @param $node - ASU RFI node storing the data
 * @param array $post - data to submit
 * @param string $program - program type (ugrad, grad)
 */
function _asu_rfi_repost_data($node, $post = array(), $program = 'Undergraduate') {
  $post['domain'] = $node->field_rfi_domain['und'][0]['value'];
  $post['first_name'] = $node->field_rfi_first_name['und'][0]['value'];
  $post['last_name'] = $node->field_rfi_last_name['und'][0]['value'];
  $post['email'] = $node->field_rfi_email['und'][0]['value'];
  $post['birthdate'] = base64_decode($node->field_rfi_dob['und'][0]['value']);
  $post['phone'] = $node->field_rfi_phone['und'][0]['value'];
  $post['address'] = isset($node->field_rfi_address['und'][0]['value']) ? $node->field_rfi_address['und'][0]['value'] : '';
  $post['state'] = isset($node->field_rfi_state['und'][0]['value']) ? $node->field_rfi_state['und'][0]['value'] : '';
  $post['country'] = isset($node->field_rfi_country['und'][0]['value']) ? $node->field_rfi_country['und'][0]['value'] : '';
  $post['military'] = isset($node->field_rfi_veteran['und'][0]['value']) ? $node->field_rfi_veteran['und'][0]['value'] : '';
  $post['program_code'] = isset($node->field_rfi_program['und'][0]['value']) ? $node->field_rfi_program['und'][0]['value'] : '';
  $post['citizenship'] = isset($node->field_rfi_international['und'][0]['value']) ? $node->field_rfi_international['und'][0]['value'] : '';
  $post['questions'] = isset($node->field_rfi_question['und'][0]['value']) ? $node->field_rfi_question['und'][0]['value'] : '';
  $post['student_type'] = $node->field_rfi_student_type['und'][0]['value'];

  // Location
  $post['location'] = (isset($node->field_rfi_location['und'][0]['value']) && !empty($node->field_rfi_location['und'][0]['value']))
    ? $node->field_rfi_location['und'][0]['value']
    : 'no_preference';

  $post['campus'] = $node->field_rfi_campus['und'][0]['value'];
  $post['zipcode'] = isset($node->field_rfi_zipcode['und'][0]['value']) ? $node->field_rfi_zipcode['und'][0]['value'] : '';
  $post['mobile_check'] = isset($node->field_rfi_sms_opted['und'][0]['value']) ? $node->field_rfi_sms_opted['und'][0]['value'] : '';
  $post['submission_nodeid'] = $node->nid;

  // NOW - Grad or undergrad??
  // Graduate program
  $type_of_form = isset($node->field_rfi_form_type['und'][0]['value']) ? $node->field_rfi_form_type['und'][0]['value'] : '';
  if ($program == 'Graduate') {
    if ($type_of_form == "Graduate long form") {
      $post['type_of_form'] = 'LF';
    }
    if ($type_of_form == "Graduate multi form") {
      $post['type_of_form'] = 'MF';
    }
    $post['semester_name'] = isset($node->field_rfi_start_term['und'][0]['value']) ? $node->field_rfi_start_term['und'][0]['value'] : '';
    asu_rfi_grad_post($post);
    drupal_set_message('Posted graduate to Middleware');
  }
  // Undergrad program (default)
  else {
    if ($type_of_form == "Undergraduate long form") {
      $post['type_of_form'] = 'LF';
    }
    if ($type_of_form == "Undergraduate multi form") {
      $post['type_of_form'] = 'MF';
    }
    $post['ip_address'] = isset($node->field_rfi_ip_address['und'][0]['value']) ? $node->field_rfi_ip_address['und'][0]['value'] : '';
    $post['start_date'] = $node->field_rfi_start_term_code['und'][0]['value'];
    asu_rfi_undergrad_post($post);
    drupal_set_message('Posted undergrad to Middleware');
  }
  variable_set('asu_rfi_last_attempt_SF_posting', time());
}

/**
 * Cron worker callback to POST data to Salesforce when cron runs.
 * Called once for each submission.
 * @param object $data - ASU RFI node with submitted data
 */
function _asu_rfi_repost_rfi($data) {
  // Load and repost the RFI submissions based on the Prospect level
  $node = node_load($data->nid);
  // if graduate submission node, try to repost it to asu_rfi_grad_post file.
  if (sizeof($node->field_rfi_prospect_level) != 0) {
    if ($node->field_rfi_prospect_level['und'][0]['value'] == "Graduate") {
      _asu_rfi_repost_data($node, array(), 'Graduate');
    }
    // repost undergrad submissions to middleware
    if ($node->field_rfi_prospect_level['und'][0]['value'] == "Undergraduate") {
      _asu_rfi_repost_data($node, array(), 'Undergraduate');
    }
  }
}

/*********************************************************************
 * FORMS
 *********************************************************************/

/**
 * Implementation of hook_form_alter()
 */
// 1. change exposed form type in view to select option
// 2. To update RFI forms access if the forms are in test mode
function asu_rfi_form_alter(&$form, &$form_state, $form_id) {
  // Adds css to ajax preview of rfi forms in the panels preview page
  $form_exists = strpos($form['#id'], 'asu-rfi-long-form-data--');
  $ctools_div_exists = strpos($form['#id'], 'ctools-block-content-type-edit-form');
  $current_form_exists = strpos($form['#id'], 'asu-rfi-current-form-data-');
  if ((($form_exists == 0) && ($ctools_div_exists == 0)) || (($current_form_exists == 0) && ($ctools_div_exists == 0))) {
    drupal_add_css('#modal-content fieldset.widget-preview-single .fieldset-wrapper{ max-height: 1975px !important;}', array('type' => 'inline'));
    drupal_add_css('#modal-content .widget-preview .fieldset-wrapper{ max-height: 75% !important;}', array('type' => 'inline'));
  }

  // Change form type exposed filter in submissions view (/asu-rfi-submissions-report)
  // form text field to select option
  if ($form['#id'] == 'views-exposed-form-asu-rfi-submissions-report-page') {
    $form_types = array('' => ' - All -');
    $form_types_query = db_query('SELECT DISTINCT field_rfi_form_type_value FROM {field_data_field_rfi_form_type}');
    foreach ($form_types_query as $form_types_options) {
      $form_types[$form_types_options->field_rfi_form_type_value] = $form_types_options->field_rfi_form_type_value;
    }
    $form['field_rfi_form_type_value']['#type'] = "select";
    $form['field_rfi_form_type_value']['#size'] = 1;
    $form['field_rfi_form_type_value']['#options'] = $form_types;
    $form['field_rfi_form_type_value']['#validated'] = TRUE;
    $form['field_rfi_form_type_value']['#default_values'] = array(0);
  }

  // Add js file to second multistep form
  if (isset($form['#prefix'])) {
    if ($form['#prefix'] == '<div id="rfi-second-form">') {
      drupal_add_js(drupal_get_path('module', 'asu_rfi') . '/theme/session_clear.js', 'file');
    }
  }

  // RFI Long form
  if ($form['#id'] == "asu-rfi-long-form-data") {
    if (isset($form['my_interest']['program_code']['#options'])) {
      drupal_add_js(drupal_get_path('module', 'asu_rfi') . '/theme/session_clear.js', 'file');
      drupal_add_js(drupal_get_path('module', 'asu_rfi') . '/js/asu_rfi.js');
      $form['#after_build'][] = 'asu_rfi_form_after_build';

      $pcodes = $form['my_interest']['program_code']['#options'];
      $possibleLocations = _asu_rfi_query_codes($pcodes);
      asu_rfi_disable_form($form, $possibleLocations);

      if ($possibleLocations !== FALSE) {
        if (!in_array("Online", $possibleLocations)) {
          $form['my_interest']['location']['online'] = array('#disabled' => TRUE);
          $form['my_interest']['location']['no_preference'] = array('#disabled' => TRUE);
          $form['my_interest']['location']['#default_value'] = 'on_campus';
        } else {
          if (count($possibleLocations) == 1 && $possibleLocations[0] == "Online") {
            $form['my_interest']['location']['on_campus'] = array('#disabled' => TRUE);
            $form['my_interest']['location']['no_preference'] = array('#disabled' => TRUE);
            $form['my_interest']['location']['#default_value'] = 'online';
            /* -- Convert form for EdPlus Consumption -- */
            $form['my_interest']['campus']['#access'] = FALSE;
            $form['my_interest']['student_type']['#access'] = FALSE;
            $form['my_interest']['start_date']['#access'] = FALSE;
            $form['about_me']['mobile_check']['#access'] = FALSE;
            $form['about_me']['country']['#access'] = FALSE;
            $form['about_me']['zipcode']['#access'] = FALSE;
            $form['about_me']['dob_field']['#access'] = FALSE;
            $form['about_me']['birthdate']['#access'] = FALSE;
            $form['about_me']['citizenship']['#access'] = FALSE;
            $form['about_me']['military']['#access'] = FALSE;
            $form['address_info']['#access'] = FALSE;
            $form['questions']['#access'] = FALSE;
            /* -- END Convert form for EdPlus Consumption -- */
          }
        }
      }
      $newLocationArr = array();
      if ($possibleLocations !== FALSE) {
        foreach ($possibleLocations as $key => $value) {
          $newLocationArr[$value] = $value;
        }
      }
      $possibleLocations = $newLocationArr;
      $form['my_interest']['campus']['#options'] = $possibleLocations;
    }
  }

  // ASU RFI forms
  if ($form['#id'] == "asu-rfi-form-data") {
    if (isset($form['program_code']['#default_value']) && !empty($form['program_code']['#default_value'])) {
      $pcode = $form['program_code']['#default_value'];
      $pcode2 = array($pcode => $form['my_interest']['prog_plan']['#default_value']);
      $possibleLocations = _asu_rfi_query_codes($pcode2);
      asu_rfi_disable_form($form, $possibleLocations);
      $newLocationArr = array();
      foreach ($possibleLocations as $key => $value) {
        $newLocationArr[$value] = $value;
      }
      $possibleLocations = $newLocationArr;
      $form['my_interest']['campus']['#options'] = $possibleLocations;
    }
    drupal_add_js("(function ($) { $(window).on('unload', function(){ $('#asu-rfi-form-data').trigger('reset'); }) })(jQuery)", array(
      'type' => 'inline',
      'scope' => 'header',
      'weight' => 0
    ));
    drupal_add_js(drupal_get_path('module', 'asu_rfi') . '/theme/session_clear.js', 'file');
    $form['#after_build'][] = 'asu_rfi_form_after_build';
  }

  // ASU RFI module's admin settings
  // * Disable Google analytics site transactions key in asu_rfi admin settings page
  if ($form['#id'] == "asu-rfi-admin-settings") {
    if (!empty($form['asu_rfi_form_access']['asu_rfi_google_analytics_key']['#default_value'])) {
      $form['asu_rfi_form_access']['asu_rfi_google_analytics_key']['#disabled'] = TRUE;
    }
    else {
      $form['asu_rfi_form_access']['asu_rfi_google_analytics_key']['#disabled'] = FALSE;
    }
  }
  // * Get the RFI form mode settings, if form is in test mode, give only admins access to the form view
  $rfi_mode = variable_get('asu_rfi_form_mode');
  global $user;
  if ((($rfi_mode == "test") || empty($rfi_mode)) && ($form['#id'] == "asu-rfi-form-data" || $form['#id'] == "asu-rfi-long-form-data" || $form['#id'] == 'views-exposed-form-asu-rfi-submissions-report-page')) {
    if (user_access('administer nodes', $user) == 1 || user_access('administer asu rfi', $user) == 1) {
      return TRUE;
    } else {
      $form['#access'] = FALSE;
      drupal_set_message("You do not have access to view this form", 'warning');
      return FALSE;
    }
  }
}

/**
 * Returns mappings between ASU RFI node fields and degree module(s) fields
 *
 * Example usage:
 * $degreeMappings = _asu_rfi_get_degree_mappings();
 * $degreeContentType = $degreeMappings['content_type'];
 */
function _asu_rfi_get_degree_mappings() {
  $map = &drupal_static(__FUNCTION__);
  // Swap out mapping values based on module enabled.
  // ASU AP takes priority, but default is to ASU
  // Degrees (deprecated);
  if (!isset($map)) {
    if (module_exists('asu_ap')) {
      $map = array(
        // Content Type
        'content_type' => 'asu_ap',
        // Tables
        'table_asu_academic_plan' => 'field_data_field_asu_ap_acad_plan',
        'table_asu_academic_program' => 'field_data_field_asu_ap_acad_prog',
        'table_asu_degree_awarded' => 'field_data_field_asu_ap_awarded',
        'table_asu_degree_program' => 'field_data_field_asu_ap_program',
        'table_asu_diploma_description' => 'field_data_field_asu_ap_diploma_desc',
        // Fields
        'field_academic_plan' => 'field_asu_ap_acad_plan',
        'field_academic_plan_value' => 'field_asu_ap_acad_plan_value',
        'field_academic_program' => 'field_asu_ap_acad_prog',
        'field_academic_program_value' => 'field_asu_ap_acad_prog_value',
        'field_degree_awarded' => 'field_asu_ap_awarded',
        'field_degree_awarded_value' => 'field_asu_ap_awarded_value',
        'field_degree_campus' => 'field_asu_ap_campus',
        'field_degree_program' => 'field_asu_ap_program',
        'field_degree_program_value' => 'field_asu_ap_program_value',
        'field_diploma_description' => 'field_asu_ap_diploma_desc',
        'field_diploma_description_value' => 'field_asu_ap_diploma_desc_value',
      );
    } else { // asu_degrees
      $map = array(
        // Content Type
        'content_type' => 'asu_degree',
        // Tables
        'table_asu_academic_plan' => 'field_data_field_asu_academic_plan',
        'table_asu_academic_program' => 'field_data_field_asu_academic_program',
        'table_asu_degree_awarded' => 'field_data_field_asu_degree_awarded',
        'table_asu_degree_program' => 'field_data_field_asu_degree_program',
        'table_asu_diploma_description' => 'field_data_field_asu_diploma_description',
        // Fields
        'field_academic_plan' => 'field_asu_academic_plan',
        'field_academic_plan_value' => 'field_asu_academic_plan_value',
        'field_academic_program' => 'field_asu_academic_program',
        'field_academic_program_value' => 'field_asu_academic_program_value',
        'field_degree_awarded' => 'field_asu_degree_awarded',
        'field_degree_awarded_value' => 'field_asu_degree_awarded_value',
        'field_degree_campus' => 'field_asu_degree_campus',
        'field_degree_program' => 'field_asu_degree_program',
        'field_degree_program_value' => 'field_asu_degree_program_value',
        'field_diploma_description' => 'field_asu_diploma_description',
        'field_diploma_description_value' => 'field_asu_diploma_description_value',
      );
    }
  }
  return $map;
}

/**
 * Hides the RFI form ONLY if there is a missing data value.
 * @param array $form The RFI form
 * @param $decider
 */
function asu_rfi_disable_form(&$form, $decider) {
  if ($decider == FALSE) {
    watchdog('asu_rfi', 'An RFI form was disabled possibly due to corrupt degree data. Please run cron. If cron doesn\'t fix the issue, please refresh your degree nodes');
    foreach (element_children($form) as $key) {
      $form[$key]['#access'] = FALSE;
    }
  }
}

/**
 * Queries the degrees in order to configure the location element of the form.
 * @param array $pcodes A list of the plan codes used in the RFI form
 * @return mixed $campusOptions An array of the available campuses
 */
function _asu_rfi_query_codes($pcodes) {
  $degreeMappings = _asu_rfi_get_degree_mappings(); // Get degree mappings to grab content type specific values
  $asuOnlineList = _asu_rfi_parse_programs();

  $campusOptions = array();

  foreach ($pcodes as $code => $prog) {
    $onlineError = FALSE;
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', $degreeMappings['content_type'])
      ->fieldCondition($degreeMappings['field_academic_plan'], 'value', $code)
      ->range(0, 10)
      ->addMetaData('account', user_load(1)); // Run the query as user 1.
    $result = $query->execute();

    if (isset($result['node'])) {
      $result_nodes = $result['node'];
      $desiredProg = _asu_rfi_get_program_codes($result_nodes, 'desiredProg');
      $availableOnline = _asu_rfi_compare_online_availability($desiredProg['code'], $asuOnlineList);

      $locations = $desiredProg['locations'];
      if ($locations) {
        foreach ($locations as $location) {
          $hasOnline = FALSE;
          if ($location['value'] == "Online") {
            $hasOnline = TRUE;
          }
          if ((($hasOnline == TRUE && $availableOnline == TRUE) || ($hasOnline == FALSE))
            && !in_array($location['value'], $campusOptions)) {
            array_push($campusOptions, $location['value']);
          } else {
            if ($hasOnline == TRUE && $availableOnline == FALSE) {
              $onlineError = TRUE;
              for ($i = 0; $i < sizeof($desiredProg['locations']); $i++) {
                if ($desiredProg['locations'][$i]['value'] == 'Online') {
                  unset($desiredProg['locations'][$i]);
                }
              }
            }
          }
        }
      }
      _asu_rfi_update_program_object_js($desiredProg);
    }
    if ($onlineError == TRUE) {
      global $user;
      if (in_array('administrator', $user->roles)) {
        drupal_set_message("This degree program(" . $desiredProg['title']
          . ") is not yet fully online. We may need more details from you to complete
          its launch. Please email EdPlus@asu.edu for more information.", 'error');
      }
    }
  }

  if (sizeof($campusOptions) == 0) {
    return FALSE;
  }
  else {
    return $campusOptions;
  }
}

/**
 * Compares the degree feed programs listed with online availability, using the
 * cached Get Programs API list.
 * @param string $programsFromDegreeFeed The current program
 * @param array $getProgramsAPIList The cached list of programs currently available with ASU Online. Cached Daily
 * @return boolean $available True False value determining whether it can be handled by ASU Online.
 */
function _asu_rfi_compare_online_availability($programsFromDegreeFeed, $getProgramsAPIList) {
  $available = FALSE;
  if ($getProgramsAPIList !== FALSE) {
    foreach ($getProgramsAPIList as $item) {
      if ($programsFromDegreeFeed == $item->plancode) {
        $available = TRUE;
      }
    }
  }
  return $available;
}

/**
 * Adds program data to a JS object available to the form
 * @param array $desiredProg The current program
 */
function _asu_rfi_update_program_object_js($desiredProg) {
  drupal_add_js(
    array(
      'asu_rfi' => array(
        'degrees' => array(
          $desiredProg['vid'] => array(
            'code' => $desiredProg['code'],
            'title' => $desiredProg['title'],
            'locations' => $desiredProg['locations'],
          )
        )
      )
    ), 'setting');
}

/**
 * Detect the user's OS. WHY?
 * @return int|string
 */
function _asu_rfi_detect_os() {
  $current_os = "unknown";
  $os_list = array(
    'Windows 7' => '(Windows NT 6\.1)',
    'Windows Vista' => '(Windows NT 6\.0)',
    'Windows XP' => '(Windows NT 5\.1)|(Windows XP)',
    'Mac OS' => '(Mac_PowerPC)|(Macintosh)',
    'Linux' => '(Linux)|(X11)',
    'Search Bot' => '(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp)|(MSNBot)|(Ask Jeeves\/Teoma)|(ia_archiver)',
    'Windows 3.11' => 'Win16',
    'Windows 95' => '(Windows 95)|(Win95)|(Windows_95)',
    'Windows 98' => '(Windows 98)|(Win98)',
    'Windows 2000' => '(Windows NT 5\.0)|(Windows 2000)',
    'Windows Server 2003' => '(Windows NT 5\.2)',
    'Windows NT 4.0' => '(Windows NT 4\.0)|(WinNT4\.0)|(WinNT)|(Windows NT)',
    'Windows ME' => '(Windows 98)|(Win 9x 4\.90)|(Windows ME)',
    'Open BSD' => 'OpenBSD',
    'Sun OS' => 'SunOS',
    'QNX' => 'QNX',
    'BeOS' => 'BeOS',
    'OS/2' => 'OS\/2'
  );

  if (isset($_SERVER['HTTP_USER_AGENT'])) {
    foreach ($os_list as $current_os => $match) {
      if (preg_match('#' . $match . '#i', $_SERVER['HTTP_USER_AGENT'])) {
        break;
      }
    }
  }
  return $current_os;
}

/**
 * Detect the user's browser.
 * @return string
 */
function _asu_rfi_detect_browser() {
  $browser = 'unknown';
  if (isset($_SERVER['HTTP_USER_AGENT'])) {
    $u_agent = $_SERVER['HTTP_USER_AGENT'];
    if (stripos($u_agent, 'MSIE') !== FALSE) {
      $browser = "IE";
    }
    elseif (stripos($u_agent, 'Chrome') !== FALSE) {
      $browser = "Chrome";
    }
    elseif (stripos($u_agent, 'Firefox') !== FALSE) {
      $browser = "Firefox";
    }
    elseif (stripos($u_agent, 'Safari') !== FALSE) {
      $browser = "Safari";
    }
    elseif (stripos($u_agent, 'Flock') !== FALSE) {
      $browser = "Flock";
    }
    elseif (stripos($u_agent, 'Opera') !== FALSE) {
      $browser = "Opera";
    }
  }
  return $browser;
}

/**
 * Returns all active status program nodes
 * @return array where key is nid and value is program focus (program code +
 *   program plan code)
 * @throws \EntityFieldQueryException
 * @TODO Probably will want to remove, or edit to use new program gathering logic.
 */
function _asu_rfi_get_undergrad_programs() {
  // Get degree mappings to grab content type specific values
  $degreeMappings = _asu_rfi_get_degree_mappings();
  // Get the degree types from the database
  $program_type = db_query('SELECT DISTINCT ' . $degreeMappings['field_degree_program_value']
    . ' from ' . $degreeMappings['table_asu_degree_program']);
  // Set the variables so they can be used to show degree programs based on the form
  // type selections above in block settings
  foreach ($program_type as $programs) {
    $degreetype = $programs->{$degreeMappings['field_degree_program_value']};
    if ($degreetype == "undergrad") {
      variable_set('asu_rfi_ugrad_degree_type', $degreetype);
    }
    if ($degreetype == "graduate") {
      variable_set('asu_rfi_graduate_degree_type', $degreetype);
    }
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $degreeMappings['content_type'])
    ->propertyCondition('status', 1)
    ->fieldCondition($degreeMappings['field_degree_awarded'], 'value', 'NULL', '!=')
    ->fieldCondition($degreeMappings['field_academic_program'], 'value', 'NULL', '!=')
    ->fieldCondition($degreeMappings['field_academic_plan'], 'value', 'NULL', '!=')
    ->fieldCondition($degreeMappings['field_degree_program'], 'value', 'undergrad', '=')
    ->fieldOrderBy($degreeMappings['field_degree_awarded'], 'value', 'ASC')
    ->addMetaData('account', user_load(1)); // Run the query as user 1.
  $result = $query->execute();

  // Build program results (array)
  $out = array();
  if (isset($result['node'])) {
    $items_nids = array_keys($result['node']);
    $items = entity_load('node', $items_nids);
    $out = _asu_rfi_get_program_results($items);
  }

  return $out;
}

/**
 * Get grad programs if any exist
 * @throws \EntityFieldQueryException
 */
function _asu_rfi_get_grad_programs() {
  $degreeMappings = _asu_rfi_get_degree_mappings(); // Get degree mappings to grab content type specific values

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $degreeMappings['content_type'])
    ->propertyCondition('status', 1)
    ->fieldCondition($degreeMappings['field_degree_awarded'], 'value', 'NULL', '!=')
    ->fieldCondition($degreeMappings['field_degree_program'], 'value', 'NULL', '!=')
    ->fieldCondition($degreeMappings['field_academic_plan'], 'value', 'NULL', '!=')
    ->fieldCondition($degreeMappings['field_degree_program'], 'value', 'graduate', '=')
    ->fieldOrderBy($degreeMappings['field_degree_awarded'], 'value', 'ASC')
    ->addMetaData('account', user_load(1)); // Run the query as user 1.
  $result = $query->execute();
  if (isset($result['node'])) {
    $items_nids = array_keys($result['node']);
    $items = entity_load('node', $items_nids);
  }
  // Build program results list (array)
  $out = array();
  if (isset($items)) {
    $out = _asu_rfi_get_program_results($items);
  }
  return $out;
}

/**
 * Get programs from query results
 * @param array $items - array of nodes to pull program information from
 * @return array $out - list of programs
 */
function _asu_rfi_get_program_results($items) {
  $degreeMappings = _asu_rfi_get_degree_mappings(); // Get degree mappings to grab content type specific values
  $out = array();
  foreach ($items as $nid => $program) {
    $program_wrapper = entity_metadata_wrapper('node', $program);
    $program_abbr = $program_wrapper->{$degreeMappings['field_degree_awarded']}->value();
    $program_plan_code = $program_wrapper->{$degreeMappings['field_academic_plan']}->value();
    // Abbr in value matches how we present name in get programs Views Datasource View.
    $out[$program_plan_code] = $program_abbr;
  }
  return $out;
}

/**
 * Return desired programs from list of nodes OR list of programs, depending in $data_type
 * @param $result_nodes
 * @param (str) $data_type - Must be 'programs' or 'desiredProg'
 * @return array
 */
function _asu_rfi_get_program_codes($result_nodes, $data_type) {
  $degreeMappings = _asu_rfi_get_degree_mappings(); // Get degree mappings to grab content type specific values
  $program_nids = array_keys($result_nodes);
  $programs = entity_load('node', $program_nids);
  $programs = reset($programs);
  $programs = (array) $programs;
  /** @noinspection PhpUnusedLocalVariableInspection */
  $desiredProg = array(
    'code' => $programs[$degreeMappings['field_academic_plan']]['und']['0']['value'],
    'vid' => $programs['vid'],
    'title' => $programs['title'],
    'locations' => $programs[$degreeMappings['field_degree_campus']]['und'],
  );
  $out = ${$data_type};
  return $out;
}

/**
 * Determine type of environment (live or testing)
 * @return string $environ - Name of the environment. dev, qa, or prod
 */
function _asu_rfi_determine_environment() {
  $environ = &drupal_static(__FUNCTION__);
  if (!isset($environ)) {
    global $base_url;
    if ((strpos($base_url, 'https://localhost') > 0) || (strpos($base_url, 'http://localhost') > 0)) {
      $environ = 'dev';
    }
    elseif ((strpos($base_url, 'https://dev-') > 0) || (strpos($base_url, 'http://dev-') > 0) || (strpos($base_url, '-dev') > 0)) {
      $environ = 'dev';
    }
    elseif ((strpos($base_url, 'https://qa-') > 0) || (strpos($base_url, 'http://qa-') > 0) || (strpos($base_url, '-qa') > 0)) {
      $environ = 'qa';
    }
    elseif ((strpos($base_url, 'https://test-') > 0) || (strpos($base_url, 'http://test-') > 0)) {
      $environ = 'qa';
    }
    else {
      $environ = 'unknown';
    }
  }
  return $environ;
}

/*******************************************************************************
 * Views bulk operation hook to do bulk submissions of RFI submissions to middleware
 ********************************************************************************/

/**
 * Implements hook_action_info().
 */
function asu_rfi_action_info() {
  return array(
    'asu_rfi_bulk_submit_action' => array(
      'type' => 'node',
      'label' => t('Submit selected RFI submissions to middleware'),
      array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Callback for hook_action_info
 * @param $node
 * @param $context
 */
function asu_rfi_bulk_submit_action(&$node, $context) {
  if ($node->field_rfi_prospect_level['und'][0]['value'] == "Graduate") {
    _asu_rfi_repost_data($node, array(), 'Graduate');
  }
  if ($node->field_rfi_prospect_level['und'][0]['value'] == "Undergraduate") {
    _asu_rfi_repost_data($node, array(), 'Undergraduate');
  }
}

/**
 * Implements hook_views_api().
 */
function asu_rfi_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'asu_rfi') . '/views',
    'template path' => drupal_get_path('module', 'asu_rfi') . '/templates'
  );
}

/*********************************************************************
 * THEMING
 *********************************************************************/

/**
 * Implements hook_js_alter().
 */
function asu_rfi_js_alter(&$javascript) {
  // Form API #states works only with Jquery 1.5, so altering JS version only
  // form ASU RFI block settings page to jQuery 1.5 or core.
  if ((arg(4) == 'multiblock') && variable_get('jquery_update_jquery_version', FALSE) == '1.7') {
    $javascript['profiles/openasu/modules/contrib/jquery_update/replace/misc/1.7/states.js'] = array(
      'data' => drupal_get_path('core', '') . 'misc/states.js',
      'group' => '-100',
      'weight' => '1.019',
      'version' => '7.32',
      'type' => "file",
      'cache' => TRUE,
      'every_page' => FALSE,
      'preprocess' => TRUE,
      'defer' => FALSE,
      'scope' => 'header'
    );
  }
}

/**
 * Implements hook_preprocess_page().
 */
function asu_rfi_preprocess_page(&$variables) {
  // Send data transaction variable dataLayer to GTM tag.
  // Get degree mappings to grab content type specific values
  $degreeMappings = _asu_rfi_get_degree_mappings();
  // Check if /degree-programs/request-info-thank-you is loaded, grad the node id from the URL, load the node and get the variables. Add Google analytics code to the header.
  if (isset($variables['theme_hook_suggestions'][1])) {
    if ($variables['theme_hook_suggestions'][1] == "page__degree_programs__request_info_thank_you") {
      $nodeid = base64_decode(arg(2));
      // Get node data
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'asu_rfi')
        ->propertyCondition('nid', $nodeid)
        ->addMetaData('account', user_load(1)); // Run the query as user 1.

      $result = $query->execute();
      if (isset($result['node'])) {
        $items_nids = array_keys($result['node']);
        $items = entity_load('node', $items_nids);
      }

      foreach ($items as $nid => $submissions) {
        $sub_wrapper = entity_metadata_wrapper('node', $submissions);
        $prog_full_name = (!empty($sub_wrapper->field_rfi_program_name)) ? $sub_wrapper->field_rfi_program_name->value() : '';
        $plan_code = (!empty($sub_wrapper->field_rfi_program)) ? $sub_wrapper->field_rfi_program->value() : '';
        $program_code = (!empty($sub_wrapper->field_rfi_college_code)) ? $sub_wrapper->field_rfi_college_code->value() : '';
        /*
        // NOT USED ANYWHERE?
        if (!empty($sub_wrapper->field_rfi_college_name)) {
          $program_name = $sub_wrapper->field_rfi_college_name->value();
        }
        if (!empty($sub_wrapper->field_rfi_prospect_level)) {
          $prospect_level = $sub_wrapper->field_rfi_prospect_level->value();
        }
        */
        $zip = (!empty($sub_wrapper->field_rfi_zipcode)) ? $sub_wrapper->field_rfi_zipcode->value() : '';
        $country = (!empty($sub_wrapper->field_rfi_country)) ? $sub_wrapper->field_rfi_country->value() : '';
      }
      $subdomain = array_shift(explode(".", $_SERVER['HTTP_HOST']));
      $sku = $program_code . $plan_code . '-RFI';
      $ga_id = $subdomain . '-' . variable_get('asu_rfi_google_analytics_key') . '-' . $nid;
      $category = 'RFI';
      $zip_section = substr($zip, 0, 2);
      if ($country == "United States") {
        if (!empty($zip_section) && (($zip_section == "85") || ($zip_section == "86"))) {
          $price = '100.00';
          $locale = 'In State';
        }
        else {
          $price = '200.00';
          $locale = 'Out of State';
        }
      }
      else {
        if (!empty($country) && $country !== "United States") {
          $price = '300.00';
          $locale = "International";
        }
        else {
          $price = '100';
          $locale = 'Online';
        }
      }
      $college = 'RFI - ' . $locale . ' - ' . $prog_full_name;

      drupal_add_js("(function ($) {
        dataLayer = [{
           'event': 'ecommerce_event',
           'transactionId': '$ga_id',
          'transactionAffiliation': '$program_code',
          'transactionTotal': '$price',
          'transactionProducts': [{
                'sku': '$sku',
                'name': '$college',
                'category': '$category',
                'price': '$price',
                'quantity': '1'
              }]
            }];
        })(jQuery)", array(
        'type' => 'inline',
        'scope' => 'header',
        'weight' => 0
      ));
    }

    // If confirmation node id specified in module settings page is called instead:

    else {
      $undergrad_confirm_nid = variable_get('asu_rfi_undergrad_confirm_node');
      $grad_confirm_nid = variable_get('asu_rfi_grad_confirm_node');

      if (isset($variables['node']) && ($variables['node']->nid == $undergrad_confirm_nid || $variables['node']->nid == $grad_confirm_nid)) {
        if (isset($_GET['pro']) || isset($_GET['ccode']) || isset($_GET['maj']) || isset($_GET['sub'])) {
          //$college = base64_decode($_GET['pro']); // NOT USED??
          //$college_rfi = $college . " - RFI"; // NOT USED??
          $college_code = base64_decode($_GET['ccode']);
          $major = base64_decode($_GET['maj']);
          $major_rfi = $college_code . '-RFI';
          $sku = $college_code . $major . '-RFI';
          $nid = base64_decode($_GET['sub']);
          $zip = base64_decode($_GET['zcode']);
          $country = base64_decode($_GET['con']);
          $zip_section = substr($zip, 0, 2);
          //$category = $_GET['cat']; // NOT USED
          $category = 'RFI';
          $tmp_host = explode(".", $_SERVER['HTTP_HOST']);
          $subdomain = array_shift($tmp_host);
          $ga_id = $subdomain . '-' . variable_get('asu_rfi_google_analytics_key') . '-' . $nid;
          $price = '300.00';
          if ($country == "United States") {
            if (!empty($zip_section)) {
              if (($zip_section == "85") || ($zip_section == "86")) {
                $price = '100.00';
              }
              else {
                $price = '200.00';
              }
            }
          }
          drupal_add_js("(function ($) {
          dataLayer = [{
             'event': 'ecommerce_event',
             'transactionId': '$ga_id',
             'transactionAffiliation': '$college_code',
             'transactionTotal': '$price',
             'transactionProducts': [{
                'sku': '$sku',
                'name': '$major_rfi',
                'category': '$category',
                'price': '$price',
                'quantity': '1'
              }]
         }];
       })(jQuery)", array(
            'type' => 'inline',
            'scope' => 'header',
            'weight' => 0
          ));
        }
      }
      else {
        $thisNode = menu_get_object();
        if (isset($thisNode->type) && $thisNode->type == $degreeMappings['content_type'] && isset($_SESSION['rfi_data'])) {

          $price = '100.00';
          $category = 'RFI';
          $nid = $thisNode->nid;
          $college_code = $_SESSION['rfi_data']['college'];
          $college = $_SESSION['rfi_data']['college_name'];
          $program_code = $_SESSION['rfi_data']['program_code'];
          $country = $_SESSION['rfi_data']['country'];
          $zip_section = $_SESSION['rfi_data']['zipcode'];
          if (isset($nid) && isset($college_code) && isset($college) && isset($program_code) && isset($country) && isset($zip_section)) {
            $ga_id = variable_get('asu_rfi_google_analytics_key') . '-' . $nid;
            $sku = $college_code . $program_code . '-RFI';
            if ($country == "United States") {
              if (!empty($zip_section)) {
                if (($zip_section == "85") || ($zip_section == "86")) {
                  $price = '100.00';
                }
                else {
                  $price = '200.00';
                }
              }
            }
            else {
              $price = '300.00';
            }
            drupal_add_js("(function ($) {
                   if($('#asu-rfi-multi-part1-thanks')){
                    dataLayer = [{
                      'event': 'ecommerce_event',
                      'transactionId': '$ga_id',
                      'transactionAffiliation': '$program_code',
                      'transactionTotal': '$price',
                      'transactionProducts': [{
                        'sku': '$sku',
                        'name': '$college',
                        'category': '$category',
                        'price': '$price',
                        'quantity': '1'
                      }]
                    }];
                   }
                })(jQuery)", array(
              'type' => 'inline',
              'scope' => 'header',
              'weight' => 0
            ));
          }
        }
      }
    }
  }
}

/**
 * Implementation of hook form_after_build().
 */
function asu_rfi_form_after_build($form, &$form_state) {
  // Remove requirement on student type field on Graduate forms
  if (isset($form['degree_type']['#default_value'])) {
    if (($form['degree_type']['#default_value'] == "graduate_longform") || ($form['degree_type']['#default_value'] == "graduate")) {
      $form['my_interest']['student_type']['#required'] = FALSE;
      $form['my_interest']['student_type']['#needs_validation'] = FALSE;
    }
  }
  return $form;
}

/**
 * CURL options for JSON feed pulls in data inc files
 */
function _asu_rfi_get_curl_auth() {
  return array(
    'Content-Type: text/json',
    'Authorization: Basic 7755:e7acf2e698751f4cac11718d97df6ebf64b94372'
  );
}

/**
 * Check if any options (valid or not) still exist from past pulls so it can
 * possibly (at least partially) function?
 */
function _asu_rfi_check_form_values($db_tbl) {
  $query = Database::getConnection('default')
    ->select($db_tbl);
  $result = $query->countQuery()
    ->execute()
    ->fetchField();
  return (int) $result;
}

/**
 * Validation for phone number
 * @param $email
 * @param $phone
 */
function _asu_rfi_validate_electronic_contacts($email, $phone) {
  if (!preg_match("/^([a-zA-Z0-9])+([a-zA-Z0-9._-])*@([a-zA-Z0-9_-])+([a-zA-Z0-9._-]+)*(\.[a-zA-Z]{2,6})+$/", $email)) {
    form_set_error('email', t('You entered an invalid email.'));
  }
  /** If mobile number field is checked, then check for USA format, else check for special characters **/
  $scam_num = substr($phone, 0, 3);
  if (!empty($mobile_check) && $mobile_check != 0) {
    if (!preg_match("/^([1]-)?([0-9]{3}[-|.][0-9]{3}[-|.][0-9]{4})$/i", $phone) || ($scam_num == "555")) {
      form_set_error('phone', t('You entered an invalid Phone number.'));
    }
  }
  else {
    if (!preg_match("/^[0-9.\s-_+()]+$/", $phone) || ($scam_num == "555")) {
      form_set_error('phone', t('You entered an invalid Phone number.'));
    }
  }
}

/**
 * Birthdate validation
 * @param $birthdate
 */
function _asu_rfi_validate_birthdate($birthdate) {
  //get number of occurences of '/' in dob
  $slashes = substr_count($birthdate, '/');
  if ($slashes == 2) {
    $date_format = explode('/', $birthdate);
    $month = $date_format[0];
    $day = $date_format[1];
    $year = $date_format[2];
    $current_year = date('Y');
    $year_limit = $current_year - 1;
    $isLeapYear = date('L');

    if (strlen($birthdate) < 11) {
      if (($month < 1) || ($month > 12)) {
        form_set_error('birthdate', t('Month range has to be between 1 and 12.'));
        form_set_error('dob_field', t(' '));
      }

      if (($month == 1) || ($month == 3) || ($month == 5) || ($month == 7) || ($month == 8) || ($month == 10) || ($month == 12)) {
        if (($day < 1) || ($day > 31)) {
          form_set_error('birthdate', t('Date range has to be between 1 and 31.'));
          form_set_error('dob_field', t(' '));
        }
      }

      if (($month == 4) || ($month == 6) || ($month == 9) || ($month == 11)) {
        if (($day < 1) || ($day > 30)) {
          form_set_error('birthdate', t('Date range has to be between 1 and 30.'));
          form_set_error('dob_field', t(' '));
        }
      }

      if ($month == 2) {
        if ($isLeapYear == 1) {
          if (($day < 1) || ($day > 29)) {
            form_set_error('birthdate', t('Date range has to be between 1 and 29.'));
            form_set_error('dob_field', t(' '));
          }
        }
        if ($isLeapYear == 0) {
          if (($day < 1) || ($day > 28)) {
            form_set_error('birthdate', t('Date range has to be between 1 and 28.'));
            form_set_error('dob_field', t(' '));
          }
        }
      }

      if (strlen($year) != 4) {
        form_set_error('birthdate', t('Year has to be 4 digits.'));
      }

      if ($year > $year_limit) {
        form_set_error('birthdate', t('Year cannot be greater than ' . $year_limit));
      }

      if (!preg_match("/^(0[1-9]|1[012])[\-\/.](0[1-9]|[12][0-9]|3[01])[\-\/.](19|20)\d\d$/", $birthdate)) {
        form_set_error('birthdate', t('Date of birth accepts the format mm/dd/yyyy.'));
        form_set_error('dob_field', t(' '));
      }

    } else {
      form_set_error('birthdate', t('Date of birth is invalid, it accepts the format mm/dd/yyyy.'));
      form_set_error('dob_field', t(' '));
    }
  } else {
    form_set_error('birthdate', t('Date of birth is invalid, it accepts the format mm/dd/yyyy.'));
    form_set_error('dob_field', t(' '));
  }
}

/**
 * Validation for zipcodes
 * @param $country
 * @param $zip
 */
function _asu_rfi_validate_zipcode($country, $zip) {
  if ($country == "United States") {
    if ((strlen($zip) < 5)) {
      form_set_error('zipcode', t('Postal code cannot be less than 5 digits.'));
    }
    if (!preg_match('/^[0-9]{5}+$/', $zip)) {
      form_set_error('zipcode', t('Postal code accepts 5 digits only.'));
    }
  } else {
    if (!preg_match("/^[a-zA-Z0-9\s-]+$/", $zip)) {
      form_set_error('zipcode', t('Postal code is not valid.'));
    }
    if ((strlen($zip) < 4)) {
      form_set_error('zipcode', t('Postal code cannot be less than 4 characters.'));
    }
    if (strlen($zip) > 20) {
      form_set_error('zipcode', t('Postal code cannot be longer than 20 characters.'));
    }
  }
}

/**
 * Updates fields in entity/node generated by form submission,
 * using entity_metadata_wrapper().
 * @param $entity - submission entity/node
 */
function _asu_rfi_update_submission_future_fields($entity, $form_state, $multi_form_type, $dob_date, $unique_id) {
  $wrapper = entity_metadata_wrapper('node', $entity);
  if (isset($wrapper->title)) {
    $wrapper->title->set($form_state['storage']['first_name']);
  }
  if (isset($wrapper->field_rfi_domain)) {
    $wrapper->field_rfi_domain->set($form_state['storage']['domain']);
  }
  if (isset($wrapper->field_rfi_first_name)) {
    $wrapper->field_rfi_first_name->set($form_state['storage']['first_name']);
  }
  if (isset($wrapper->field_rfi_last_name)) {
    $wrapper->field_rfi_last_name->set($form_state['storage']['last_name']);
  }
  if (isset($wrapper->field_rfi_student_type)) {
    $wrapper->field_rfi_student_type->set($form_state['storage']['student_type']);
  }
  if (isset($wrapper->field_rfi_email)) {
    $wrapper->field_rfi_email->set($form_state['storage']['email']);
  }
  if (isset($wrapper->field_rfi_phone)) {
    $wrapper->field_rfi_phone->set($form_state['storage']['phone']);
  }
  if (isset($wrapper->field_rfi_country)) {
    $wrapper->field_rfi_country->set($form_state['storage']['country']);
  }
  if (isset($wrapper->field_rfi_zipcode)) {
    $wrapper->field_rfi_zipcode->set($form_state['storage']['zipcode']);
  }
  if (isset($wrapper->field_rfi_start_term_code)) {
    $wrapper->field_rfi_start_term_code->set($form_state['storage']['start_date']);
  }
  if (isset($wrapper->field_rfi_program)) {
    $wrapper->field_rfi_program->set($form_state['storage']['program_code']);
  }
  if (isset($wrapper->field_rfi_form_type)) {
    $wrapper->field_rfi_form_type->set($multi_form_type);
  }
  if (isset($wrapper->field_rfi_ip_address)) {  // IP address == (int)? Who did this and why???
    $wrapper->field_rfi_ip_address->set(intval($form_state['storage']['ip_address']));
  }
  if (isset($wrapper->field_rfi_college_code)) {
    $wrapper->field_rfi_college_code->set($form_state['storage']['college_code']);
  }
  if (isset($wrapper->field_rfi_submission_status)) {
    $wrapper->field_rfi_submission_status->set('Incomplete');
  }
  if (isset($wrapper->field_rfi_dob)) {
    $wrapper->field_rfi_dob->set(base64_encode($dob_date));
  }
  if (isset($wrapper->field_rfi_uniquedata)) {
    $wrapper->field_rfi_uniquedata->set($unique_id);
  }
  if (isset($wrapper->field_rfi_start_term)) {
    $wrapper->field_rfi_start_term->set($form_state['storage']['semester_name']);
  }
  if (isset($wrapper->field_rfi_sms_opted)) {
    $wrapper->field_rfi_sms_opted->set($form_state['storage']['mobile_check']);
  }
  if (isset($wrapper->field_rfi_program_name)) {
    $wrapper->field_rfi_program_name->set($form_state['storage']['prog_plan']);
  }
  if (isset($wrapper->field_rfi_college_name)) {
    $wrapper->field_rfi_college_name->set($form_state['storage']['college_name']);
  }
  if (isset($wrapper->field_rfi_enterpriseclientid)) {
    $wrapper->field_rfi_enterpriseclientid->set($form_state['storage']['enterpriseclientid']);
  }
  if (isset($wrapper->field_rfi_prospect_level)) {
    $wrapper->field_rfi_prospect_level->set($form_state['storage']['prospect_level']);
  }
  if (isset($wrapper->field_rfi_campus)) {
    $wrapper->field_rfi_campus->set($form_state['storage']['campus']);
  }
  $wrapper->save();
}

/**
 * Returns correct campusID for Salesforce
 * @param $campus
 * @return string
 * @TODO pull in from feed to stay up to date
 */
function _asu_rfi_correct_campus_id($campus) {
  switch ($campus) {
    case "Tempe":
      $campusId = "TEMPE";
      break;
    case "Online":
      $campusId = "ONLNE";
      break;
    case "East Arizona College":
      $campusId = "EAC";
      break;
    case "Polytechnic":
      $campusId = "POLY";
      break;
    case "Lake Havasu":
      $campusId = "CALHC";
      break;
    case "West":
      $campusId = "WEST";
      break;
    case "Downtown":
      $campusId = "DTPHX";
      break;
    case "Arizona Western College":
      $campusId = "AWC";
      break;
    default:
      $campusId = '';
  }
  return $campusId;
}

/**
 * Create and deliver email receipt to admin about failed SF submissions
 * @param $to_email
 * @param $nid
 * @throws \Exception
 */
function _asu_rfi_failed_post_email($to_email, $nid = 0) {
  $host = $_SERVER['HTTP_HOST'];
  // form submission posting vs. hook_cron() running
  $content = ($nid != 0)
    ? "The following <a href='https://$host/node/$nid'>submission</a> from " . $_SERVER['HTTP_HOST']
      . " has a problem and hasn't been submitted to middleware."
    : "The site " . $_SERVER['HTTP_HOST'] . " hasn\'t been submitting to Salesforce for at least 2 days.";
  $subject = "Failed submissions to SalesForce from " . $_SERVER['HTTP_HOST'];
  $my_module = 'mimemail';
  $my_mail_token = '';
  $MimeMailSystem = drupal_mail_system($my_module, $my_mail_token);
  $default_from = variable_get('site_mail', ini_get('sendmail_from'));
  $message = array(
    'id' => $my_module . '_' . $my_mail_token,
    'from' => $default_from,
    'key' => '',
    'subject' => $subject,
    'body' => array($content),
    'to' => $to_email,
    'module' => 'mimemail',
    'headers' => array(
      'From' => $default_from,
      'Sender' => $default_from,
      'Return-Path' => $default_from,
      'Content-Type' => 'text/html; charset=UTF-8;',
      'to' => $to_email
    ),
  );
  $email_message = $MimeMailSystem->format($message);
  if ($MimeMailSystem->mail($email_message)) {
    watchdog('asu_rfi', 'SF Error message email sent to ' . $to_email);
    variable_set('asu_rfi_SF_error_message_sent', time());
  }
}
