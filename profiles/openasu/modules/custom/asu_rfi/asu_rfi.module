<?php

/**
 * @file
 * asu_rfi.module - ASU RFI Module
 *
 * @author
 * Archana Puliroju (apuliroj@asu.edu)
 * Michael Samuelson (mlsamuel@asu.edu)
 *
 * Module provides ASU RFI form submission functionality.
 *
 */

/*********************************************************************
CONFIG
 *********************************************************************/


/*********************************************************************
DRUPAL HOOKS
 *********************************************************************/

 module_load_include('inc', 'asu_rfi', 'includes/asu_rfi_grad_post');
 module_load_include('inc', 'asu_rfi', 'includes/asu_rfi_undergrad_post');

/**
 * Implements hook_permission().
 */
function asu_rfi_permission() {
  // TODO not used anywhere yet...
  $perms = array(
    'asu access lead export tool' => array(
      'title' => t('Administer ASU RFI module'),
      'description' => t('Administer ASU RFI module'),
    ),
  );

  return $perms;
}

/**
 * Implements hook_menu().
 */
function asu_rfi_menu() {
  $items = array();
  
  
 $items['countries/autocomplete'] = array(
    'page callback' => 'asu_rfi_countries',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/asu_rfi.pages.inc',
   );
 
  $items['degree-programs/request-info-thank-you/%'] = array(
    'page callback' => 'asu_rfi_confirmation',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array ('access content'),
     'file' => 'includes/asu_rfi_confirmation.inc',
   );
   

   $items['states/autocomplete'] = array(
    'page callback' => 'asu_rfi_usStates',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/asu_rfi.pages.inc',
   );
   
   //ASU mdoules settings
   $items['admin/config/asu'] = array(
  'title' => 'ASU modules',
  'description' => 'Configure ASU modules.',
  'position' => 'left',
   'weight' => -30,
  'page callback' => 'system_admin_menu_block_page',
  'access arguments' => array('access administration pages'),
  'file' => 'system.admin.inc',
  'file path' => drupal_get_path('module', 'system'),
  );
   
   // request info form admin settings page  
  $items['admin/config/asu/asurfi'] = array(
    'title' => 'ASU Request Info form module settings',
    'description' => t('Request Info form module settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asu_rfi_admin_settings'),
    'access arguments' => array('access administration pages'),
    'options' => array('attributes' => array('class' => 'title')),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/asu_rfi.admin.inc'
   );
  
  //menu for rfi submissions call back webservices
  
   $items['asu_rfi/success/%/%'] = array(
    'page callback' => 'asu_rfi_success_post',
    'page arguments' => array(2,3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/asu_rfi.backpost.inc',
   );
   
   $items['asu_rfi/failure/%/%'] = array(
    'page callback' => 'asu_rfi_fail_post',
    'page arguments' => array(2,3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/asu_rfi.backpost.inc',
   );
   
   $items['asu_rfi/test_mode/%/%'] = array(
    'page callback' => 'asu_rfi_test_post',
    'page arguments' => array(2,3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/asu_rfi.backpost.inc',
   );
 

  return $items;
}

function asu_rfi_perm(){
   
    return array('administer request info form module settings');
  
}



/**
 * Implements hook_block_info().
 */
function asu_rfi_block_info() {

  // A block to call the RFI form.
  $blocks['asu_rfi_form_block'] = array(
    'info' => t('RFI Master'),
    'cache' => DRUPAL_NO_CACHE,
    'mb_enabled' => TRUE, // Multiblock module integration.
  );

  return $blocks;
}

/**
 * Implements hook_block_info().
 *
 * @param string $delta
 * @param array $multi_id (for Multiblock)
 *
 * @return array
 */
function asu_rfi_block_view($delta = '', $multi_id = NULL) {

  $block = array();

  switch ($delta) {
    case 'asu_rfi_form_block':

      // If we have a multiblock ID, line it up for use getting settings.
      $multi_id = $multi_id ? $multi_id : NULL;
      // Get instance settings.
      $instance_settings = asu_rfi_get_block_instance_settings($multi_id);
      if($instance_settings['form_type'] == 'multiform'){
        $block['subject'] = t('RFI Form');
        module_load_include('inc', 'asu_rfi', 'includes/asu_rfi.pages');
      //Load the multi form
       $block['content'] = asu_rfi_form($delta);
     }
   
   //Undergrad long form settings
  //Only array keys are passed, so load all programs and compare with saved instance setting using array_intersect_key function
  if(($instance_settings['form_type'] == 'ugrad_longform') || ($instance_settings['form_type'] == 'current_undergrad_form')){
     $program_options = asu_rfi_get_undergrad_programs();
     if(!empty($instance_settings['programs'])){
       $programs = array_intersect_key($program_options,  array_flip($instance_settings['programs']));
     }
     //If none of the programs is selected in block settings page, show all the programs in the RFi form drop down
     else{
       $programs = $program_options;
     }
  }
  
  //grad long form settings
  if(($instance_settings['form_type'] == 'graduate_longform') || ($instance_settings['form_type'] == 'current_grad_form')){
    $program_options = asu_rfi_get_grad_programs();
    if(!empty($instance_settings['grad_programs'])){
       $programs = array_intersect_key($program_options,  array_flip($instance_settings['grad_programs']));
    }
    else{
       $programs = $program_options;
    }
  }
  
  
  
   if(($instance_settings['form_type'] == 'ugrad_longform') || ($instance_settings['form_type'] == 'graduate_longform')){
     $form_type = $instance_settings['form_type'];
      $block['subject'] = t('Future Student Form');
      module_load_include('inc', 'asu_rfi', 'includes/asu_rfi.pages');
      // TODO Load the RFI form in this block.
      $block['content'] = asu_rfi_long_form($delta, $programs, $form_type);
     }
     
    //current student form settings
  
    if(($instance_settings['form_type'] == 'current_undergrad_form') || ($instance_settings['form_type'] == 'current_grad_form')){
       $form_type = $instance_settings['form_type'];
       $block['subject'] = t('Current Student Form');
      module_load_include('inc', 'asu_rfi', 'includes/asu_rfi.pages');
      // TODO Load the RFI form in this block.
      $block['content'] = asu_rfi_current_form($delta, $programs, $form_type);
    }
    
     break;
  }

  return $block;
}

/**
 * Implements hook_block_configure().
 *
 * @param string $delta
 * @param array $multi_id (for Multiblock)
 *
 * @return array
 */
function asu_rfi_block_configure($delta = '', $multi_id = NULL) {

  $form = array();

  switch ($delta) {
    case 'asu_rfi_form_block':

      $multi_id = $multi_id ? $multi_id : NULL;
      $instance_settings = asu_rfi_get_block_instance_settings($multi_id);
      
      //Get degree type (grad or undergrad) variables
      $ugrad_degree_type = variable_get('asu_rfi_ugrad_degree_type');
      $graduate_degree_type = variable_get('asu_rfi_graduate_degree_type');
      //check if the site has grad and undergrad degrees and show form type options accordingly
      dpm(sizeof($ugrad_degree_type),'undergrad size');
      dpm(sizeof($graduate_degree_type),'grad size');
    if((sizeof($ugrad_degree_type) > 0) && (sizeof($graduate_degree_type) > 0 )){
        $form_types = array(
                          'multiform' => 'Multi step form (This multi step form will be shown only on degree pages. Select content type and choose "ASU Degree" in block Visibility settings)',
                          'ugrad_longform' => 'Undergraduate Long form',
                          'graduate_longform' => 'Graduate Long form',
                          'current_undergrad_form' => 'Current undergrad form',
                          'current_grad_form' => 'Current Grad form'
                          );
      }
  elseif((sizeof($ugrad_degree_type) > 0 ) && (sizeof($graduate_degree_type) == 0)){
       $form_types = array(
                          'multiform' => 'Multi step form (This multi step form will be shown only on degree pages. Select content type and choose "ASU Degree" in block Visibility settings)',
                          'ugrad_longform' => 'Undergraduate Long form',
                          'current_undergrad_form' => 'Current undergrad form'
                          );
  }
   elseif((sizeof($ugrad_degree_type) == 0) && (sizeof($graduate_degree_type) > 0)){
      $form_types = array(
                          'multiform' => 'Multi step form (This multi step form will be shown only on degree pages. Select content type and choose "ASU Degree" in block Visibility settings)',
                          'graduate_longform' => 'Graduate Long form',
                          'current_grad_form' => 'Current Grad form'
                          );
  }
  else{
  }
     
      //Form type configuration
      /*$form_types = array(
                          'multiform' => 'Multi step form (This form will be shown only on degree pages)',
                          'ugrad_longform' => 'Undergraduate Long form',
                          'graduate_longform' => 'Graduate Long form',
                          'current_undergrad_form' => 'Current undergrad form',
                          'current_grad_form' => 'Current Grad form'
                          );*/
      $form_type_settings = $instance_settings['form_type'] ? $instance_settings['form_type'] : NULL;
      $form['asu_rfi_form_block_type'] = array(
        '#type' => 'radios',
        '#title' => t('ASU RFI Form type:'),
        '#default_value' => $form_type_settings,
        '#options' => $form_types,
        '#required' => TRUE,
      );
     
      $program_settings = $instance_settings['programs'] ? $instance_settings['programs'] : NULL;
    
      $program_options = asu_rfi_get_undergrad_programs();
     //undergrad programs list
      $form['asu_rfi_form_block_programs'] = array(
        '#type' => 'select',
        '#title' => t('ASU RFI Form Programs'),
        '#default_value' => $program_settings,
        '#options' => $program_options,
        '#multiple' => TRUE,
        '#size' => 10,
         '#description' => t('CTRL + click to select programs to display in this RFI Form instance. Selecting NO programs will display ALL.'),
        '#states' => array(
          'visible' => array( // Only show if method selected was long forms
            ':input[name="asu_rfi_form_block_type"]' => array(
                  array('value' => 'ugrad_longform'),
                 
            ),
          ),
          'required' => array(
            ':input[name="asu_rfi_form_block_type"]' =>  array('value' => 'ugrad_longform'),
	   ),
        ),
      );
    //if grad degrees are available, populate the gard degrees field
    if(sizeof(variable_get('asu_rfi_graduate_degree_type')) > 0){
      $grad_program_settings = $instance_settings['grad_programs'] ? $instance_settings['grad_programs'] : NULL;
       $grad_program_options = asu_rfi_get_grad_programs();
     
      //grad programs list
      $form['asu_rfi_form_block_grad_programs'] = array(
        '#type' => 'select',
        '#title' => t('ASU RFI Form Programs'),
        '#default_value' => $grad_program_settings,
        '#options' => $grad_program_options,
        '#multiple' => TRUE,
        '#size' => 10,
        '#description' => t('CTRL + click to select programs to display in this RFI Form instance. Selecting NO programs will display ALL.'),
        '#states' => array(
          'visible' => array( // Only show if method selected was long forms
            ':input[name="asu_rfi_form_block_type"]' => array(
                  array('value' => 'graduate_longform'),
            ),
          ),
          'required' => array(
            ':input[name="asu_rfi_form_block_type"]' =>  array('value' => 'graduate_longform'),
	   ),
        ),
      );
   }
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 *
 * @param string $delta
 * @param array $edit (for Multiblock)
 */
function asu_rfi_block_save($delta = '', $edit = array()) {

  switch ($delta) {
    case 'asu_rfi_form_block':
      $multi_id = isset($edit['multiblock_delta']) ? '_'. $edit['multiblock_delta']['#value'] : NULL;
      //Below line added by Archana
      variable_set('asu_rfi_form_block_type'. $multi_id, $edit['asu_rfi_form_block_type']);
      variable_set('asu_rfi_form_block_programs' . $multi_id, $edit['asu_rfi_form_block_programs']);
      if(!empty($edit['asu_rfi_form_block_grad_programs'])){
        variable_set('asu_rfi_form_block_grad_programs' . $multi_id, $edit['asu_rfi_form_block_grad_programs']);
      }
    break;
  }
}


/**
 * Helper function to obtain all settings for a block (Multiblock compatible).
 *
 * @param mixed (string or integer) $multi_id Multiblock block delta value
 * @param boolean
 *
 * @return array
 */
function asu_rfi_get_block_instance_settings($multi_id = NULL, $endpoint_build = FALSE) {

    // $multi_id if you got 'em.
    $multi_id = $multi_id ? '_' . $multi_id : NULL;
    $block_instance_settings = array();
    if (!$endpoint_build) {
    $block_instance_settings['programs'] = variable_get('asu_rfi_form_block_programs' . $multi_id, array());
    //Below line added by Archana
    $block_instance_settings['form_type'] = variable_get('asu_rfi_form_block_type' . $multi_id, NULL);
     $block_instance_settings['grad_programs'] = variable_get('asu_rfi_form_block_grad_programs' . $multi_id, NULL);
    
    }
    else { // Default build settings, used by our GET/POST endpoint.
     $block_instance_settings['programs'] = array();
     $block_instance_settings['form_type'] = NULL;
     $block_instance_settings['grad_programs'] = array();
    }
 
    return $block_instance_settings;
}

/**
 * Implements hook_cron().
 */
function asu_rfi_cron() {

  //get environment variable fro variables table
  $environment = asu_rfi_determine_environment();
  if(($environment == "qa") || ($environment == "dev")){
    $middleware_host = "webforms-qa.asu.edu";
  }
  else{
    $middleware_host = "webforms.asu.edu";
  }
  
  // Set as system variables so we can adjust via devel/php if desired.
  
  $last_ran = variable_get('asu_rfi_cron_last_ran', 0);
  $stale_time = variable_get('asu_rfi_stale_time', 86400); // 86400 seconds == 1 day

  if (($last_ran + $stale_time) < time()) { // If we last ran over $stale_time seconds ago.

    drupal_flush_all_caches();

    //update countries
    $ctype = 'fieldinfo';
    $cname = 'country';
    $curl = "https://$middleware_host/asu_salesforce_query/api/$ctype/$cname";
    $ch = curl_init();
    $coptions = array(
     CURLOPT_URL => $curl,
     CURLOPT_RETURNTRANSFER => 1,
     CURLOPT_HTTPHEADER => array('Content-Type: text/json', 'Authorization: Basic ' . base64_encode('apuliroj:3UIzHi6vMNXDTV9p')),
   );  

   curl_setopt_array($ch, $coptions);

   $cresponse = curl_exec($ch);

   $cresult = json_decode($cresponse);
   curl_close($ch);

   if (count($cresult)) {

     // Only clear table if we had a result.
     db_query("TRUNCATE TABLE {asu_rfi_countries}");

     // Refresh table.
     foreach($cresult as $country){
       db_query("INSERT INTO {asu_rfi_countries} (countryCode3, countryDesc) VALUES (:country_value, :country_label)", array(':country_value' => $country->value, ':country_label' => $country->label));
     }

   }
   
    //update states
    $type = 'fieldinfo';
    $name = 'state_province';
    $host = $_SERVER['HTTP_HOST'];
    $url = "https://$middleware_host/asu_salesforce_query/api/$type/$name";

    $ch = curl_init();
    $options = array(
      CURLOPT_URL => $url,
      CURLOPT_RETURNTRANSFER => 1,
      CURLOPT_HTTPHEADER => array('Content-Type: text/json', 'Authorization: Basic ' . base64_encode('apuliroj:3UIzHi6vMNXDTV9p')),
    );  

    curl_setopt_array($ch, $options);

    $response = curl_exec($ch);

    $result = json_decode($response);
    curl_close($ch);

    if (count($result)) {

      // Only clear table if we had a result.
      db_query("TRUNCATE TABLE {asu_rfi_states_list}");

      foreach($result as $state){
        db_query("INSERT INTO {asu_rfi_states_list} (stateCode, stateDesc) VALUES (:state_value, :state_label)", array(':state_value' => $state->value, ':state_label' => $state->label));
      }

    }
    
    //update asu_rfi_sem_dates
  $semtype = 'select';
  $semname = 'rfi_dedupe_list_terms';
  $semurl = "https://$middleware_host/asu_salesforce_query/api/$semtype/$semname";

  $semfields = array(
    'condition_Term_Status__c' => TRUE,
  );

  $sembody = json_encode($semfields);

  $semch = curl_init();
  $semoptions = array(
    CURLOPT_URL => $semurl,
    CURLOPT_POST => 1,
    CURLOPT_POSTFIELDS => $sembody,
    CURLOPT_RETURNTRANSFER => 1,
    CURLOPT_HTTPHEADER => array('Content-Type: text/json', 'Authorization: Basic ' . base64_encode('apuliroj:3UIzHi6vMNXDTV9p')),
  );  

  curl_setopt_array($semch, $semoptions);

  $semresponse = curl_exec($semch);
  $semresult = json_decode($semresponse);
  curl_close($semch);
  
  if (count($semresult)) {
    
  // Only clear table if we had a result.
  db_query("TRUNCATE TABLE {asu_rfi_states_list}");
  
  foreach($semresult as $serres){
         db_query("INSERT INTO {asu_rfi_sem_dates} (semId, semLabel) VALUES (:sem_id, :sem_label)", array(':sem_id' => $serres->Id, ':sem_label' => $serres->Name));
   }
  }
    // Update asu_rfi_cron_last_ran time.
    variable_set('asu_rfi_cron_last_ran', time());
  }

  
  // Check for unposted leads (confirmation == -1), and add them to the cron
  // queue.

  $queue = DrupalQueue::get('asu_rfi_failed_leads_queue');
  variable_set('asu_rfi_cron_last_ran', time());
  // Get failed RFI Leads.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'asu_rfi')
    // Don't let this keep happening forever if we have permanent failure.
    ->propertyCondition('created', array('created + INTERVAL 15 MINUTE, time()' - 864000), 'BETWEEN') // Created in the last 10 days (432000 = 10(24 * 3600)).
    ->fieldCondition('field_rfi_submission_status', 'value', array('Incomplete','Pending'), 'IN') // Failed lead.
    ->addMetaData('account', user_load(1)); // Run the query as user 1.
     $results = $query->execute();
 
  // Add failed leads to the cron jobs queue.
  if (isset($results['node'])) {

    // For each failed lead, add it to the asu_rfi_failed_leads_queue.
    foreach ($results['node'] as $key => $failed_rfi_lead) {
      $queue->createItem($failed_rfi_lead);
    }

  }
  
  //check if the site hasn't posted submissions to salesforce for two days. If yes, send an email to administrator.
   //Get last time site had successfull submission
   $last_sf_success = variable_get('last_success_SF_posting', 0); 
   $last_sf_failure = variable_get('last_failure_SF_posting', 0); 
   $timediff = $last_sf_failure - $last_sf_success ;
   $last_sf_attempt = variable_get('last_attempt_SF_posting', 0);
   $timediff_attempt =  $last_sf_attempt - $last_sf_success ;
   $last_email_sent = variable_get('SF_error_message_sent', 0);
   $to_email = variable_get('asu_rfi_error_email', NULL); //get error reporting email address from rfi admin settings page
  
   if (($last_email_sent - time()) > 86400) { // If the email was sent within 2hrs, don't send it again.
    if(($timediff > 17280) || ($timediff_attempt > 17280)){ //greater that two days
        if(!empty($to_email)){
        
         //send email to admin reporting the issue
         $content = "The site ".$_SERVER['HTTP_HOST']." hasn\'t been submitting to Salesforce since 2 days";
         $subject = "Failed submissions to Sales Force from ".$_SERVER['HTTP_HOST'];
         $my_module = 'mimemail';
         $my_mail_token = '';
         $MimeMailSystem = drupal_mail_system($my_module, $my_mail_token);
         $default_from = variable_get('site_mail', ini_get('sendmail_from'));
         $emailmessage = array(
	    'id' => $my_module . '_' . $my_mail_token,
	    'from' => $default_from,
	    'key' => '',
	    'subject' => $subject,
	    'body' => array($content),
            'to' => $to_email,
            'module' => 'mimemail',
	    'headers' => array(
              'From' => $default_from,
              'Sender' => $default_from,
              'Return-Path' => $default_from,
	      'Content-Type' => 'text/html; charset=UTF-8;',
	      'to' => $to_email 
            ),
	);
	
	$emailmessage = $MimeMailSystem->format($message);
        if ($MimeMailSystem->mail($emailmessage)) {
          watchdog('asu_rfi', 'SF Error message email sent to '.$to_email);
          variable_set('SF_error_message_sent', time());
        }
      }
    }
   }
}

/**
 * Implements hook_cron_queue_info().
 */
function asu_rfi_cron_queue_info() {

  // Process to repost failed leads.
  $queues = array();
  
  $queues['asu_rfi_failed_leads_queue'] = array(
    'worker callback' => 'asu_rfi_repost_rfi', // Function to call, each item.
    'time' => 10, // Seconds to spend working on the queue.
  );
  

  return $queues;
}



/*********************************************************************
CALLBACKS
 *********************************************************************/

/**
 * Cron worker callback.
 *
 * Called once for each item.
 *
 * @param $data
 */
function asu_rfi_repost_rfi($data) {
  
  // Load and repost the RFI submissions based on the Prospect level

     $node = node_load($data->nid);
   
     // if graduate submission node, try to repost it to asu_rfi_grad_post file.
     if(sizeof($node->field_rfi_prospect_level) != 0){
      if($node->field_rfi_prospect_level['und'][0]['value'] == "Graduate"){
        
        $gradpost['first_name'] = $node->field_rfi_first_name['und'][0]['value'];
        $gradpost['last_name'] = $node->field_rfi_last_name['und'][0]['value'];
        $gradpost['email'] = $node->field_rfi_email['und'][0]['value'];
        $gradpost['birthdate'] = $node->field_rfi_dob['und'][0]['value'];
        $gradpost['phone'] = $node->field_rfi_phone['und'][0]['value'];
        $gradpost['address'] = isset($node->field_rfi_address['und'][0]['value']) ? $node->field_rfi_address['und'][0]['value'] : '';
        $gradpost['state'] = isset($node->field_rfi_state['und'][0]['value']) ? $node->field_rfi_state['und'][0]['value'] : '';
        $gradpost['country'] = isset($node->field_rfi_country['und'][0]['value']) ? $node->field_rfi_country['und'][0]['value'] : '';
        $gradpost['semester_name'] = isset($node->field_rfi_start_term['und'][0]['value']) ? $node->field_rfi_start_term['und'][0]['value'] : '';
        $gradpost['military'] = isset($node->field_rfi_veteran['und'][0]['value']) ? $node->field_rfi_veteran['und'][0]['value'] : '';
        $gradpost['prog_plan'] = $node->field_rfi_program['und'][0]['value'];
        $gradpost['citizenship'] = isset($node->field_rfi_international['und'][0]['value']) ? $node->field_rfi_international['und'][0]['value'] : '';
        $gradpost['questions'] = isset($node->field_rfi_question['und'][0]['value']) ? $node->field_rfi_question['und'][0]['value'] : '';
        $gradpost['student_type'] = $node->field_rfi_student_type['und'][0]['value'];
        $gradpost['zipcode'] = isset($node->field_rfi_zipcode['und'][0]['value']) ? $node->field_rfi_zipcode['und'][0]['value'] : '';
        $gradpost['mobile_check'] = isset($node->field_rfi_sms_opted['und'][0]['value']) ? $node->field_rfi_sms_opted['und'][0]['value'] : '';
        $gradpost['submission_nodeid'] = $node->nid;
        asu_rfi_grad_post($gradpost);
        watchdog('SF grad posting', "Posted successfully to ".$data->nid);
        variable_set('last_attempt_SF_posting', time());
        
       }
     
     //repost undegrad submissions to middleware
     
      if($node->field_rfi_prospect_level['und'][0]['value'] == "Undergraduate"){
        $upost['first_name'] = $node->field_rfi_first_name['und'][0]['value'];
        $upost['last_name'] = $node->field_rfi_last_name['und'][0]['value'];
        $upost['email'] = $node->field_rfi_email['und'][0]['value'];
        $upost['birthdate'] = $node->field_rfi_dob['und'][0]['value'];
        $upost['phone'] = $node->field_rfi_phone['und'][0]['value'];
        $upost['address'] = isset($node->field_rfi_address['und'][0]['value']) ? $node->field_rfi_address['und'][0]['value'] : '';
        $upost['state'] = isset($node->field_rfi_state['und'][0]['value']) ? $node->field_rfi_state['und'][0]['value'] : '';
        $upost['country'] = isset($node->field_rfi_country['und'][0]['value']) ? $node->field_rfi_country['und'][0]['value'] : '';
        $upost['start_date'] = $node->field_rfi_start_term_code['und'][0]['value'];
        $upost['military'] = isset($node->field_rfi_veteran['und'][0]['value']) ? $node->field_rfi_veteran['und'][0]['value'] : '';
        $upost['program_code'] = $node->field_rfi_program['und'][0]['value']? $node->field_rfi_program['und'][0]['value'] : '';
        $upost['citizenship'] = isset($node->field_rfi_international['und'][0]['value']) ? $node->field_rfi_international['und'][0]['value'] : '';
        $upost['questions'] = isset($node->field_rfi_question['und'][0]['value']) ? $node->field_rfi_question['und'][0]['value'] : '';
        $upost['student_type'] = $node->field_rfi_student_type['und'][0]['value'];
        $upost['zipcode'] = isset($node->field_rfi_zipcode['und'][0]['value']) ? $node->field_rfi_zipcode['und'][0]['value'] : '';
        $upost['mobile_check'] = isset($node->field_rfi_sms_opted['und'][0]['value']) ? $node->field_rfi_sms_opted['und'][0]['value'] : '';
        $upost['submission_nodeid'] = $node->nid;
        asu_rfi_undergrad_post($upost);
        watchdog('SF undergrad posting', "Posted successfully to ".$data->nid);
        variable_set('last_attempt_SF_posting', time());
        
       }
     }
 
}

/*********************************************************************
THEMING
 *********************************************************************/


/*********************************************************************
FORMS
 *********************************************************************/

/**
 * Implementation of hook_form_alter to
 * 1. change exposed form type in view to select option
 * 2. To update RFI forms access if the forms are in test mode
 */


function asu_rfi_form_alter(&$form, &$form_state, $form_id){
  
  //Change form type exposed filter in submssions view (/asu-rfi-submissions-report) form text field to select option   
  if($form['#id'] == 'views-exposed-form-asu-rfi-submissions-report-page'){
   $form_types =  array('' => ' - All -');
    $form_types_query = db_query('select DISTINCT field_rfi_form_type_value from {field_data_field_rfi_form_type}');
    foreach($form_types_query as $form_types_options){
      $form_types[$form_types_options->field_rfi_form_type_value] = $form_types_options->field_rfi_form_type_value;
    }
    
      $form['field_rfi_form_type_value']['#type'] = "select";
      $form['field_rfi_form_type_value']['#size'] = 1;
      $form['field_rfi_form_type_value']['#options'] = $form_types;
      $form['field_rfi_form_type_value']['#validated'] = TRUE;
      $form['field_rfi_form_type_value']['#default_values'] = array(0);
   }
  
    //Add js file to second multistep form
    if(isset($form['#prefix'])){
      if($form['#prefix'] == '<div id="rfi_second_form">'){
        drupal_add_js(drupal_get_path('module', 'asu_rfi') .'/theme/asu_rfi.js','file');
      }
    }
   
   //Disable Google analytics site transactions key in asu_rfi admin settings page
   if($form['#id'] == "asu-rfi-admin-settings"){
    if(!empty($form['asu_rfi_form_access']['asu_rfi_google_analytics_key']['#default_value'])){
      $form['asu_rfi_form_access']['asu_rfi_google_analytics_key']['#disabled'] = TRUE;
    }
    else{
      $form['asu_rfi_form_access']['asu_rfi_google_analytics_key']['#disabled'] = FALSE;
    }
   }
   
   //Get the RFI form mode settings, if form is in test mode, give only admins access to the form view
   $rfi_mode = variable_get('asu_rfi_form_mode');
    global $user;
   
}

/**
 * Detect the user's OS.
 *
 * @return int|string
 */
function asu_rfi_detect_os() {

  $current_os = "unknown";
  $os_list = array (
    'Windows 7' => '(Windows NT 6\.1)',
    'Windows Vista' => '(Windows NT 6\.0)',
    'Windows XP' => '(Windows NT 5\.1)|(Windows XP)',
    'Mac OS' => '(Mac_PowerPC)|(Macintosh)',
    'Linux' => '(Linux)|(X11)',
    'Search Bot'=>'(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp)|(MSNBot)|(Ask Jeeves\/Teoma)|(ia_archiver)',
    'Windows 3.11' => 'Win16',
    'Windows 95' => '(Windows 95)|(Win95)|(Windows_95)',
    'Windows 98' => '(Windows 98)|(Win98)',
    'Windows 2000' => '(Windows NT 5\.0)|(Windows 2000)',
    'Windows Server 2003' => '(Windows NT 5\.2)',
    'Windows NT 4.0' => '(Windows NT 4\.0)|(WinNT4\.0)|(WinNT)|(Windows NT)',
    'Windows ME' => '(Windows 98)|(Win 9x 4\.90)|(Windows ME)',
    'Open BSD' => 'OpenBSD',
    'Sun OS' => 'SunOS',
    'QNX' => 'QNX',
    'BeOS' => 'BeOS',
    'OS/2' => 'OS\/2'
  );
  if (isset($_SERVER['HTTP_USER_AGENT'])) {
    foreach($os_list as $current_os => $match) {
      if (preg_match('#'.$match.'#i', $_SERVER['HTTP_USER_AGENT'])) {
        break;
      }
    }
  }
  return $current_os;
}

/**
 * Detect the user's browser.
 *
 * @return string
 */
function asu_rfi_detect_browser() {

  $browser = 'unknown';
  if (isset($_SERVER['HTTP_USER_AGENT'])) {
    $u_agent = $_SERVER['HTTP_USER_AGENT'];
    if (stripos($u_agent, 'MSIE') !== FALSE) {
      $browser = "IE";
    }
    elseif (stripos($u_agent, 'Chrome') !== FALSE) {
      $browser = "Chrome";
    }
    elseif (stripos($u_agent, 'Firefox') !== FALSE) {
      $browser = "Firefox";
    }
    elseif (stripos($u_agent, 'Safari') !== FALSE) {
      $browser = "Safari";
    }
    elseif (stripos($u_agent, 'Flock') !== FALSE) {
      $browser = "Flock";
    }
    elseif (stripos($u_agent, 'Opera') !== FALSE) {
      $browser = "Opera";
    }
  }

  return $browser;
}

/**
 * Helper function to return all active status program nodes
 *
 * @return array where key is nid and value is program focus (program code +
 *   program plan code)
 *
 * TODO Probably will want to remove, or edit to use new program gathering
 * logic.
 */
function asu_rfi_get_undergrad_programs() {
  
   //get the degree types from the database
      $program_type = db_query('select distinct field_asu_degree_program_value from field_data_field_asu_degree_program');
      //set the variables so they can be used to show degree programs based on the form type selectiosn above in block settings
      foreach($program_type as $programs){
          $degreetype = $programs->field_asu_degree_program_value;
          if($degreetype == "undergrad"){
             variable_set('asu_rfi_ugrad_degree_type', $degreetype);
          }
         
          if($degreetype == "graduate"){
            variable_set('asu_rfi_graduate_degree_type', $degreetype);
          }
        
      }
  

 $query = new EntityFieldQuery();
 
 $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'asu_degree')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_asu_degree_awarded', 'value' ,'NULL', '!=')
    ->fieldCondition('field_asu_academic_program', 'value' ,'NULL', '!=')
    ->fieldCondition('field_asu_academic_plan', 'value' ,'NULL', '!=')
    ->fieldCondition('field_asu_degree_program', 'value' ,'undergrad', '=')
    ->fieldOrderBy('field_asu_degree_awarded', 'value', 'ASC')
    
    ->addMetaData('account', user_load(1)); // Run the query as user 1.
    $result = $query->execute();
    if (isset($result['node'])) {
      $items_nids = array_keys($result['node']);
      $items = entity_load('node', $items_nids);
    }

   $out = array();
   foreach ($items as $nid => $program) {

    $program_wrapper = entity_metadata_wrapper('node', $program);

    $program_abbr = $program_wrapper->field_asu_degree_awarded->value();
    $college_code = $program_wrapper->field_asu_academic_program->value();
    $program_plan_code = $program_wrapper->field_asu_academic_plan->value();

    // Abbr in value matches how we present name in get programs Views
    // Datasource View.
    $out[$program_plan_code] = $program_abbr;

  }
 
  return $out;
}

//Gte grad programs if any exist
function asu_rfi_get_grad_programs() {

 $query = new EntityFieldQuery();
 
 $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'asu_degree')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_asu_degree_awarded', 'value' ,'NULL', '!=')
    ->fieldCondition('field_asu_academic_program', 'value' ,'NULL', '!=')
    ->fieldCondition('field_asu_academic_plan', 'value' ,'NULL', '!=')
    ->fieldCondition('field_asu_degree_program', 'value' ,'graduate', '=')
    ->fieldOrderBy('field_asu_degree_awarded', 'value', 'ASC')
    
    ->addMetaData('account', user_load(1)); // Run the query as user 1.
    $result = $query->execute();
    if (isset($result['node'])) {
      $items_nids = array_keys($result['node']);
      $items = entity_load('node', $items_nids);
    }

   $out = array();
   if(isset($items)){
   foreach ($items as $nid => $program) {

    $program_wrapper = entity_metadata_wrapper('node', $program);

    $program_abbr = $program_wrapper->field_asu_degree_awarded->value();
    $college_code = $program_wrapper->field_asu_academic_program->value();
    $program_plan_code = $program_wrapper->field_asu_academic_plan->value();

    // Abbr in value matches how we present name in get programs Views
    // Datasource View.
    $out[$program_plan_code] = $program_abbr;

  }
  }
  else{
    $out = '';
  }
 
  return $out;
} 

 

/**
 * Helper function to determine which environment we're operating in.
 *
 * @return Name of the environment. dev, qa, or prod
 */
function asu_rfi_determine_environment() {

  // Strict operator so we don't match on FALSE.
  global $base_url;
  $environ = 'prod';
  if ((strpos($base_url, 'https://localhost') === 0) || (strpos($base_url, 'http://localhost') === 0)) {
    $environ = 'dev';
  }
  if ((strpos($base_url, 'https://dev-') === 0) || (strpos($base_url, 'http://dev-') === 0) || (strpos($base_url, '-dev') === 0)) {
    $environ = 'dev';
  }
  if ((strpos($base_url, 'https://qa-') === 0) || (strpos($base_url, 'http://qa-') === 0) || (strpos($base_url, '-qa') === 0) ) {
    $environ = 'qa';
  }
  if ((strpos($base_url, 'https://test-') === 0) || (strpos($base_url, 'http://test-') === 0)) {
    $environ = 'qa';
  }
 
  return $environ;
}

/*******************************************************************************
Views bulk operation hook to do bulk submissions of RFI submissions to middleware
********************************************************************************/
function asu_rfi_action_info() {
  return array(
    'asu_rfi_bulk_submit_action' => array(
      'type' => 'node',
      'label' => t('Submit selected RFI submissions to middleware'),
      array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

function asu_rfi_bulk_submit_action(&$node, $context) {
  if($node->field_rfi_prospect_level['und'][0]['value'] == "Undergraduate"){
        $upost['first_name'] = $node->field_rfi_first_name['und'][0]['value'];
        $upost['last_name'] = $node->field_rfi_last_name['und'][0]['value'];
        $upost['email'] = $node->field_rfi_email['und'][0]['value'];
        $upost['birthdate'] = $node->field_rfi_dob['und'][0]['value'];
        $upost['phone'] = $node->field_rfi_phone['und'][0]['value'];
        $upost['address'] = isset($node->field_rfi_address['und'][0]['value']) ? $node->field_rfi_address['und'][0]['value'] : '';
        $upost['state'] = isset($node->field_rfi_state['und'][0]['value']) ? $node->field_rfi_state['und'][0]['value'] : '';
        $upost['country'] = $node->field_rfi_country['und'][0]['value'];
        $upost['start_date'] = $node->field_rfi_start_term_code['und'][0]['value'];
        $upost['military'] = isset($node->field_rfi_veteran['und'][0]['value']) ? $node->field_rfi_veteran['und'][0]['value'] : '';
        $upost['prog_plan'] = $node->field_rfi_program['und'][0]['value'];
        $upost['citizenship'] = isset($node->field_rfi_international['und'][0]['value']) ? $node->field_rfi_international['und'][0]['value'] : '';
        $upost['questions'] = isset($node->field_rfi_question['und'][0]['value']) ? $node->field_rfi_question['und'][0]['value'] : '';
        $upost['student_type'] = $node->field_rfi_student_type['und'][0]['value'];
        $upost['zipcode'] = $node->field_rfi_zipcode['und'][0]['value'];
        $upost['mobile_check'] = isset($node->field_rfi_sms_opted['und'][0]['value']) ? $node->field_rfi_sms_opted['und'][0]['value'] : '';
        $upost['submission_nodeid'] = $node->nid;
        asu_rfi_undergrad_post($upost);
        drupal_set_message('Posted to middleware');
  }
}


/*********************************************************************
DEVELOPER NOTES
 *********************************************************************/


function asu_rfi_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'asu_rfi') .'/views',
    'template path' => drupal_get_path('module', 'asu_rfi') .'/templates'
  );
}

/** Implementation of hook_js_alter
 * Form API #states works only with Jquery 1.5, so altering JS version only form ASU RFI blokc settings pahe to jQuery 1.5 or core.
 *
 *
*/
function asu_rfi_js_alter(&$javascript) {
  if ((arg(4) == 'multiblock') && variable_get('jquery_update_jquery_version', FALSE) == '1.7') {

  //$javascript['profiles/openasu/modules/contrib/jquery_update/replace/misc/1.7/states.js']['data'] = drupal_get_path('core','') . 'misc/states.js';
  $javascript['profiles/openasu/modules/contrib/jquery_update/replace/misc/1.7/states.js'] = array(
     'data' => drupal_get_path('core','') . 'misc/states.js',
     'group' => '-100',
     'weight' =>  '1.019',
     'version' =>  '7.32',
     'type' => "file",
     'cache' => TRUE,
     'every_page' => FALSE,
     'preprocess' => TRUE,
     'defer' => FALSE,
     'scope' => 'header'
  );
  }

}