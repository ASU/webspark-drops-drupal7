<?php

/**
 * Implements hook_install().
 */
function asu_brand_install() {
  variable_set('asu_brand_ci_testing', 0);
  // Set permissions for ASU Brand
  _asu_brand_user_perms('add');
}

/**
 * Implements hook_uninstall().
 */
function asu_brand_uninstall() {
  drupal_load('module', 'asu_brand');

  // Delete all module variables.
  db_delete('variable')->condition('name', 'asu_brand%', 'LIKE')->execute();
  cache_clear_all('variables', 'cache_bootstrap');

  // Delete caches.
  foreach (asu_brand_get_cache_ids() as $cache_id) {
    cache_clear_all($cache_id, 'cache');
  }
  // Remove permissions for ASU Brand
  _asu_brand_user_perms('remove');
}

/**
 * Set footer color variable to '' if it equals '_black' which is the actual
 * value for the black footer.
 */
function asu_brand_update_7100(&$sandbox) {
  $footer_color = variable_get('asu_brand_footer_color', '');
  if ($footer_color = '_black') {
    variable_set('asu_brand_footer_color', '');
    cache_clear_all('asu_brand:footer', 'cache');
  }
}

/**
 * + Updates header variables if Innovation theme is selected
 * + Re-add footer block to all pages
 */
function asu_brand_update_7101(&$sandbox) {
  $theme = 'innovation';
  if (variable_get('theme_default') === $theme) {
    // re-add footer after removal from mega footer module
    $asu_brand_footer_bid = db_query("SELECT bid FROM {block} WHERE delta = :delta AND theme = :theme", array(
      ':delta' => 'asu_brand_footer',
      ':theme' => $theme
    ))->fetchField();
    db_query("UPDATE {block} SET status = :status WHERE bid = :bid AND theme = :theme", array(
      ':status' => 1,
      ':bid' => $asu_brand_footer_bid,
      ':theme' => $theme
    ));
    db_query("UPDATE {block} SET region = :region WHERE bid = :bid AND theme = :theme", array(
      ':region' => 'footer',
      ':bid' => $asu_brand_footer_bid,
      ':theme' => $theme
    ));
    // updates header vars
    variable_set('asu_brand_header_selector', 'default');
    variable_set('asu_brand_header_template', 'default');
    variable_set('asu_brand_header_version', '4.4');
    variable_set('asu_brand_header_basepath', 'http://www.asu.edu/asuthemes');
  }
}
/**
 * + Updates ASU Header to v4.5
 */
function asu_brand_update_7102(&$sandbox) {
  if (variable_get('theme_default') === 'innovation') {
    variable_set('asu_brand_header_version', '4.5');
  }
}

/**
 * + Adds Behat testing variable to turn off GTM during Behat testing
 */
function asu_brand_update_7103(&$sandbox) {
  variable_set('asu_brand_ci_testing', 0);
}

/**
 * + Updates ASU Header to v4.5 for all remaining non-Webspark Innovation users
 */
function asu_brand_update_7104(&$sandbox) {
  variable_set('asu_brand_header_version', '4.5');
}

/**
 * + Updates ASU Header to stable
 */
function asu_brand_update_7105(&$sandbox) {
  variable_set('asu_brand_header_version', 'stable');
}

/**
 * + Set header version to "stable"
 * + Disable display of site name by Drupal, since the brand header is now handling it
 */
function asu_brand_update_7106(&$sandbox) {
  variable_set('asu_brand_header_version', 'stable');
  $themes = list_themes();
  foreach ($themes AS $key => $item) {
    $theme_key = 'theme_'.$key.'_settings';

    $settings = variable_get($theme_key, array());
    $settings['toggle_name'] = FALSE;
    variable_set($theme_key, $settings);
  }
}

/**
 * Delete deprecated/legacy settings for headers/footers (pre WS1.0)
 */
function asu_brand_update_7200(&$sandbox) {
  variable_del('asu_brand_footer_color');
  variable_del('asu_brand_header_template');
  variable_del('asu_brand_header_basepath');
}

/**
 * Adds permissions for ASU Brand configuration form to existing installs
 * @param $sandbox
 */
function asu_brand_update_7201(&$sandbox) {
  _asu_brand_user_perms('add');
}

/**
 * Delete all legacy asu_brand_students_footer blocks, just in case they still exist anywhere.
 * @param $sandbox
 */
function asu_brand_update_7202(&$sandbox) {
  $module = 'asu_brand';
  $delta = 'asu_brand_students_footer';
  $result = db_select('block', 'b')
    ->fields('b', array('bid'))
    ->condition('module', $module)
    ->condition('delta', $delta)
    ->orderBy('bid')
    ->execute();
  $block_ids = $result->fetchCol();

  foreach ($block_ids as $bid) {
    db_delete('block_custom')
      ->condition('bid', $bid)
      ->execute();
    db_delete('block')
      ->condition('module', $module)
      ->condition('delta', $delta)
      ->execute();
    db_delete('block_role')
      ->condition('module', $module)
      ->condition('delta', $delta)
      ->execute();
    db_delete('block_node_type')
      ->condition('module', $module)
      ->condition('delta', $delta)
      ->execute();
  }
  $message = 'An attempt to delete any legacy students footer blocks has been made. If any remained, they should be deleted now.';
  watchdog('asu_brand', $message);
  drupal_set_message($message, 'status', FALSE);
}

/**
 * Rename any unshared ASU Brand header block settings to separate them between WS1.0 and WS2.0
 * @param $sandbox
 */
function asu_brand_update_7203(&$sandbox) {
  $delta = (variable_get('asu_brand_header_version', 'stable') === '5.0')
    ? 'asu_brand_header_ws2'
    : 'asu_brand_header';
  $asu_brand_settings = array(
    'asu_brand_parent_org_url' => $delta . '_parent_org_url',
    'asu_brand_parent_org_title' => $delta . '_parent_org_title',
    'asu_brand_override_url' => $delta . '_override_url',
    'asu_brand_sitemenu_injection_flag' => $delta . '_sitemenu_injection_flag',
    'asu_brand_sitemenu_name' => $delta . '_sitemenu_name',
    'asu_brand_gtm_override' => $delta . '_gtm_override',
    'asu_brand_do_not_override' => $delta . '_do_not_override',
  );
  foreach ($asu_brand_settings as $old => $new) {
    $value = db_select('variable', 'v')
      ->fields('v', array('value'))
      ->condition('name', $old, 'LIKE')
      ->execute()
      ->fetchField();
    if (!empty($value)) {
      db_merge('variable')
        ->key(array(
          'name' => $old,
        ))
        ->fields(array(
          'name' => $new,
          'value' => $value,
        ))->execute();
    }
  }
}

/**
 * Configure global header/footer block defaults for college
 * (does NOT affect subtheme block settings)
 * @param $sandbox
 */
function asu_brand_update_7204(&$sandbox) {
  $header_weight = db_select('block', 'b')
    ->condition('region', 'header')
    ->condition('delta', 'asu_brand_heade%', 'LIKE');
  $header_weight->addExpression('MIN(b.weight)', 'weight'); // addExpression() Not chainable
  $weight = $header_weight->execute()->fetchField();
  $header_weight = (!empty($weight)) ? (int) $weight - 1 : 0;
  // Global footer block
  // Get lowest weight from any theme
  $footer_weight = db_select('block', 'b')
    ->condition('region', 'footer')
    ->condition('delta', 'asu_brand_foote%', 'LIKE');
  $footer_weight->addExpression('MAX(b.weight)', 'weight'); // addExpression() Not chainable
  $weight = $footer_weight->execute()->fetchField();
  $footer_weight = (!empty($weight)) ? (int) $weight + 1 : 1;
  db_merge('block')
    ->key(array(
      'module' => 'asu_brand',
      'delta' => 'asu_brand_header_ws2',
      'theme' => 'college',
      'pages' => '',
    ))
    ->fields(array(
        'region' => 'header',
        'status' => '1',
        'weight' => $header_weight,
      )
    )->execute();
  db_merge('block')
    ->key(array(
      'module' => 'asu_brand',
      'delta' => 'asu_brand_footer_ws2',
      'theme' => 'college',
      'pages' => '',
    ))
    ->fields(array(
        'region' => 'footer',
        'status' => '1',
        'weight' => $footer_weight,
      )
    )->execute();
}

/**
 * Move El Puente (WS2.0 dev theme) theme and block settings to its replacement theme (College).
 */
function asu_brand_update_7205(&$sandbox) {
  // Move variable table settings from elpuente to college.
  $college = db_select('variable', 'v')
    ->fields('v', array('name'))
    ->condition('name', 'theme_college_settings')
    ->execute()
    ->fetchField();
  if ($college === FALSE) {
    $elpuente_settings = db_select('variable', 'v')
      ->fields('v', array('value'))
      ->condition('name', 'theme_elpuente_settings')
      ->execute()
      ->fetchField();
    if (!empty($elpuente_settings)) {
      db_merge('variable')
        ->key(array(
          'name' => 'theme_college_settings',
        ))
        ->fields(array(
            'name' => 'theme_college_settings',
            'value' => $elpuente_settings,
          )
        )->execute();
    }
    flogger('asu_brand', 'El Puente theme settings were transferred to the College theme.',
      array(), WATCHDOG_INFO, TRUE);
  } else {
    flogger('asu_brand', 'College theme settings were already set. El Puente theme settings will be deleted.',
      array(), WATCHDOG_INFO, TRUE);
  }
  db_delete('variable')
    ->condition('name', 'theme_elpuente_settings')
    ->execute();

  // Move block table entries from elpuente to college
  $elpuente_blocks = db_select('block', 'b')
    ->fields('b', array('bid', 'module', 'delta', 'theme'))
    ->condition('theme', 'elpuente')
    ->orderBy('bid')
    ->execute()
    ->fetchAll();
  $count = count($elpuente_blocks);
  if ($count > 0) {
    $updated = $deleted = 0;
    foreach($elpuente_blocks as $block) {
      $setting = db_select('block', 'b')
        ->fields('b', array(
          'bid',
        ))
        ->condition('module', $block->module)
        ->condition('delta', $block->delta)
        ->condition('theme', 'college')
        ->execute()
        ->fetchField();
      if ($setting !== FALSE) {
        // College theme block #bid entry already exists; Delete duplicate El Puente record
        db_delete('block')
          ->condition('module', $block->module)
          ->condition('delta', $block->delta)
          ->condition('theme', 'elpuente')
          ->execute();
        $deleted++;
      } else {
        // No College theme entry exists; Update El Puente record to College theme
        db_update('block')
          ->fields(array(
            'theme' => 'college'
          ))
          ->condition('module', $block->module)
          ->condition('delta', $block->delta)
          ->condition('bid', $block->bid)
          ->execute();
        $updated++;
      }
    }
    $extra = ($updated > 0) ? $updated . ' records needed to be added to the College theme, while' : ' all';
    flogger('asu_brand', "Of the %count block settings records for the El Puente theme,"
      .  $extra . ' %del were deleted because they were already set.',
      array('%count' => $count, '%upd' => $updated, '%del' => $deleted), WATCHDOG_INFO, TRUE);
  } else {
    flogger('asu_brand', 'No block settings for the El Puente theme were found. Skipping update.',
      array(), WATCHDOG_INFO, TRUE);
  }
}

/**
 * Manages (adds or removes) permissions for ASU Brand
 * @param $action - Add or remove ASU Brand permissions.
 */
function _asu_brand_user_perms($action) {
  $admin_role = user_role_load_by_name('administrator')->rid;
  $perms = array('administer asu brand');
  if (!empty($admin_role) && is_numeric($admin_role)) {
    if ($action === 'add') {
      user_role_grant_permissions($admin_role, $perms); // admin role grant
    } elseif ($action === 'remove') {
      // Delete permission entries from role_permission
      db_delete('role_permission')
        ->condition('permission', 'administer asu brand', 'LIKE')
        ->condition('module', 'asu_brand')
        ->condition('rid', $admin_role, '!=')
        ->execute();
      // admin role remove (to clear static cache entries as well, use the Drupal API)
      user_role_revoke_permissions($admin_role, $perms);
    }
    watchdog('user', __FUNCTION__ . ' - ' . $action . ' ASU Brand permissions');
  }
}
