<?php

/**
 * ASU Brand module.
 *
 * Author: Marcus Anthony (marcus.anthony@asu.edu)
 * Created: 2011-09-21
 */

/*********************************************************************
 CONFIG
*********************************************************************/

define('ASU_BRAND_HEADER_VERSION_DEFAULT', 'stable'); // Assume 4.x for now
define('ASU_BRAND_HEADER_BASEPATH_DEFAULT', 'https://www.asu.edu/asuthemes');
define('ASU_BRAND_CACHE_LIFETIME', 172800); // 48 Hours ( 60 x 60 x 48 )
define('ASU_BRAND_PREVIEW_PAGES_DEFAULT', "system/ajax/*\npanels/ajax/*");

/**
 * Default machine name of site menu to inject into the responsive header menu
 * @var string
 */
define('ASU_BRAND_SITE_MENU_NAME_DEFAULT', 'main-menu');


/**
 * Implements hook_init().
 */
function asu_brand_init() {
  // Check which Web standards version first
  $suffix = (variable_get('asu_brand_header_version', 'stable') === '5.0') ? '_ws2' : '';

  if (variable_get('asu_brand_header' . $suffix . '_sitemenu_injection_flag', 1)) {
    $menu_array = asu_brand_get_site_menu_array();
    drupal_alter('asu_brand_sitemenu', $menu_array); // Invoke alter

    $site_name = asu_brand_get_site_name();
    drupal_alter('asu_brand_sitename', $site_name); // Invoke alter

    $site_url = variable_get('asu_brand_header' . $suffix . '_override_url', '/');
    if (empty($site_url)) {
      $site_url = '/';
    }
    drupal_alter('asu_brand_site_url', $site_url); // Invoke alter

    $site_title_array = array(
      'title' => $site_name,
      'site_url' => $site_url
    );
    $parent_org_title = variable_get('asu_brand_header' . $suffix . '_parent_org_title', '');
    $parent_org_url = variable_get('asu_brand_header' . $suffix . '_parent_org_url', '');
    if (!empty($parent_org_title)) {
      $site_title_array['parent_org'] = $parent_org_title;
    }
    if (!empty($parent_org_url)) {
      $site_title_array['parent_org_url'] = $parent_org_url;
    }

    $js = 'window.ASUHeader = window.ASUHeader || {};';
    $js .= 'ASUHeader.site_menu = ASUHeader.site_menu || {};';
    $js .= 'ASUHeader.site_menu.json = \''.json_encode($menu_array, JSON_HEX_APOS).'\';';
    $js .= 'ASUHeader.site_menu.site_name = '.json_encode($site_name, JSON_HEX_APOS).';';
    $js .= 'ASUHeader.site_title = '.json_encode($site_title_array, JSON_HEX_APOS).';';

    if (variable_get('asu_brand_ci_testing', 0) === 1) {
      $js .= 'ASUHeader.disableCookieConsent = true;';
    }

    drupal_add_js($js, array('type' => 'inline', 'scope' => 'header', 'group' => JS_THEME, 'weight' => -10));
  }
}

/**
 * Implements hook_permission().
 */
function asu_brand_permission() {
  return array(
    'administer asu brand' => array(
      'title' => t('Administer ASU Brand module'),
      'description' => t('Administer ASU Brand module'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function asu_brand_menu() {
  $items = array();
  // Add parent item in admin/navigation menu
  $items['admin/config/asu_brand'] = array(
    'title' => 'ASU Brand',
    'description' => 'Administer the ASU Brand module.',
    'position' => 'right',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer asu brand'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/asu_brand/settings'] = array(
    'title' => 'ASU Brand settings',
    'description' => t('Administer ASU Brand settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asu_brand_admin_settings'),
    'access arguments' => array('administer asu brand'),
    'options' => array('attributes' => array('class' => 'title')),
    'file' => 'includes/asu_brand.admin.inc'
  );
  return $items;
}

/**
 * Implements hook_cron().
 */
function asu_brand_cron() {
  // Reset CI testing bypass of GTM code back to 0, just in case testing failed
  // to complete and left on filtering
  variable_set('asu_brand_ci_testing', 0);
}

/**
 * Implements hook_block_info().
 */
function asu_brand_block_info() {
  // Never cache the header with Drupal's caching system because the contents of
  // the block changes based on if the user is logged in. The included header files
  // are cached manually when the block is loaded in _asu_brand_block_header().
  $blocks['asu_brand_header'] = array(
    'info' => t('ASU Brand: header'),
    'cache' => DRUPAL_NO_CACHE,
  );
  // Added for WS2
  $blocks['asu_brand_header_ws2'] = array(
    'info' => t('WS2.0: Header'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['asu_brand_footer'] = array(
    'info' => t('ASU Brand: footer'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['asu_brand_footer_ws2'] = array(
    'info' => t('WS2.0: Footer'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 * @param string $delta - Which block to configure
 * @return array|mixed
 */
function asu_brand_block_configure($delta = '') {
  $form = array();
  switch ($delta) {
    case 'asu_brand_header':
    case 'asu_brand_header_ws2':
    case 'asu_brand_footer':
    case 'asu_brand_footer_ws2':
      module_load_include('inc', 'asu_brand', 'includes/asu_brand.admin');
      $form = asu_brand_get_block_configure_form($delta);
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 * @param string $delta - Which block to save
 * @param array $edit - Submitted values for saving
 */

function asu_brand_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    // Same config form additions for WS1.0 and WS2.0
    case 'asu_brand_header':
    case 'asu_brand_header_ws2':
      variable_set('asu_brand_preview_pages', $edit['asu_brand_preview_pages']);
      variable_set($delta . '_gtm_override', $edit['asu_brand_gtm_override']);
      variable_set($delta . '_sitemenu_injection_flag', $edit['asu_brand_sitemenu_injection_flag']);
      variable_set($delta . '_sitemenu_name', $edit['asu_brand_sitemenu_name']);

      if (isset($edit['asu_brand_do_not_override'])) {
        // explode and trim input on commas, then check for plain non-empty input
        $overrides = array_map('trim', explode(',', $edit['asu_brand_do_not_override']));
        $overrides = array_filter($overrides, function($val) {
          $val = check_plain($val);
          return !empty($val);
        });
        variable_set($delta . '_do_not_override', drupal_json_encode($overrides));
      }

      variable_set($delta . '_parent_org_title', $edit['asu_brand_parent_org_title']);
      variable_set($delta . '_parent_org_url', $edit['asu_brand_parent_org_url']);
      variable_set($delta . '_override_url', $edit['asu_brand_override_url']);

      asu_brand_cache_clear();
      break;

    // Same saved configs for WS1.0 and WS2.0
    case 'asu_brand_footer':
    case 'asu_brand_footer_ws2':
      asu_brand_cache_clear();
      break;
  }
}

/**
 * Implements hook_block_view().
 * @noinspection PhpDocSignatureInspection
 */
function asu_brand_block_view($delta = '') {
  $block = array();
  $is_preview_path = asu_brand_is_preview_path();
  $preview_text = t('No preview available');
  module_load_include('inc', 'asu_brand', 'includes/asu_brand.block');

  switch ($delta) {
    // WS2.0 Header - Rendered by Javascript (web component)
    case 'asu_brand_header_ws2':
      $block['subject'] = '';
      if ($is_preview_path) {
        $block['content'] = 'WS2.0 Header: ' . $preview_text;
      } else {
        $block['content'] = asu_brand_get_block_header($delta);
      }
      break;
    // WS2.0 Footer
    case 'asu_brand_footer_ws2':
      $block['subject'] = NULL;
      if ($is_preview_path) {
        $block['content'] = 'WS2.0 footer: ' . $preview_text;
      } else {
        $block['content'] = asu_brand_get_block_footer($delta);
      }
      break;

    // WS1.0 Header
    case 'asu_brand_header':
      $block['subject'] = NULL;
      if ($is_preview_path) {
        $block['content'] = $preview_text;
      }
      else {
        $block['content'] = asu_brand_get_block_header($delta);
      }
      break;
    // WS1.0 Footer
    case 'asu_brand_footer':
      $block['subject'] = NULL;
      if ($is_preview_path) {
        $block['content'] = 'WS1.0 footer: ' . $preview_text;
      }
      else {
        $block['content'] = asu_brand_get_block_footer($delta);
      }
      break;

    default:
      break;
  }
  return $block;
}

/**
 * Implements hook_page_alter().
 * Adds a post_render callback and loads the include file.
 * @see drupal_render_page()
 */
function asu_brand_page_alter(&$page) {
  // Call sequence:
  // - drupal_render_page()
  //   - hook_page_alter()
  //   - drupal_render()
  // - drupal_render()
  //   - callbacks in $elements['#theme_wrappers']
  //     - hook_preprocess_html(): 'html' is the wrapper for page
  //     - templates may add tags after body tag
  //   - callbacks in $elements['#post_render']
  //     - asu_brand_page_process(): callback set here
  // Add callback routine.
  $page['#post_render'][] = 'asu_brand_page_process';
  module_load_include('inc', 'asu_brand', 'includes/asu_brand.gtm');
}

/**
 *
 * Implements hook_cache_clear().
 *
 * Clears block caches.
 * If called without arguments, clears all asu_brand related items. $cid can be
 * any asu_brand item (without the 'asu_brand:' part.
 * @param string $cid - Drupal cache ID.
 * @param bool $wildcard - Clear ALL cached "asu_brand:*" blocks. Defaults to TRUE.
 */
function asu_brand_cache_clear($cid = '', $wildcard = TRUE) {
  cache_clear_all('asu_brand:' . $cid, 'cache', $wildcard);
}

/**
 * Get list of cache IDs.
 * @param bool $reset Flush static version of cache IDs. Defaults to FALSE.
 * @return array|mixed|string[]|null
 */
function asu_brand_get_cache_ids($reset = FALSE) {
  $cache_ids = &drupal_static(__FUNCTION__);
  if ($reset || (!isset($cache_ids))) {
    $cache_ids = array(
      'asu_brand:head',
      'asu_brand:header',
      'asu_brand:header_ws2',
      'asu_brand:footer',
      'asu_brand:footer_ws2',
      'asu_brand:gtm'
    );
  }
  return $cache_ids;
}

/**
 * Determine if path is generating a preview.
 * @param bool $reset - Flush static version of list of pages. Defaults to FALSE.
 * @return array|bool|mixed|null
 */
function asu_brand_is_preview_path($reset = FALSE) {
  $page_match = &drupal_static(__FUNCTION__);
  if ($reset || !isset($page_match)) {
    $pages = variable_get('asu_brand_preview_pages', ASU_BRAND_PREVIEW_PAGES_DEFAULT);
    // Convert the Drupal path to lowercase.
    $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
    // Compare the lowercase internal and lowercase path alias (if any).
    $page_match = drupal_match_path($path, $pages);
    if ($path != $_GET['q']) {
      $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
    }
  }
  return $page_match;
}

/**
 * Get site name displayed in mobile menu
 * @return String
 */
function asu_brand_get_site_name() {
  $site_name = variable_get('site_name', '');
  return $site_name;
}

/**
 * Returns site menu array
 */
function asu_brand_get_site_menu_array() {
  $menu_tree = menu_tree_all_data(variable_get('asu_brand_sitemenu_name', ASU_BRAND_SITE_MENU_NAME_DEFAULT));
  drupal_alter('asu_brand_sitemenu_name', $menu_tree); // Invoke alter
  $menu_array = array();
  $i=0;
  foreach ($menu_tree as $item) {
    if (isset($item['link']) && $item['link']['access'] && !$item['link']['hidden']) {
      if ($menu_item = asu_brand_get_menu_item($item['link']['title'], $item['link']['link_path'], $item['link']['options'])) {
        $menu_array[$i] = array_map('trim', $menu_item);
      } else {
        $i--;
      }
      // Render child items.
      if (asu_brand_menuitem_has_active_children($item)) {
        $j=0;
        foreach ($item['below'] as $child) {
          if (isset($child['link']) && !$child['link']['hidden']) {
            if ($menu_item = asu_brand_get_menu_item($child['link']['title'], $child['link']['link_path'], $child['link']['options'])) {
              $menu_array[$i]['children'][$j] = array_map('trim', $menu_item);
            } else {
              $j--;
            }
            // Render grandchild items.
            if (asu_brand_menuitem_has_active_children($child)) {
              $k=0;
              foreach ($child['below'] as $grandchild) {
                if (isset($grandchild['link']) && !$grandchild['link']['hidden']) {
                  if ($menu_item = asu_brand_get_menu_item($grandchild['link']['title'], $grandchild['link']['link_path'], $grandchild['link']['options'])) {
                    $menu_array[$i]['children'][$j]['children'][$k] = array_map('trim', $menu_item);
                  } else {
                    $k--;
                  }
                  $k++;
                }
              }
            }
            $j++;
          }
        }
      }
      $i++;
    }
  }
  return $menu_array;
}


/**
 * Compose and return menu item
 *   Special handling for 'Special menu items' module
 *   Return NULL for path if <nolink>
 *   Return empty array if <separator>
 * @param atring $title
 * @param atring $path
 * @param assoc array $options
 * @return assoc array>
 */
function asu_brand_get_menu_item($title, $path, $options = array()) {
  // default
  $menu_item = array(
        'title' => t(strip_tags(htmlspecialchars_decode($title))),
        'path'  => url($path, $options)
      );
  // special handling for 'Special menu items' module
  if (module_exists('special_menu_items')) {
    switch ($path) {
      case '<nolink>':
        $menu_item['path'] = NULL;
        break;
      case '<separator>':
        return array(); // return empty array if separator
        break;
    }
  }
  return $menu_item;
}


/**
 * Parses menu_item and returns true if there are active child menu items.
 * @param array $menu_item
 * @return boolean
 */
function asu_brand_menuitem_has_active_children($menu_item) {
  if (is_array($menu_item) && isset($menu_item['below']) && !empty($menu_item['below'])) {
    foreach ($menu_item['below'] as $child) {
      if (isset($child['link']) && $child['link']['access'] && ($child['link']['hidden'] == 0)) return true;
    }
  }
  return false;
}

/**
 * FOLLOWING CODE IS FOR WEB STANDARDS 2.0 COMPLIANCE
 *
 * HELPER FUNCTIONS DEFINED FOR ASU HEADER 5.0
 */

/**
 * Fetches pre-built menu array designed for ASU Header 4.0 (and below) and
 * creates WS2L compatible version with JSON encoding for Preact component
 *
 * @return string
 */
function _asu_brand_create_json()
{
  $defaultMenu = asu_brand_get_site_menu_array(); // Default menu array compatible with WS1
  $ws2Menu = _asu_brand_create_ws2l_menu($defaultMenu); // New menu array compatible with WS2

  return json_encode($ws2Menu); // JSON encoded string of WS2-compatible menu array
}

/**
 * Recursively iterates through entire pre-built menu array and creates new WS2L array
 * with correct array keys and flattening properties for JSON encoding
 *
 * @param array $menu_array - Full (or partial) menu tree for iteration
 */
function _asu_brand_create_ws2l_menu($menu_tree)
{
  $ws2_compat_menu = array(); // Array that holds completed menu with given param $menu_tree and is compatible with WS2 structure
  $tree_length_counter = 0; // Counter for array length (aka number of outermost leaves in tree)

  // Iterate through entire menu with each leaf acting as a subtree
  foreach ($menu_tree as $menu_subtree)
  {
    $ws2_compat_subtree = array(); // Temporary array that holds correct subtree
    $headerFound = false; // Flag that determines if subtree contains a heading (which determines array flattening procedures)
    $flattened_subtree = array(); // Temporary array that holds subtree contents as flattened array of equal depth (instead of as children)

    if (isset($menu_subtree['title'])) // Checks if menu entry has a title
    {
      $ws2_compat_subtree['text'] = $menu_subtree['title']; // Add title to temp array as corresponding entry for WS2 tree structure (i.e. 'text')
    }

    // Checks if menu entry has path and whether path is actually useful (e.g. has actual characters to redirect to)
    if (isset($menu_subtree['path']) && strlen($menu_subtree['path']) > 0)
    {
      $ws2_compat_subtree['href'] = $menu_subtree['path']; // Add link path to temp array as corresponding entry for WS2 tree structure (i.e. 'href')
    }

    // If there is no path, then it is not clickable and therefore acts as a menu heading
    else
    {
      $ws2_compat_subtree['type'] = 'heading'; // Set temp array type as heading to correspond to WS2 tree structure
      $headerFound = true; // Sets flag to true since heading has now been found
    }

    // Checks if menu entry has children which thereby contains other menu entries
    if (isset($menu_subtree['children']))
    {
      if ($headerFound) // Checks if heading was found, which in turn determines if array flattening is necessary
      {
        // Recursive call with menu subtree acting as new subtree to repeat process, which is then stored other temp array to be integrated separately
        $flattened_subtree = _asu_brand_create_ws2l_menu($menu_subtree['children']);
      }

      else // If no heading is found, maps children to correspond to WS2 tree structure
      {
        // Recursive call with menu subtree acting as new subtree to repeat process, which is stored in child array of temp array
        $ws2_compat_subtree['items'][] = _asu_brand_create_ws2l_menu($menu_subtree['children']);
      }
    }

    $ws2_compat_menu[$tree_length_counter] = $ws2_compat_subtree; // Integrates properly mapped child array using counter defined above
    $tree_length_counter++; // Iterate counter


    if ($headerFound) // Checks if header found to being flattened array integration
    {
      foreach ($flattened_subtree as $sibling_entry) // Iterate through flattened array
      {
        $ws2_compat_menu[$tree_length_counter] = $sibling_entry; // Adds flattened array as siblings of menu tree instead of tree
        $tree_length_counter++; // Iterate through counter again to account for new entries
      }
    }
  }

  return $ws2_compat_menu; // Return properly structured menu tree for JSON encoding
 }

/**
 * Global header - validation
 */
function _asu_brand_block_form_validate(&$form, &$form_state) {
  if (!empty($form_state['values']['asu_brand_parent_org_title'])) {
    if ((filter_var($form_state['values']['asu_brand_parent_org_url'], FILTER_VALIDATE_URL) === FALSE)
      || (!valid_url($form_state['values']['asu_brand_parent_org_url']))) {
      form_set_error('asu_brand_parent_org_url', 'The site unit URL is not a valid URL.');
    }
  }
}
