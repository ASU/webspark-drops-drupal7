<?php
/**
 * @file addtocal.module
 * General functions and hook implementations.
 */

/**
 * Implements hook_menu().
 */
function addtocal_menu() {
  $items = array();

  foreach (addtocal_get_addtocal_entities() as $entity_name) {
    $items[$entity_name . '/%entity_object/%/addtocal.ics'] = array(
      'load arguments' => array($entity_name),
      'title' => 'Download Event',
      'page callback' => 'addtocal_download_ics',
      'page arguments' => array(1, 2),
      'access arguments' => array('access content'),
    );
  }

  return $items;
}

/**
 * Returns a list of all eligible entities to use with Add to Cal.
 * @return array
 */
function addtocal_get_addtocal_entities() {
  $entities = field_info_instances();
  $entity_names = array();

  foreach ($entities as $entity_name => $entity) {
    foreach ($entity as $bundle_name => $bundle) {
      foreach ($bundle as $field_name => $field) {
        foreach ($field['display'] as $display_name => $display) {
          if ($display['type'] == 'addtocal_view') {
            if (!in_array($entity_name, $entity_names)) {
              $entity_names[] = $entity_name;
            }
          }
        }
      }
    }
  }

  return $entity_names;
}

/**
 * Implements hook_field_formatter_info().
 */
function addtocal_field_formatter_info() {
  return array(
    'addtocal_view' => array(
      'label' => t('Add to Cal'),
      'field types' => array('date', 'datestamp', 'datetime'),
      'settings' => array(
        'format_type' => 'long',
        'multiple_number' => '',
        'multiple_from' => '',
        'multiple_to' => '',
        'fromto' => 'both',
        'location_field' => -1,
        'description_field' => -1,
        'past_events' => FALSE,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function addtocal_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  switch ($display['type']) {
    case 'addtocal_view':
      $element = array();
      $date_element = date_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);

      if ($date_element) {
        $element[0]['date'] = $date_element[0];

        list($entity_id) = entity_extract_ids($entity_type, $entity);

        $info = addtocal_extract_event_info($entity_type, $entity, $entity_id, $field['field_name']);
        $dates = field_get_items($entity_type, $entity, $field['field_name']);

        $start_date = $dates[(count($dates) - 1)]['value'];

        $ics_url = $entity_type . '/' . $entity_id . '/' . $field['field_name'] . '/addtocal.ics';

        // Check setting for past events and show widget accordingly
        if (strtotime($start_date) >= time() ||
          ($display['settings']['past_events'] == TRUE && strtotime($start_date) < time())) {
          $element[0] += addtocal_render(
            $entity_type,
            $entity_id,
            $info['title'],
            $info['description'],
            $info['location'],
            $info['start'],
            $info['end'],
            $info['url'],
            $ics_url
          );
        }

        return $element;
      }

      break;
  }
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function addtocal_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $bundle_name = $field['bundles'][$instance['entity_type']][0];

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $field_list = field_info_instances($instance['entity_type'], $bundle_name);

  $description_options = $location_options = array('-1' => 'None');

  $location_field_types = array(
    'text_textfield',
    'addressfield_default',
    'addressfield_standard',
  );

  foreach ($field_list as $field) {
    if (in_array($field['widget']['type'], $location_field_types)) {
      $location_options[$field['field_name']] = $field['label'];
    }

    if ($field['widget']['type'] == 'text_textarea' || $field['widget']['type'] == 'text_textarea_with_summary') {
      $description_options[$field['field_name']] = $field['label'];
    }
  }

  $element['location_field'] = array(
    '#title' => t('Location Field:'),
    '#type' => 'select',
    '#options' => $location_options,
    '#default_value' => $settings['location_field'],
    '#description' => 'A field to use as the location for calendar events.',
    '#weight' => 0,
  );

  $element['description_field'] = array(
    '#title' => t('Description Field:'),
    '#type' => 'select',
    '#options' => $description_options,
    '#default_value' => $settings['description_field'],
    '#description' => 'A field to use as the description for calendar events.<br />The contents used from this field will be truncated to 1024 characters.',
    '#weight' => 1,
  );

  $element['past_events'] = array(
    '#title' => t('Show Add to Cal widget for Past Events'),
    '#type' => 'checkbox',
    '#default_value' => $settings['past_events'],
    '#description' => 'Show the widget for past events.',
    '#weight' => 2,
  );

  $element += date_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);

  $element['format_type']['#weight'] = 3;
  $element['fromto']['#weight'] = 4;
  $element['multiple_number']['#weight'] = 5;
  $element['multiple_from']['#weight'] = 6;
  $element['multiple_to']['#weight'] = 7;

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function addtocal_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($settings['location_field'] == -1) {
    $location_output = 'None';
  }
  else {
    $location_output = $settings['location_field'];
  }

  if ($settings['description_field'] == -1) {
    $description_output = 'None';
  }
  else {
    $description_output = $settings['description_field'];
  }

  $location_output = t('Location field: !field', array('!field' => $location_output));
  $description_output = t('Description field: !field', array('!field' => $description_output));

  $output = $location_output . ', ' . $description_output;

  if ($settings['past_events'] == 1) {
    $output .= '<br />' . t('Showing the widget for past events.');
  }

  return $output;
}

/**
 * Return the value of a field
 *
 * @param $entity_type
 * @param $entity
 * @param $field_name
 * @return string
 */
function addtocal_field_get_value($entity_type, $entity, $field_name) {
  if (!empty($field_name)) {
    $value = field_get_items($entity_type, $entity, $field_name);

    $field_info = field_info_field($field_name);

    if ($field_info['type'] == 'addressfield') {
      $address = $value[0];

      $string = '';

      if (!empty($address['thoroughfare'])) $string .= $address['thoroughfare'] . ' ';
      if (!empty($address['premise'])) $string .= $address['premise'] . ', ';
      if (!empty($address['locality'])) $string .= $address['locality'] . ', ';
      if (!empty($address['administrative_area'])) $string .= $address['administrative_area'] . ' ';
      if (!empty($address['postal_code'])) $string .= $address['postal_code'] . ', ';
      if (!empty($address['country'])) $string .= $address['country'];

      $output = $string;
    }
    else {
      //$value = ($value) ? check_plain($value[0]['value']) : '';
      $replace_strings = array(
        '&nbsp;' => '',
        '<br />' => '\n',
        PHP_EOL => '\n',
      );

      $output = $value[0]['value'];

      foreach ($replace_strings as $search => $replace) {
        $output = str_replace($search, $replace, $output);
      }
    }

    return strip_tags($output);
  }
  else {
    return '';
  }
}

/**
 * Return event information in an associative array based on a given entity.
 *
 * @param $entity_type
 * @param $entity
 * @param null $entity_id
 * @param $field_name
 * @return array
 */
function addtocal_extract_event_info($entity_type, $entity, $entity_id = NULL, $field_name) {
  $dates = field_get_items($entity_type, $entity, $field_name);

  $start_date = $dates[0]['value'];

  if (array_key_exists('value2', $dates[0])) {
    $end_date = $dates[0]['value2'];
  } else {
    $end_date = $start_date;
  }

  $entity_info = entity_get_info($entity_type);

  if (empty($entity_info['entity keys']['bundle'])) {
    $bundle = $entity_type;
  }
  else {
    $bundle = $entity->{$entity_info['entity keys']['bundle']};
  }

  $instance = field_info_instance($entity_type, $field_name, $bundle);

  $display = field_get_display($instance, 'default', $entity);

  $location = addtocal_field_get_value($entity_type, $entity, $display['settings']['location_field']);
  $description = addtocal_field_get_value($entity_type, $entity, $display['settings']['description_field']);

  if (strlen($description) > 1024) {
    $description = truncate_utf8($description, 1024, TRUE, TRUE);
  }

  $uri = entity_uri($entity_type, $entity);
  $url = $uri['path'];

  return array(
    'title' => check_plain($entity->title),
    'start' => $start_date,
    'end' => $end_date,
    'location' => $location,
    'description' => $description,
    'entity_id' => $entity_id,
    'entity_type' => $entity_type,
    'url' => $url,
  );
}

/**
 * Generate a render array for the addtocal widget.
 *
 * @param $label
 * @param $description
 * @param $location
 * @param $start_date
 * @param $end_date
 * @param $url
 * @param $ics_url
 * @return array
 */
function addtocal_render($entity_type, $entity_id, $label, $description, $location, $start_date, $end_date, $url, $ics_url) {
  $rfc_dates = addtocal_rfc_3339_date($start_date, $end_date);

  $google_url = url('http://www.google.com/calendar/event', array(
    'query' => array(
      'action' => 'TEMPLATE',
      'text' => $label,
      'dates' => $rfc_dates['both'],
      'sprop' => 'website:' . $_SERVER['HTTP_HOST'],
      'location' => $location,
      'details' => $description,
      'website' => url($url, array('absolute' => TRUE))
    ),
  ));

  $yahoo_url = url('http://calendar.yahoo.com/', array(
    'query' => array(
      'v' => 60,
      'TITLE' => $label,
      'ST' => $rfc_dates['local_start'],
      'DUR' => $rfc_dates['duration'],
      'URL' => $_SERVER['HTTP_HOST'],
      'in_loc' => $location,
    ),
  ));

  $element_id = 'addtocal_' . $entity_type . '_' . $entity_id;

  return array(
    'button' => array(
      '#markup' => t('Add to Calendar'),
      '#prefix' => '<div class="addtocal" id="' . $element_id . '">',
      '#suffix' => '</div>',
      '#weight' => 1,
    ),
    'menu' => array(
      '#weight' => 2,
      '#theme' => 'item_list',
      '#items' => array(
        l(t('iCalendar'), $ics_url),
        l(t('Outlook'), $ics_url),
        l(t('Google'), $google_url, array('attributes' => array('target' => '_blank'))),
        l(t('Yahoo'), $yahoo_url, array('attributes' => array('target' => '_blank'))),
      ),
      '#type' => 'ul',
      '#attributes' => array(
        'id' => $element_id . '_menu',
        'class' => array('addtocal_menu'),
      ),
      '#attached' => array(
        'js' => array(
          drupal_get_path('module', 'addtocal') . '/addtocal.js',
        ),
        'css' => array(
          drupal_get_path('module', 'addtocal') . '/addtocal.css',
        ),
      ),
    )
  );
}

/**
 * Returns an array containing RFC 3339 formatted start and end dates.
 *
 * @param $start
 *   Start date
 * @param $end
 *   End date
 *
 * @return array
 */
function addtocal_rfc_3339_date($start, $end) {
  if (!$end) {
    $end = $start;
  }

  $start_timestamp = strtotime($start . 'UTC');
  $end_timestamp = strtotime($end . 'UTC');

  $diff_timestamp = $end_timestamp - $start_timestamp;

  $start_date = gmdate('Ymd', $start_timestamp) . 'T' . gmdate('His', $start_timestamp) . '';
  $local_start_date = date('Ymd', $start_timestamp) . 'T' . date('His', $start_timestamp) . '';
  $end_date = gmdate('Ymd', $end_timestamp) . 'T' . gmdate('His', $end_timestamp) . '';
  $local_end_date = date('Ymd', $end_timestamp) . 'T' . date('His', $end_timestamp) . '';

  $diff_hours = str_pad(round(($diff_timestamp / 60) / 60), 2, '0', STR_PAD_LEFT);
  $diff_minutes = str_pad(abs(round($diff_timestamp / 60) - ($diff_hours * 60)), 2, '0', STR_PAD_LEFT);

  $duration = $diff_hours . $diff_minutes;

  return array(
    'start' => $start_date,
    'end' => $end_date,
    'both' => $start_date . '/' . $end_date,
    'local_start' => $local_start_date,
    'local_end' => $local_end_date,
    'duration' => $duration,
  );
}

/**
 * Outputs an ICS file containing event information for the selected entity.
 * Called by hook_menu.
 *
 * @param $entity
 * @param $field_name
 */
function addtocal_download_ics($entity, $field_name) {
  drupal_add_http_header('Content-Type', 'application/calendar; charset=utf-8');

  // Get entity type from the current path
  $entity_type = arg(0);

  list($entity_id) = entity_extract_ids($entity_type, $entity);
  $info = addtocal_extract_event_info($entity_type, $entity, $entity_id, $field_name);

  $rfc_dates = addtocal_rfc_3339_date($info['start'], $info['end']);

  // Set the filename.
  $filename = preg_replace('/[\x00-\x1F]/u', '_', strip_tags($entity->title));
  drupal_add_http_header('Content-Disposition', 'attachment; filename="' . $filename . '.ics"');

  echo 'BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//hacksw/handcal//NONSGML v1.0//EN
BEGIN:VEVENT
UID:' . $entity_type . '-' . $entity_id . '@' . $_SERVER['HTTP_HOST'] . '
DTSTAMP:' . $rfc_dates['start'] . '
DTSTART:' . $rfc_dates['start'] . '
DTEND:' . $rfc_dates['end'] . '
SUMMARY:' . $info['title'] . '
DESCRIPTION: ' . $info['description'] . ' - ' . url($info['url'], array('absolute' => TRUE)) . '
LOCATION:' . $info['location'] . '
END:VEVENT
END:VCALENDAR';

  exit();
}
