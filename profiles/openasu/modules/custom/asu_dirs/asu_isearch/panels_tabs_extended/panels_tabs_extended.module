<?php

/**
 * @file
 * Show panel panes in a region as tabs.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function panels_tabs_extended_ctools_plugin_directory($module, $plugin) {
  if ($module == 'panels' && $plugin == 'styles') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_panels_pane_content_alter().
 *
 * Hold the title of the pane for later use (i.e. show it as the tab's title),
 * and remove it form the pane itself.
 */
function panels_tabs_extended_panels_pane_content_alter(&$content, $pane, $args, $context, $renderer, $display) {
  // Get the regions that should be themed as tabs.
  foreach ($display->panel_settings as $key => $values) {
    if ($key == 'style_settings') {
      continue;
    }
    if ((is_array($values) && !empty($values['style']) && $values['style'] == 'tabs-extended' && $pane->panel == $key) || ($key === 'style' && $values === 'tabs-extended')) {
      if (isset($content->content['#bundle']) && $content->content['#bundle'] == 'panel_tabs_extended_tab' && !empty($content->title)) {
        // Capture the title.
        panels_tabs_extended_pane_titles($display->did, $pane->pid, $content->title);
        // Remove it form the pane.
        $content->title = '';
      }
    }
  }

}

/**
 * Get or set pane title.
 *
 * @param $did
 *   Panels display ID.
 * @param $pid
 *   Panels pane ID.
 * @param $title
 *   Optional; Panels pane title to set, or if empty then the function will
 *   return the captured title based on the display ID and pane ID properties.
 *
 * @return
 *   Unsanitized pane title, or NULL if doesn't exist.
 */
function panels_tabs_extended_pane_titles($did = NULL, $pid = NULL, $title = NULL) {
  $cache = &drupal_static(__FUNCTION__, array());
  if (!isset($title)) {
    return isset($cache[$did][$pid]) ? $cache[$did][$pid] : NULL;
  }
  $cache[$did][$pid] = $title;
  return $title;
}

/**
 * Get or set pane title.
 *
 * @param $did
 *   Panels display ID.
 * @param $pid
 *   Panels pane ID.
 * @param $title
 *   Optional; Panels pane title to set, or if empty then the function will
 *   return the captured title based on the display ID and pane ID properties.
 *
 * @return
 *   Unsanitized pane title, or NULL if doesn't exist.
 */
function panels_tabs_extended_pane_get_tabs() {
  $cache = &drupal_static('panels_tabs_extended_pane_titles', array());
  return current($cache);
}


/**
 * Implementation of hook_entity_info_alter().
 */
function panels_tabs_extended_entity_info_alter(&$entity_info) {

  // Add panel pane
  $entity_info['fieldable_panels_pane']['bundles']['panel_tabs_extended_tab'] = array(
    'label' => t('Add tab pane'),
    'description' => t('Add a tab pane. Panes added below this panel will be included in this tab pane until another tab is defined.'),
    'pane category' => t('Custom'),
    'pane top level' => TRUE,
    'pane icon' => drupal_get_path('module', 'panels_tabs_extended') . '/images/icon_panel_tabs_extended_tab.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/panel-tabs-extended',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );
}

/**
 * Implements hook_preprocess_fieldable_panels_pane().
 */
function panels_tabs_extended_preprocess_fieldable_panels_pane(&$variables) {
  if ($variables['elements']['#bundle'] === 'panel_tabs_extended_tab') {
    $title = $variables['elements']['#fieldable_panels_pane']->title;
    $variables['elements']['title'] = array(
      '#theme' => 'html_tag',
      '#tag' => 'h2',
      '#value' => $title
    );
  }
}

/**
 * Implements hook_preprocess_panels_pane().
 */
function panels_tabs_extended_preprocess_panels_pane(&$variables) {
  if (isset($variables['content']['#bundle']) && $variables['content']['#bundle'] === 'panel_tabs_extended_tab') {
    $variables['title'] = '';
  }
}

/**
 * Implements hook_theme().
 */
function panels_tabs_extended_theme() {
  return array(
    'fieldable_panels_pane__panels_tabs_extended' => array(
      'template' => 'templates/fieldable-panels-pane--panels_tabs_extended',
      'render element' => 'elements',
      'type' => 'module'
    )
  );
}



