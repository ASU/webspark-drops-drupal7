<?php
/**
 * @file
 * Code for the ASU Academic Programs Feature feature.
 */

include_once 'asu_ap_feature.features.inc';


/**
 * Implements hook_form_FORM_ID_alter().
 */
function asu_ap_feature_form_asu_ap_node_form_alter(&$form, &$form_state) {
  $form['#attach']['css'][] = drupal_get_path('module', 'asu_ap_feature')
    . 'css/form.css';
  // Hide fields based on undergrad vs graduate degrees
  if ($form['field_asu_ap_program']['und'][0]['value']['#default_value'] == 'undergrad') {
    $form['field_asu_ap_grad_app']['#access'] = FALSE;
    $form['field_asu_ap_grad_financing']['#access'] = FALSE;
    $form['field_asu_ap_grad_desc_video']['#access'] = FALSE;
    $form['field_asu_ap_grad_text_area']['#access'] = FALSE;
    if (($form['field_asu_ap']['und'][0]['value']['#default_value'] == 'Minor') || ($form['field_asu_ap']['und'][0]['value']['#default_value'] == 'Certificate')) {
      $form['field_asu_ap_career_outlook']['#access'] = FALSE;
      $form['field_asu_ap_ex_car_tf']['#access'] = FALSE;
    }
  } elseif ($form['field_asu_ap_program']['und'][0]['value']['#default_value'] == 'graduate') {
    $form['field_asu_ap_addl_req']['#access'] = FALSE;
    $form['field_asu_ap_sl']['#access'] = FALSE;
    $form['field_asu_ap_wue_available']['#access'] = FALSE;
    $form['field_asu_ap_career_outlook']['#access'] = FALSE;
    $form['field_asu_ap_ex_car_tf']['#access'] = FALSE;
  }
  // Hide ASU AP node edit fields from Degree search
  $form['#after_build'][] = 'asu_ap_feature_form_asu_ap_node_form_after_build';
}

/**
 * Hide ASU AP node edit fields from Degree search
 */
function asu_ap_feature_form_asu_ap_node_form_after_build(&$form, &$form_state) {
  if (variable_get('asu_ap_hide_ds_fields') === 1) {
    // Hide irrelavant fields and field_group(s) on ASU Academic Programs node edit form
    /*
    foreach ($form['#group_children'] as $field_name => $group) {
      if ($group === 'group_asu_ap_grp_hidden' || $group === 'group_asu_ap_special_category') {
        $form[$field_name]['#access'] = FALSE;
      }
    }
    */
    field_group_hide_field_groups($form, array('group_asu_ap_grp_hidden', 'group_asu_ap_special_category'));
    $form['ds_warning_text'] = array(
      '#weight' => '8',
      '#markup' => '<div class="messages warning asu-ap-ds-error">'
        . ' Fields whose content is managed by (and '
        . ' may be periodically overwritten by updated degree information from)'
        . ' Degree Search data have been hidden.'
        . ' See <a href="/admin/config/asu_ap/settings">ASU AP settings</a> for more information.</div>',
    );
  } else {
    $form['ds_warning_text'] = array(
      '#weight' => '8',
      '#markup' => '<div class="messages error asu-ap-ds-error">'
        . '<strong>WARNING</strong>:'
        . ' The degree information stored below was originally pulled in from'
        . ' the same data source that Degree Search uses to create their degree pages.'
        . ' Future updates to Degree Search pages may also be pulled in, overwriting'
        . ' the current text below.'
        . ' <br><br>Therefore, please refrain from making and saving any edits below.'
        . ' They will ultimately be overwritten and lost.'
        . ' <br><br> If any information below does need to be changed, please work with'
        . ' those in your unit who are involved with any degree-related catalog updates.'
        . ' They will work with the Provost\'s Office to get any updates applied'
        . ' in Degree Search - after which they can be easily synced here with'
        . ' with a single click import.</div>',
    );
  }
  return $form;
}

/**
 * Implements hook_field_default_field_instances_alter().
 *
 * Set the default image.
 */
function asu_ap_feature_field_default_field_instances_alter(&$fields) {
  if (isset($fields['node-asu_ap-field_asu_banner_image']['settings']['default_image'])) {
    $fields['node-asu_ap-field_asu_banner_image']['settings']['default_image'] = variable_get('asu_ap_feature_banner_fid');
  }
  if (isset($fields['node-asu_ap-field_degree_image']['settings']['default_image'])) {
    $fields['node-asu_ap-field_degree_image']['settings']['default_image'] = variable_get('asu_ap_feature_image_fid');
  }
}

/**
 * Grab image within the Feature module and copy image over to files directory.
 *
 * @param string $filename - Name of new default file.
 * @param string $type - 'banner' or 'image'
 * @throws \FieldException
 */
function _asu_ap_feature_image($filename, $type) {
  $origfile = drupal_get_path('module', 'asu_ap_feature') . '/images/' . $filename;
  $uri = 'public://' . $filename;
  $file = (object) array(
    'uid' => 1,
    'filename' => $filename,
    'uri' => $origfile,
    'filemime' => 'image/jpg',
    'filesize' => filesize($origfile),
    'status' => FILE_STATUS_PERMANENT,
  );
  $file = file_copy($file, $uri, FILE_EXISTS_REPLACE);
  variable_set('asu_ap_feature_' . $type . '_fid', $file->fid);
  variable_set('asu_ap_degree_image_filename', $filename);

  // Update ASU AP field instance of field_degree_image settings
  $instance = field_info_instance('node', 'field_degree_image', 'asu_ap');
  if (isset($instance['settings']['default_image'])) {
    $instance['settings']['default_image'] = (int) $file->fid;
    field_update_instance($instance);
  } else {
    flogger('asu_ap_feature', 'Default degree image file setting could not be found.', array());
  }

  // Update global field settings
  $field = field_info_field('field_degree_image');
  if (isset($field['settings']['default_image'])) {
    $field['settings']['default_image'] = (int) $file->fid;
    field_update_field($field);
  } else {
    flogger('asu_ap_feature', 'Default degree image instance setting could not be found.', array());
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * This modules needs to run it's implementation of hook_features_export_alter
 * after the field_group module has run it's own implementation. To do this,
 * we alter the order of implementors for hook_features_export_alter and move
 * this module into last place.
 */
function asu_ap_feature_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'features_export_alter') {
    $movetolast = $implementations['field_group_features_fix'];
    unset($implementations['field_group_features_fix']);
    $implementations['field_group_features_fix'] = $movetolast;
  }
}
/**
 * Implements hook_features_export_alter().
 *
 * ctools needs to tbe told that field_group exists so
 * it can export the right code into .info and .features.inc
 * files. This function checks to see if the current feature
 * export is using field_groups and if yes it adds info about
 * field_group for ctools to read.
 *
 * In other modules (ex. strongarm) hook_features_export
 * is used instead of hook_features_export_alter and that somehow
 * circumvents the need for this fix.
 */
function asu_ap_feature_features_export_alter(&$export, $module_name) {
  if (!empty($export['features']['field_group']) || !empty($export['features']['dependencies']['field_group']) ) {
    $identifier = "field_group:field_group:1";
    $export['features']['ctools'][$identifier] = $identifier;
  }
}

/**
 * Generate Major/Minor Map URLs
 *
 * @param array $node_info - node information from theme TPL
 * @param string $cert_val
 * @return string
 */
function _asu_ap_feature_map_urls_create($node_info, $cert_val = 'false') {
  $map_type = ($cert_val === 'true') ? 'Minor' : 'Major';
  $major_map_urls = array();
  $major_map_url = $node_info['field_asu_ap_major_map_url']['#items'][0]['url'];
  if (valid_url($major_map_url, TRUE)) {
    if (isset($node_info['field_asu_ap_major_map_year']['#items'][0]['safe_value'])) {
      $year = (int)$node_info['field_asu_ap_major_map_year']['#items'][0]['safe_value'];
      $year_prefix = ((int)$year < 2100 && $year > 1999) ? $year . ' - ' . (++$year) . ' ' : '';
    } else {
      $year_prefix = '';
    }
    $major_map_urls[] = l(t($year_prefix . $map_type . ' Map (On-campus)'), $major_map_url,
      array('attributes' => array('target' => '_blank')));
  }
  if (isset($node_info['field_asu_ap_online_mm_url']['#items'][0]['url'])) {
    $online_url = $node_info['field_asu_ap_online_mm_url']['#items'][0]['url'];
    if (valid_url($online_url, TRUE)) {
      $major_map_urls[] = l(t($year_prefix . $map_type . ' Map (Online)'), $online_url,
        array('attributes' => array('target' => '_blank')));
    }
  }
  return theme_item_list(array(
    'items' => $major_map_urls,
    'title' => '',
    'type' => 'ul',
    'attributes' => array('class' => array('asu-ap-major-map-links'))));
}
