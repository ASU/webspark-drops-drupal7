<?php
/**
 * @file
 * Code for the ASU CAS and More feature.
 */

include_once 'asu_cas.features.inc';

define('ASU_CAS_USERNAME_LABEL', 'ASURITE User ID');

/**
 * Implements hook_boot()
 */
function asu_cas_boot() {
  global $install_state;
  if (!$install_state) {
    if (isset($_SERVER['PANTHEON_ENVIRONMENT'])) {
      if (!isset($_SERVER['HTTP_X_SSL']) || $_SERVER['HTTP_X_SSL'] != 'ON') {
        header('HTTP/1.0 301 Moved Permanently');
        header('Location: https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);
        exit();
      }
    }
  }
}

/**
 * Implememtation of hook_system_info_alter()
 *
 * This is designed to update the subtheme from openasu_bootstrap to
 * asu_webspark_bootstrap as part of the 1.0 release.
 */
function asu_cas_system_info_alter(&$info, $file, $type) {
  if ($type == 'theme' && isset($info['base theme']) && $info['base theme'] == 'openasu_bootstrap') {
    $info['base theme'] = 'asu_webspark_bootstrap';
  }
}

/**
 * Implementation of hook_libraries_info_alter()
 *
 * This is designed to make sure that if a subtheme has been created before
 * Kalatheme 1.4 that we are connecting it to the default ASU Bootstrap
 * library. We also want to make sure that the user doesn't actually have a
 * correct Bootstrap library already set up for their subtheme.
 *
 */
function asu_cas_libraries_info_alter(&$libraries) {
  global $theme_info;
  if (isset($theme_info->name) && isset($theme_info->base_theme)) {
    $library_path = DRUPAL_ROOT . '/sites/all/libraries/' . $theme_info->name . '_bootstrap/css/bootstrap.css';
    if ($theme_info->name != 'asu_webspark_bootstrap' && $theme_info->base_theme == 'asu_webspark_bootstrap' && !file_exists($library_path)) {
      $libraries[$theme_info->name . '_bootstrap']['machine name'] = 'asu_webspark_bootstrap_bootstrap';
    }
  }
}

/**
 * Implementation of hook_init()
 *
 * This and the image styles should really be in another feature at some point
 *
 */
function asu_cas_init() {

  // Adding the asu images css file to the theme so it will show up in the WYSIWYG
  drupal_add_css(drupal_get_path('module', 'asu_cas') . '/asu_cas.css', array('group' => CSS_THEME));
}

/**
 * Implements hook_filter_default_formats_alter()
 *
 * THIS REALLY SHOULD BE IN ITS OWN MODULE BUT IM PUTTING IT HERE FOR NOW
 */
if (!function_exists('panopoly_wysiwyg_filter_default_formats_alter')) {
  function panopoly_wysiwyg_filter_default_formats_alter(&$data) {
    // This allows users to enter in more then one extra line
    if (isset($data['panopoly_wysiwyg_text'])) {
      $data['panopoly_wysiwyg_text']['filters']['wysiwyg']['settings']['valid_elements'] .= ',#p';
    }
  }
}

/**
 * Implements hook_update_projects_alter()
 *
 * This function will remove any module managed by ASU WebSpark from
 * the list of modules in the Drupal Update Manager.
 */
function asu_cas_update_projects_alter(&$projects) {
  // Setup information about managed components to remove from the update managed
  $managed_things = array();
  $managed_things[] = 'kalatheme'; // adding base theme
  $managed_things[] = 'asu_webspark_bootstrap'; // adding base theme
  $managed_things[] = 'innovation';
  // Determine any dependencies to components manged by the distribution
  $profile_info = install_profile_info('openasu');
  foreach ($profile_info['dependencies'] as $module) {
    $managed_things[] = $module;
    $module_info = drupal_parse_info_file(drupal_get_path('module', $module) . '/' . $module . '.info');
    if (!empty($module_info['dependencies'])) {
      foreach ($module_info['dependencies'] as $dependency) {
        $parts = explode(' (', $dependency, 2);
        $managed_things[] = array_shift($parts);
      }
    }
  }

  // Remove modules and themes managed by distribution
  foreach($managed_things as $managed_module) {
    unset($projects[$managed_module]);
  }
}

/**
 * Implements hook_update_status_alter()
 *
 * This function will remove any module managed by ASU WebSpark from
 * the list of modules in the Drupal Update Manager.
 */
function asu_cas_update_status_alter(&$projects) {
  // Don't want to unset this in hook_update_projects_later as per
  // https://drupal.org/node/1875386
  // But we do want to make sure the user isn't aware of updates through the GUI
  // so we mark as always up to date.
  foreach ($projects as $project_name => $project_info) {
    if ($project_name == 'drupal') {
      $projects[$project_name]['status'] = UPDATE_CURRENT;
      $projects[$project_name]['reason'] = t('Drupal core is managed by WebSpark. Do not update manually.');
    }
  }
}

/*
 * Implements hook_menu_alter()
 */
function asu_cas_menu_alter(&$items) {
  $items['admin/people/cas/create']['title'] =  'Add ASURITE User';
  $items['user/%user/cas']['access callback'] = FALSE;
}

/*
 * Implements hook_form_id_form_alter()
 */
 function asu_cas_form_cas_add_user_form_alter(&$form, &$form_state) {
   $form['account']['cas_name']['#title'] = ASU_CAS_USERNAME_LABEL;
   $form['account']['cas_name']['#description'] = t("Registration will proceed as if the user with the specified @label just logged in.",  array('@label' => ASU_CAS_USERNAME_LABEL));
 }


function asu_cas_form_user_register_form_alter(&$form, &$form_state) {
  if (user_access('administer users')) {
    $form['account']['cas_name']['#title'] = ASU_CAS_USERNAME_LABEL;
    $form['account']['cas_name']['#description'] = 'If necessary, additional ASURITE User IDs can be added after the account is created.';
  }
}

function asu_cas_form_cas_user_add_alter(&$form, &$form_state) {
  $form['cas_name']['#title'] = ASU_CAS_USERNAME_LABEL;
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t("Add an @label", array('@label' => ASU_CAS_USERNAME_LABEL)));
}

function asu_cas_form_user_profile_form_alter(&$form, &$form_state) {
  if (user_access('administer users')) {
    $form['account']['cas_name']['#title'] = ASU_CAS_USERNAME_LABEL;
    $form['account']['cas_name']['#description'] = '';
  }
}
