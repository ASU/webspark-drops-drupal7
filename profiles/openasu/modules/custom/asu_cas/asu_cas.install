<?php


/**
 * Implements hook_enable()
 * Ensures ASU CAS and More module is last
 */
function asu_cas_enable() {
  db_query("UPDATE {system} SET weight = 1 WHERE name = 'asu_cas'");
}

/**
 * Implements hook_update_N();
 *
 * Updating the WebSpark Default Theme from "OpenASU Bootstrap"
 * to "ASU WebSpark Bootstrap".
 */
function asu_cas_update_7000(&$sandbox) {

  // If they are running the old theme, update them.
  $oldtheme = 'openasu_bootstrap';
  if (variable_get('theme_default') == $oldtheme) {

    // Update the Current ASU Theme
    $basetheme = 'kalatheme';
    $theme = 'asu_webspark_bootstrap';
    system_rebuild_theme_data();
    drupal_theme_rebuild();
    theme_enable(array($basetheme));
    theme_enable(array($theme));
    variable_set('theme_default', $theme);

    // Move old Kalacustomize data to Kalatheme 3
    $result = db_query('SELECT pid, style FROM {panels_pane}')->fetchAll();
    // Default Kalatheme 3 settings and mappings
    $devices = array(
      'hidden-xs' => 0,
      'hidden-sm' => 0,
      'hidden-md' => 0,
      'hidden-lg' => 0,
    );
    $pane_style = array(
      'well' => 0,
      'pull-left' => 0,
      'pull-right' => 0,
      'clearfix' => 0,
      'jumbotron' => 0,
    );
    $device_mapping = array(
      'Phone' => 'hidden-xs',
      'Tablet' => 'hidden-sm',
      'Desktop' => 'hidden-md',
    );
    // Do the updates
    if (!empty($result)) {
      foreach ($result as $record) {
        // Unserialize db data
        $old_styles = unserialize($record->style);
        if ($old_styles['style'] == 'kalacustomize') {
          $new_styles = $old_styles;
          // Build new styles default data
          $new_styles['settings']['devices'] = $devices;
          $new_styles['settings']['pane_style'] = $pane_style;
          // Update old device visibility settings
          foreach ($old_styles['settings']['devices'] as $device => $status) {
            if ($status !== 0) {
              $new_styles['settings']['devices'][$device_mapping[$device]] = $device_mapping[$device];
            }
          }
          // Update old pane style settings
          $old_pane_style = $old_styles['settings']['pane_style'];
          if ($old_pane_style == 'hero-unit') {
            $new_styles['settings']['pane_style']['jumbotron'] = 'jumbotron';
          }
          else {
            $new_styles['settings']['pane_style'][$old_pane_style] = $old_pane_style;
          }
          // Serialize new data and write to DB
          $new_styles = serialize($new_styles);
          db_update('panels_pane')
            ->fields(array(
              'style' => $new_styles
            ))
            ->condition('pid', $record->pid)
            ->execute();
        }
      }
    }

    // Update the Theme Settings
    $old_settings = variable_get('theme_openasu_bootstrap_settings', array());
    $new_settings = variable_get('theme_asu_webspark_bootstrap_settings', array());
    $merged_settings = array_merge($old_settings, $new_settings);
    variable_set('theme_asu_webspark_bootstrap_settings', $merged_settings);
  }

  return t('Updated to Latest and Greatest Theme. Migrated settings.');
}

/**
 * Implements hook_update_N()
 * Making sure the new responsive ASU header is being updated from older
 * versions
 */
function asu_cas_update_7001(&$sandbox) {

  // If they are running the old header
  if (variable_get('theme_default') == 'innovation') {
    variable_set('asu_brand_header_version', '4.4');
  }

  return t('New responsive header set.');
}

/**
 * + Increase module weight in system table
 * + Change default successful login message
 */
function asu_cas_update_7002(&$sandbox) {
  db_query("UPDATE {system} SET weight = 1 WHERE name = 'asu_cas'");
}

/**
 * Implements hook_update_N
 * + Add missing permissions to features - WEBSPARK-393, WEBSPARK-462
 */
function asu_cas_update_7003(&$sandbox) {
  if (module_exists('webspark_banner')) {
    user_role_grant_permissions('3', array(
      'create fieldable banner',
      'edit fieldable banner',
      'delete fieldable banner',
    ));
    user_role_grant_permissions('4', array(
      'create fieldable banner',
      'edit fieldable banner',
      'delete fieldable banner',
    ));
  }
  if (module_exists('webspark_content_callout')) {
    user_role_grant_permissions('3', array(
      'administer panelizer node content_callout defaults', // administrator only
      'create content_callout content',
      'delete any content_callout content',
      'delete own content_callout content',
      'edit any content_callout content',
      'edit own content_callout content',
    ));
    user_role_grant_permissions('4', array(
      'create content_callout content',
      'delete any content_callout content',
      'delete own content_callout content',
      'edit any content_callout content',
      'edit own content_callout content',
    ));
  }
  if (module_exists('webspark_hero')) {
    user_role_grant_permissions('4', array(
      'create fieldable hero',
      'edit fieldable hero',
      'delete fieldable hero',
    ));
  }
  if (module_exists('webspark_jumbohero')) {
    user_role_grant_permissions('3', array(
      'create fieldable jumbohero',
      'edit fieldable jumbohero',
      'delete fieldable jumbohero',
    ));
    user_role_grant_permissions('4', array(
      'create fieldable jumbohero',
      'edit fieldable jumbohero',
      'delete fieldable jumbohero',
    ));
  }
}

/**
 * Implements hook_update_N()
 * + Remove perms from CAS role and add them to adminisrator role  - WEBSPARK-470
 * + Add perms for Add ASU Spotlight perms
 * + Add admin theme, create files perms to editor role
 */
function asu_cas_update_7004(&$sandbox) {
  $cas_role = user_role_load_by_name('CAS')->rid;
  $admin_role = user_role_load_by_name('administrator')->rid;
  $editor_role = user_role_load_by_name('editor')->rid;
  if (is_numeric($cas_role) && is_numeric($admin_role) && is_numeric($editor_role)) {
    $roles = array($cas_role => 'CAS');
    $permissions = user_role_permissions($roles);
    if (is_array($permissions[$cas_role]) && !empty($permissions[$cas_role])) {
      $cas_perms = array_keys($permissions[$cas_role]);
      user_role_revoke_permissions($cas_role, $cas_perms); // CAS role revoke
      watchdog('user', 'CAS permissions revoked by asu_cas_update_7004 - ' . implode(',', $cas_perms));
      user_role_grant_permissions($admin_role, $cas_perms); // admin role grant
    }
    else {
      // do nothing
    }
    // update ASU spotlight perms
    if (module_exists('asu_spotlight')) {
      user_role_grant_permissions($admin_role, array(
        'create fieldable asu_spotlight',
        'edit fieldable asu_spotlight',
        'delete fieldable asu_spotlight',
      ));
      user_role_grant_permissions($editor_role, array(
        'create fieldable asu_spotlight',
        'edit fieldable asu_spotlight',
        'delete fieldable asu_spotlight',
      ));
    }
    // Add administrator theme to editor
    user_role_grant_permissions($editor_role, array(
      'view the administration theme',
      'create files',
    ));
  }
}

/**
 * Implements hook_update_N()
 * + Set administrative theme to Webspark Seven IF Seven theme is the current
 * admin theme.
 */
function asu_cas_update_7005(&$sandbox) {
  if (variable_get('admin_theme') === 'seven') {
    variable_set('admin_theme', 'webspark_seven');
  }
}

/**
 * Implements hook_update_N()
 * + Enables Webspark EasyAdmin module
 */
function asu_cas_update_7006(&$sandbox) {
  if (!module_exists('webspark_easyadmin')) {
    module_enable(array('webspark_easyadmin'));
  }
}

/**
 * Implements hook_update_N()
 * + Enables Webspark Featurescustom
 * + NOTE: Future Webspark DB updates will come in webspark_featurescustom
 */
function asu_cas_update_7007(&$sandbox) {
  if (!module_exists('webspark_featurescustom')) {
    module_enable(array('webspark_featurescustom'));
  }
  else {
    db_update('system')
      ->fields(array(
        'weight' => '2'
      ))
      ->condition('name', 'webspark_featurescustom')
      ->execute();
  }
}

/**
 * Implements hook_update_N()
 * - Set Certificate Authority PEM Certificate field
 */
function asu_cas_update_7008(&$sandbox) {
  if (module_exists('cas')) {
    // List of possible crt files taken from
    // https://github.com/guzzle/guzzle/blob/4a11aba4d5cb7d45d51027f54a506d1a0df4daee/src/functions.php#L160
    static $ca_files = array(
      // Red Hat, CentOS, Fedora (provided by the ca-certificates package)
      '/etc/pki/tls/certs/ca-bundle.crt',
      // Ubuntu, Debian (provided by the ca-certificates package)
      '/etc/ssl/certs/ca-certificates.crt',
      // FreeBSD (provided by the ca_root_nss package)
      '/usr/local/share/certs/ca-root-nss.crt',
      // SLES 12 (provided by the ca-certificates package)
      '/var/lib/ca-certificates/ca-bundle.pem',
      // OS X provided by homebrew (using the default path)
      '/usr/local/etc/openssl/cert.pem',
      // Google app engine
      '/etc/ca-certificates.crt',
      // Windows?
      'C:\\windows\\system32\\curl-ca-bundle.crt',
      'C:\\windows\\curl-ca-bundle.crt',
    );

    $message = '';
    $cert = variable_get('cas_cert', '');
    if (empty($cert)) {
      foreach($ca_files as $ca_file) {
        if (file_exists($ca_file)) {
          variable_set('cas_cert', $ca_file);
          $message = t('The location of the Certificate Authority PEM Certificate for the
              CAS module has been set to :cert at /admin/config/people/cas
              for improved security. ', array(':cert' => $ca_file)
          );
          break 1;
        }
        else {
          $message = t('The location of the Certificate Authority PEM Certificate on your
             web server was not found amongst the usual common locations for it. Please
             contact your server administrator for assistance with finding that certificate
             for the CAS module and set it manually at /admin/config/people/cas.');
        }
      }
    }
    else {
      // No Certificate Authority PEM Certificate changes.
      $message = t('The Certificate Authority PEM Certificate location for the CAS module
         was already set to :cert at /admin/config/people/cas, so no action was taken.',
        array(':cert' => $cert));
    }
    drupal_set_message($message, 'status');
    watchdog('asu_cas', $message, WATCHDOG_NOTICE);
  }
}