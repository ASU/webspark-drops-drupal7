<?php

/**
 * ASU Get GDPR Markup - Creates simple HTML to append to end of all RFI forms to ensure GDPR compliance
 *
 * @return string - HTML containing all pertinent information and resources pertaining to GDPR
 */
function asu_libs_get_gdpr_markup() {
  return "\n<div>
        <h5>By completing and submitting your information to ASU, you consent to:</h5>
        <ol class='gdpr-list'>
            <li>ASU using this information to contact you regarding information as you requested</li>
            <li>The terms of <a class='gdpr-link' href='https://www.asu.edu/privacy/#asu-privacy-general'>ASU's Privacy Statement</a></li>
            <li>If you are in the European Union or another country or state that has adopted the GDPR
            (General Data Protection Regulation) or similar privacy protection, please also read the
            <a class='gdpr-link' href='https://www.asu.edu/privacy/#european-union-supplement'>ASU European Supplement to ASU's Privacy Statement</a>
            </li>
        </ol>
    </div>\n";
}

/**
 * Validation - ZIP Codes
 *
 * @param string $country - Human-readable name
 * @param integer $zip - ZIP Code
 * @param boolean $us_long_allowed - Accept XXXXX-XXXX digit codes for the United States. Defaults to FALSE.
 * @param string $zip_field_name - Drupal Form API key for this field. Defaults to 'zipcode'.
 */
function asu_libs_validate_zipcode($country, $zip, $us_long_allowed = FALSE, $zip_field_name = 'zipcode') {
  if ($country == "United States") {
    if ((strlen($zip) < 5)) {
      form_set_error($zip_field_name, t('Domestic postal/ZIP codes cannot be less than 5 digits.'));
    }
    $zip_pattern = ($us_long_allowed === TRUE) ? '/^\d{5}(-\d{4})?$/' : '/^\d{5}$/';
    $zip_pattern_error = ($us_long_allowed === TRUE) ? ' (or 12345-6789)' : '';
    if (!preg_match($zip_pattern, $zip)) {
      form_set_error($zip_field_name, t('US Postal/ZIP codes may only be formatted like 12345' . $zip_pattern_error . '.'));
    }
  } else {
    if (!preg_match("/^[a-zA-Z0-9\s-]+$/", $zip)) {
      form_set_error($zip_field_name, t('Postal code is not valid (contains invalid characters - numbers, letters, or dashes only)'));
    }
    if ((strlen($zip) < 4)) {
      form_set_error($zip_field_name, t('International postal codes cannot be less than 4 characters.'));
    }
    if (strlen($zip) > 20) {
      form_set_error($zip_field_name, t('International postal codes cannot be longer than 20 characters.'));
    }
  }
}

/**
 * Validation - Birthdate
 * @param string $birthdate - Formatted birthday m(required_delimiter)d(required_delimiter)yyyy
 * @param string $birth_field_name - Drupal Form API key for birth date field. Defaults to 'birthdate'.
 * @param string $required_delimiter - Use when a non-slash delimiter is required. Only options are the dot ., or dash (-). Defaults to slash.
 * @param boolean $leading_zeroes - Require zeroes in front of day and month for days and months 109. Defaults to FALSE.
 * @param string $module - Name of module for better error reporting, if desired. Defaults to asu_dirs.
 */
function asu_libs_validate_birthdate($birthdate, $birth_field_name = 'birthdate', $required_delimiter = '/', $leading_zeroes = FALSE, $module = 'asu_dirs') {
  if (($required_delimiter !== '/')) {
    $required_delimiter = (preg_match('|^[\-/.]$|', $required_delimiter, $matches));
    if ($required_delimiter !== 1) {
      watchdog($module, '@field is trying to use an invalid delimiter (@delimiter).',
        array('@field' => $birth_field_name, '@delimiter' => $required_delimiter), WATCHDOG_ERROR);
      form_set_error($birth_field_name, 'The ' . $birth_field_name . ' field is incorrectly configured. Please contact'
        . ' your site administrator about this error.');
    } else {
      $required_delimiter = $matches[0];
    }
  } else {
    $required_delimiter = '/';
  }
  $error_month = 'm';
  $error_day = 'd';
  if ($leading_zeroes === TRUE) {
    $zero_pattern = '[0]?';
    $error_month .= 'm';
    $error_day .= 'd';
  } else {
    $zero_pattern = '';
  }

  // get number of occurrences of $delimiter in the DOB
  $delimiter_count = substr_count($birthdate, $required_delimiter);
  $default_error_message = t('Date of birth accepts the format ' . $error_month . $required_delimiter . $error_day . $required_delimiter . 'yyyy'
    . ' (Ex. 3' . $required_delimiter . '28' . $required_delimiter . '2000)');

  if ($delimiter_count == 2) {
    $date_format = explode($required_delimiter, $birthdate);
    $month = $date_format[0];
    $day = $date_format[1];
    $year = $date_format[2];
    $current_year = date('Y');
    $year_limit = $current_year - 1;
    $isLeapYear = date('L');

    if (strlen($birthdate) < 11) {
      if (($month < 1) || ($month > 12)) {
        form_set_error($birth_field_name, t('Month range has to be between 1 and 12.'));
      }

      if (($month == 1) || ($month == 3) || ($month == 5) || ($month == 7) || ($month == 8) || ($month == 10) || ($month == 12)) {
        if (($day < 1) || ($day > 31)) {
          form_set_error($birth_field_name, t('Day range has to be between 1 and 31.'));
        }
      }

      if (($month == 4) || ($month == 6) || ($month == 9) || ($month == 11)) {
        if (($day < 1) || ($day > 30)) {
          form_set_error($birth_field_name, t('Day range has to be between 1 and 30.'));
        }
      }
      if ($month == 2) { // February checks
        if ($isLeapYear == 1) {
          if (($day < 1) || ($day > 29)) {
            form_set_error($birth_field_name, t('Day range has to be between 1 and 29.'));
          }
        }
        if ($isLeapYear == 0) {
          if (($day < 1) || ($day > 28)) {
            form_set_error($birth_field_name, t('Day range has to be between 1 and 28.'));
          }
        }
      }
      if (strlen($year) !== 4) {
        form_set_error($birth_field_name, t('Birth year must be 4 digits.'));
      }
      if ($year > $year_limit) {
        form_set_error($birth_field_name, t('Year cannot be greater than ' . $year_limit));
      }

      // Main date check
      $pattern = '@^(' . $zero_pattern . '[1-9]|1[012])' . $required_delimiter . '(' . $zero_pattern
        . '[1-9]|[12][0-9]|3[01])' . $required_delimiter . '(19|20)\d\d$@';
      if (!preg_match($pattern, $birthdate)) {
        form_set_error($birth_field_name, $default_error_message);
      }
    } else {
      form_set_error($birth_field_name, $default_error_message);
    }
  } else {
    form_set_error($birth_field_name, $default_error_message);
  }
}

/**
 * Validation - Email
 *
 * @param string $email - Email address to test.
 * @param string $email_field_name - Alternate Form API key for this field. Defaults to 'email'.
 * @return mixed|string
 */
function asu_libs_validate_email($email, $email_field_name = 'email') {
  if (!empty($email)) {
    if (!preg_match("/^([a-zA-Z0-9])+([a-zA-Z0-9._-])*@([a-zA-Z0-9_-])+([a-zA-Z0-9._-]+)*(\.[a-zA-Z]{2,6})+$/", $email)) {
      form_set_error($email_field_name, t('You entered an invalid email address.'));
    }
  } else {
    form_set_error($email_field_name, 'You need to enter an email address.');
  }
}

/**
 *  * Validation - Email
 *
 * @param string $phone - Phone number to validate. Defaults to empty (skip).
 * @param boolean $return_phone - Return revised/formatted phone number. Defaults to FALSE.
 * @param string $phone_field_name - Alternate Form API key for this field. Defaults to 'phone'
 * @return mixed|string - Return revised number IF return_phone is TRUS
 */
function asu_libs_validate_phone($phone, $return_phone = FALSE, $phone_field_name = 'phone') {
  /** If mobile number field is checked, then check for USA format, else check for special characters **/
  if (!empty($phone)) {
    if (strpos($phone, '011', 0) === 0) { // swap out old '011' with +
      $phone = preg_replace('|^011[-\s.]?([^-\s.])(.+?)$|', "+$1$2", $phone);
    } elseif (strpos($phone, '1', 0) === 0) { // Leading 1 removal for domestic numbers
      $phone = preg_replace('|^1[-\s.]?([^-\s.])(.+?)$|', "$1$2", $phone);
    }
    if (!preg_match("/^([+]?)([(]?[0-9]{3}[)]?)([-\s.]?)([0-9]{3})([-\s.]?)([0-9]{4,6})$/im", $phone, $matches)) {
      form_set_error($phone_field_name, t('You entered an invalid Phone number. See its field description for acceptable formats/examples.'));
    } else {
      if ($return_phone === TRUE) { // Return formatted number for domestic numbers (or do nothing)
        return asu_libs_process_phone_number($matches);
      }
    }
  }
}

/**
 * Reformat phone number for Salesforce IF domestic number. (All others not altered here.)
 *
 * @param array $matches - preg_match output
 * @return mixed|string - Phone number string, depending on locale. (XXX) XXX-XXXX for domestic.
 */
function asu_libs_process_phone_number($matches) {
  if ($matches[1] === '+' || strpos($matches[2], '0') === 0) { // Int'l number - leave alone
    return $matches[0];
  } else {
    if (strpos($matches[2], '(', 0) === 0 && strpos($matches[2], ')', 0) === 4){ // Domestic number with parens already
      return $matches[2] . ' ' . $matches[4] . '-' . $matches[6];
    } else { // Default: Domestic (xxx) xxx-xxxx
      return '(' . $matches[2] . ') ' . $matches[4] . '-' . $matches[6];
    }
  }
}

/**
 * Returns correct campusID string for Salesforce compatibility
 *
 * @param $campus - Human-readable campus name (or PeopleSoft/Salesforce IDs if $reverse)
 * @param $reverse - Reverse the keys + values in return (defaults to FALSE)
 * @return string - The campus code (or human name, if $reverse). Returns empty string if no match is found.
 * @TODO pull in from feed to stay up to date
 */
function asu_libs_get_campus_codes($campus, $reverse = FALSE) {
  // Legacy code conversion
  if ($campus === "TMPE") { $campus = 'TEMPE'; }
  if ($campus === "DOWNTOWN") { $campus = 'DTPHX'; }

  $campuses = array(
    "Tempe" => 'TEMPE',
    "Downtown" => "DTPHX",
    "Online" => "ONLNE",
    "Polytechnic" => "POLY",
    "West" => "WEST",
    'ASU@Cochise' => 'COCHS',
    'ASU@Lake Havasu' => 'CALHC',
    'ASU@MexicoCity' => 'MXCTY',
    'ASU@Pima' => 'PIMA',
    'ASU@Pinal' => 'CAC',
    'ASU@The Gila Valley' => 'EAC',
    'ASU@Tucson' => 'TUCSN',
    'ASU@Washington, D.C.' => 'WASHD',
    'ASU@Yavapai' => 'YAVAP',
    'ASU@Yuma' => 'AWC',
  );
  // Flip campus keys + values if desired
  if ($reverse === TRUE) {
    $campuses = array_flip($campuses);
  }
  foreach ($campuses as $key => $value) {
    if (stristr($key, $campus) !== FALSE) {
      return $value;
      break;
    }
  }
  return '';
}

/**
 * Get Semester PeopleSoft codes + human-readable names
 *
 * @param bool $summer
 * @return array list of semester names + PeopleSoft codes
 */
function asu_libs_get_semester_digits($summer = FALSE) {
  $semesters = array(
    '1' => "Spring",
  );
  if ($summer) {
    $semesters['4'] = "Summer";
  }
  $semesters['7'] = "Fall";
  return $semesters;
}

/**
 * Get semester code for right now
 *
 * @param int $month - 1, 11
 * @param int $day - 1-31
 * @param bool $summer - Check for summer semester. Defaults to false.
 * @return int - Semester codes. 1 = Spring, 4 = Summer, 7 = Fall
 */
function asu_libs_get_current_semester($month, $day, $summer = FALSE) {
  if (($month >= 8)) { // FALL (8/15 and forward)
    if (($month !== 8) || ($month === 8 && $day > 14)) {
      return '7'; // FALL
    }
  }
  else { // Spring OR summer (before 8/15)
    if ($summer) {
      if (($month === 5 && $day > 14) || ($month === 8 && $day <= 14)) {
        return '4'; // SUMMER
      }
    } else {
      return '1'; // SPRING
    }
  }
  return 'unknown'; // No semester?
}

/**
 * Select PS code for the term from available options
 *
 * @param $term - Human readable term
 * @param $available_terms - All available terms
 * @return string
 */
function asu_libs_get_ps_sem_code_key($term, $available_terms) {
  $key = array_search($term, $available_terms);
  if ($key !== FALSE) {
    return $key;
  } else {
//    watchdog('asu_rfi', 'No matching PeopleSoft term for @term. Consider running cron to ensure that your'
//      . ' locally stored available start terms are up-to-date.', array('@term' => $term), WATCHDOG_WARNING);
    return FALSE;
  }
}

/**
 * Get human readable name of semester from code
 *
 * @param $code - one digit code for semester
 * @return bool|string - Human readable semester name or FALSE is no matches
 */
function asu_libs_semester_digits_to_text($code) {
  $semesters = asu_libs_get_semester_digits(TRUE);
  $code = (int) $code;
  foreach ($semesters as $digit => $semester_name) {
    if ($code === (int) $digit) {
      return $semester_name;
      break;
    }
  }
  return "InvalidSemester";
}


/**
 * Create upcoming 4-digit semester codes and map to human readable semester names
 *
 * @param bool $summer - Include summer semester
 * @param string $key_type - Return either peopleSoft codes (ps) or 4-digit codes (digits). Defaults to 'digits'.
 * @param array $all_avail_terms - All terms (PS codes => human readable names)
 * @param int $addl_years - Number of additional years to create drop down options
 * @return array - All 4-digit (Or PS) semester codes (key) (ex. 1) => human-readable counterparts (Ex. Fall 2020)
 */
function asu_libs_get_sem_codes_human_mapping($summer, $all_avail_terms, $key_type = 'digits', $addl_years = 2) {
  $options = &drupal_static(__FUNCTION__);
  if (!isset($options)) {
    // 1) Build the date array
    $semester = asu_libs_get_semester_digits($summer);
    $semester_today = asu_libs_get_current_semester(date('m'), date('d'), $summer);

    // 2) Generate semester digits from semLabel field
    $addl_years++; // <= years + 1
    $date = $new = $options = array();
    $year = (int)date('Y');
    for ($i = 0; $i <= $addl_years; $i++) {
      $date[$i] = $year + $i;
      $new[$i] = substr_replace(($date[$i]), "", 1, 1);
      if ($i === 0) {  // Current year (nothing sent in fall semester)
        if ($semester_today !== '7') { // Before fall start
          if ($summer && $semester_today === '1') { // Spring time and summer included
            $human_term = ($date[$i]) . " " . $semester['4'];  // YYYY Summer
            $key = ($key_type === 'ps')
              ? asu_libs_get_ps_sem_code_key($human_term, $all_avail_terms)
              : ($new[$i]) . '4';
            $options[$key] = $human_term;
          }
          $human_term = ($date[$i]) . " " . $semester['7']; // YYYY Fall
          $key = ($key_type === 'ps')
            ? asu_libs_get_ps_sem_code_key($human_term, $all_avail_terms)
            : ($new[$i]) . '7';
          $options[$key] = $human_term;
        }
      } else { // Future years
        $human_term = ($date[$i]) . " " . $semester["1"]; // YYYY Spring
        $future_key = ($key_type === 'ps')
          ? asu_libs_get_ps_sem_code_key($human_term, $all_avail_terms)
          : ($new[$i]) . "1";  // append 1 to the key depending on the season. For spring, add 1.
        $options[$future_key] = $human_term;
        if ($summer) {
          $human_term = ($date[$i]) . " " . $semester['4'];
          $future_key = ($key_type === 'ps')
            ? asu_libs_get_ps_sem_code_key($human_term, $all_avail_terms)
            : ($new[$i]) . "4";
          $options[$future_key] = $human_term;
        }
        $human_term = ($date[$i]) . " " . $semester['7'];
        $future_key = ($key_type === 'ps')
          ? asu_libs_get_ps_sem_code_key($human_term, $all_avail_terms)
          : ($new[$i]) . "7";
        $options[$future_key] = $human_term;
      }
    }
  }
  return $options;
}

/**
 * Determine type of site environment (dev, test, or live)
 * NOTE: This will work for all Pantheon sites, but everywhere else it won't
 * catch everything. The "test mode" setting will have to catch the rest.
 * @return array $env - Type of environment (dev, qa, or prod), and endpoint_access (T/F).
 */
function asu_libs_detect_environment() {
  $env = &drupal_static(__FUNCTION__);
  if (!isset($env)) {
    $env = array(
      'type' => '',
      'endpoint_access' => true,
    );
    global $base_url;
    // Pantheon ENVs
    if (defined('PANTHEON_ENVIRONMENT')) {
      if ($_ENV["PANTHEON_ENVIRONMENT"] === 'live') {
        $env['type'] = 'prod_pantheon';
      }
      elseif ($_ENV["PANTHEON_ENVIRONMENT"] === 'test') {
        $env['type'] = 'qa';
      } else { // All remaining multidevs + Dev ENV
        $env['type'] = 'dev';
      }
      $env['endpoint_access'] = false; // No access to Enterprise dev/QA web service endpoints
    }
    else {
      // Local development - most local development URLs
      if (strpos($base_url, '://localhost') !== FALSE
        || strpos($base_url, '://192.168.') !== FALSE
        || strpos($base_url, '://127.') !== FALSE
        || strpos($base_url, '://10.') !== FALSE) {
        $env['type'] = 'dev';
      }
      // Non-Pantheon ENVs checks for Enterprise Drupal.
      elseif ((preg_match('#^http(s?)://dev-#', $base_url) === 1) && (strpos($base_url, '-dev.'))) {
        $env['type'] = 'dev';
      }
      elseif ((preg_match('#^http(s?)://(test|qa)-#', $base_url) === 1)
        || (strpos($base_url, '-qa.') !== FALSE || strpos($base_url, '-test.') !== FALSE)) {
        $env['type'] = 'qa';
      } else {
        $env['type'] = 'prod_not-pantheon';
      }
    }
  }
  return $env;
}

///////
/// More standard libraries (non-ASU)
///////

/**
 * Detect the user's OS. // WHY? UNUSED.
 * @return int|string
 */
function asu_libs_detect_os() {
  $current_os = "unknown";
  $os_list = array(
    'Windows 7' => '(Windows NT 6\.1)',
    'Windows Vista' => '(Windows NT 6\.0)',
    'Windows XP' => '(Windows NT 5\.1)|(Windows XP)',
    'Mac OS' => '(Mac_PowerPC)|(Macintosh)',
    'Linux' => '(Linux)|(X11)',
    'Search Bot' => '(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp)|(MSNBot)|(Ask Jeeves\/Teoma)|(ia_archiver)',
    'Windows 3.11' => 'Win16',
    'Windows 95' => '(Windows 95)|(Win95)|(Windows_95)',
    'Windows 98' => '(Windows 98)|(Win98)',
    'Windows 2000' => '(Windows NT 5\.0)|(Windows 2000)',
    'Windows Server 2003' => '(Windows NT 5\.2)',
    'Windows NT 4.0' => '(Windows NT 4\.0)|(WinNT4\.0)|(WinNT)|(Windows NT)',
    'Windows ME' => '(Windows 98)|(Win 9x 4\.90)|(Windows ME)',
    'Open BSD' => 'OpenBSD',
    'Sun OS' => 'SunOS',
    'QNX' => 'QNX',
    'BeOS' => 'BeOS',
    'OS/2' => 'OS\/2'
  );

  if (isset($_SERVER['HTTP_USER_AGENT'])) {
    foreach ($os_list as $current_os => $match) {
      if (preg_match('#' . $match . '#i', $_SERVER['HTTP_USER_AGENT'])) {
        break;
      }
    }
  }
  return $current_os;
}

/**
 * Detect the user's browser.
 * @return string
 */
function asu_libs_detect_browser() {
  $browser = 'unknown';
  if (isset($_SERVER['HTTP_USER_AGENT'])) {
    $u_agent = $_SERVER['HTTP_USER_AGENT'];
    if (stripos($u_agent, 'MSIE') !== FALSE) {
      $browser = "IE";
    }
    elseif (stripos($u_agent, 'Chrome') !== FALSE) {
      $browser = "Chrome";
    }
    elseif (stripos($u_agent, 'Firefox') !== FALSE) {
      $browser = "Firefox";
    }
    elseif (stripos($u_agent, 'Safari') !== FALSE) {
      $browser = "Safari";
    }
    elseif (stripos($u_agent, 'Flock') !== FALSE) {
      $browser = "Flock";
    }
    elseif (stripos($u_agent, 'Opera') !== FALSE) {
      $browser = "Opera";
    }
  }
  return $browser;
}
