<?php

include_once 'inc/asu_dept_picker.theme.inc';

// Module constant definitions
 // set to 24 hours
define('ASU_DEPT_PICKER_TOP_LEVEL_DEPT_NID', 1342);


/**
 * Implements hook_field_info()
 */
function asu_dept_picker_field_info() {
  return array(
    'field_asu_dept_picker' => array(
      'label' => t('ASU Dept Picker'),
      'description' => t('This field lets you select one or many ASU departments'),
      'default_widget' => 'field_asu_dept_picker_popup',
    ),
  );
}


/**
 * Implements hook_field_widget_info()
 */
function asu_dept_picker_field_widget_info() {
  return array(
    'field_asu_dept_picker_popup' => array(
      'label' => t('Popup widget'),
      'field types' => array('field_asu_dept_picker'),
    ),
  );
}


/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_empty() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function asu_dept_picker_field_is_empty($item, $field) {
  return empty($item['dept_nid']) && empty($item['dept_id']) && empty($item['value']);
}

/**
 * Implements hook_field_validate().
 *
 * This hook gives us a chance to validate content that's in our
 * field. We're really only interested in the $items parameter, since
 * it holds arrays representing content in the field we've defined.
 * We want to verify that the items only contain RGB hex values like
 * this: #RRGGBB. If the item validates, we do nothing. If it doesn't
 * validate, we add our own error notification to the $errors parameter.
 *
 * @see field_example_field_widget_error()
 */
function asu_dept_picker_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['dept_id'])) {
      /**
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'field_example_invalid',
        'message' => t('Color must be in the HTML format #abcdef.'),
      );
      **/
    }
  }
}

/**
 * Implements hook_field_widget_form()
 */
function asu_dept_picker_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $dept_nid = isset($items[$delta]['dept_nid']) ? $items[$delta]['dept_nid'] : '';
  $dept_id  = isset($items[$delta]['dept_id'])  ? $items[$delta]['dept_id']  : '';
  $value    = isset($items[$delta]['value'])    ? $items[$delta]['value']    : '';

  $widget = $element;
  $widget['#delta'] = $delta;

  // populate the department picker items based on the settings passed to this widget instance
  $dept_picker_items = array();

  switch ($instance['widget']['type']) {
    case 'field_asu_dept_picker_popup':

      $element['dept_nid'] = array(
        '#type' => 'textfield',
        '#delta' => $delta,
        '#default_value' => $dept_nid,
      );
      $element['dept_id'] = array(
        '#type' => 'textfield',
        '#delta' => $delta,
        '#default_value' => $dept_id,
      );
      $element['value'] = array(
        '#type' => 'textfield',
        '#delta' => $delta,
        '#default_value' => $value,
      );
      break;
  }

  return $element;
}


/**
 * Implements hook_element_info().
 *
 * To keep the various pieces of the example together in external files,
 * this just returns _asu_dept_picker_elements().
 */
function asu_dept_picker_element_info() {
  require_once('inc/asu_dept_picker.elements.inc');
  return _asu_dept_picker_elements();
}

