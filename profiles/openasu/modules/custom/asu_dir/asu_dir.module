<?php

/**
 * @file
 * ASU Directory module
 *
 * This module grabs the Department Hierarchy from iSearch, and allows the configuration of custom
 * directory display blocks or panels.
 *
 * @author Colton Testamarck (colt@asu.edu)
 *
 */

/*********************************************************************
 * INCLUDES
 *********************************************************************/

include_once 'asu_dir.features.inc';
require_once drupal_get_path('module', 'asu_dir') . '/asu_dir.field.inc';

/*********************************************************************
 * CONFIGS
 *********************************************************************/

// Access Permission Constants
define('ASU_DIRECTORY_ADMIN_CONFIG_SETTINGS', 'Administer ASU Directory Configuration');
define('ASU_DIRECTORY_PAGE_ACCESS', 'access asu directory');

// Form Field Variable Constants
define('ASU_DIRECTORY_TOP_LEVEL_PS_ID', 'ASU');
define('ASU_DIRECTORY_TOP_LEVEL_DEPT_NID', 1342);
define('ASU_DIRECTORY_FORM_CACHE_DURATION', 1);//set to one hour
define('ASU_DIRECTORY_MODULE_NAME', 'asu_dir');

define('ASU_DIRECTORY_SOLR_ENV', variable_get('asu_dir_solr_endpoint', 'https://webapp4.asu.edu'));
define('ASU_DIRECTORY_TREE_ENDPOINT', variable_get('asu_dir_tree_endpoint', 'https://isearch.asu.edu/endpoints/dept_tree/json'));
define('ASU_EMPLOYEE_TYPES_ENDPOINT', variable_get('asu_dir_employee_types_endpoint', 'https://isearch.asu.edu/endpoints/employee-types'));
//define('ASU_DIRECTORY_FLAT_LIST_ENDPOINT', 'https://isearch.asu.edu/endpoints/dept_list/json');

/*********************************************************************
 * API
 *********************************************************************/

/**
 * Content for Dept People Block display
 * @return string : The HTML to display
 *
 * @param field_configs : array of settings for the people display
 * @param field_items : array of dept_ids to show in directory display
 * @param $settings : array of settings for generating people content
 */
function asu_dir_people_content($field_configs, $field_items, $admin) {
  $html = '';

  //pass these module constants tot he JS
  $top_level_ids = array(
    'top_level_nid' => ASU_DIRECTORY_TOP_LEVEL_DEPT_NID,
    'top_level_psid' => ASU_DIRECTORY_TOP_LEVEL_PS_ID
  );

  // Custom
  drupal_add_js(drupal_get_path('module', ASU_DIRECTORY_MODULE_NAME) . '/js/asu_dir.breadcrumb.js');
  drupal_add_js(drupal_get_path('module', ASU_DIRECTORY_MODULE_NAME) . '/js/asu_dir_ppl_block.js');
  drupal_add_css(drupal_get_path('module', ASU_DIRECTORY_MODULE_NAME) . '/css/asu_dir_people_block.css');

  $field_configs['employee_types'] = drupal_json_encode($field_configs['employee_types']);
  $field_items = drupal_json_encode($field_items);

  $settings = array(
    'dept_nids' => $field_items,
    'field_configs' => $field_configs,
    'solr_server' => ASU_DIRECTORY_SOLR_ENV,
    'admin' => $admin,
    'top_level_ids' => $top_level_ids
  );

  drupal_add_js(array(ASU_DIRECTORY_MODULE_NAME => $settings), 'setting');

  //End of people controls top

  //Markup for breadcrumb div
  $html .= '<div class="asu_directory_breadcrumb"></div>';
  // Markup for primary display block (to be altered via AJAX)
  $html .= '<div class="display" id="people"></div>';

  //Bottom Pagination Controls
  $html .= '<div class="asu_directory_bottom_container">';
  $html .= '<ul id="asu_directory_people_controls_bottom" class="pagination asu_directory_people_controls">';

  $html .= '<li class="asu_directory_people_button prev first" id="asu_directory_people_prev_btn"><span class="asu_directory_people_top_switcher">< previous</span></li>';

  $html .= '<li class="asu_directory_people_button" id="asu_directory_people_first_pg_btn"><span> 1 </span></li>';
  $html .= '<li class="asu_directory_people_ellipses pager-ellipsis disabled"><span>...&nbsp;</span></li>';
  $html .= '<li class="asu_directory_people_button" id="asu_directory_people_back_2_btn"><span class="dynamic_number"> </span></li>';
  $html .= '<li class="asu_directory_people_button" id="asu_directory_people_back_1_btn"><span class="dynamic_number"> </span></li>';
  $html .= '<li class="asu_directory_people_button" id="asu_directory_people_this_pg_btn"><span class="dynamic_number"> </span></li>';
  $html .= '<li class="asu_directory_people_button" id="asu_directory_people_fwd_1_btn"><span class="dynamic_number"> </span></li>';
  $html .= '<li class="asu_directory_people_button" id="asu_directory_people_fwd_2_btn"><span class="dynamic_number"> </span></li>';
  $html .= '<li class="asu_directory_people_ellipses pager-ellipsis disabled"><span>...&nbsp;</span></li>';
  $html .= '<li class="asu_directory_people_button" id="asu_directory_people_last_pg_btn"><span class="dynamic_number"> </span></li>';

  $html .= '<li class="asu_directory_people_button next last" id="asu_directory_people_next_btn"><span class="next last asu_directory_people_top_switcher">next ></span></li>';

  $html .= '</ul>';
  $html .= '</div>';

  return $html;
}

/**
 * Content for Dept Hierarchy display
 *
 *
 * @param standalone : boolean flag ->  true if this is admin display
 *
 * @return string : The HTML to display
 */
function asu_dir_departments_content($standalone) {
  $tree = asu_dir_get_dept_tree();

  // jqTree (http://mbraak.github.com/jqTree)
  libraries_load('jqtree');
  libraries_load('fontawesome');

  // Custom
  drupal_add_css(drupal_get_path('module', ASU_DIRECTORY_MODULE_NAME) . '/css/asu_dir_tree.css');
  drupal_add_js(drupal_get_path('module', ASU_DIRECTORY_MODULE_NAME) . '/js/asu_dir_hierarchy_block.js');

  //Pass our items and configs to the JS
  //will need to pass extra configs if the tree is being used without the people display (standalone)
  if ($standalone) {
    $top_level_ids = '{
         "top_level_psid": "' . ASU_DIRECTORY_TOP_LEVEL_PS_ID . '",
         "top_level_nid": ' . ASU_DIRECTORY_TOP_LEVEL_DEPT_NID . '
         }';

    $settings = array(
      'tree' => $tree,
      'top_Level_ids' => $top_level_ids
    );//, 'dept_nids' => $field_items,'field_configs' => $field_configs, 'admin' => $admin_flag, 'solr_server' => ASU_DIRECTORY_SOLR_ENV);
  }
  else {
    $settings = array('tree' => $tree);
  }

  drupal_add_js(array(ASU_DIRECTORY_MODULE_NAME => $settings), 'setting');

  $employee_select = '';
  $html = '';
  $html .= $employee_select . '<div class="asu-directory-tree-hierarchy"><div id="treediv"></div></div>';

  return $html;
}


/**********************************************************************
 * HOOKS
 **********************************************************************/

/**
 * Implements hook_permission().
 */
function asu_dir_permission() {
  $perms[ASU_DIRECTORY_ADMIN_CONFIG_SETTINGS] = array(
    'title' => t('Administer ASU Directory'),
    'description' => t('Configure asu_dir Module Settings'),
  );

  return $perms;
}

/**
 * Implements hook_menu()
 * this declares the asu_dir config form for the menu
 *
 * @return array
 */
function asu_dir_menu() {
  $items = array();

  // Admin menu.
  $items['admin/config/search/asu_dir'] = array(
    'title' => t('ASU Directory Settings'),
    'description' => 'Settings for ASU_DIR module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asu_dir_admin'),
    'access callback' => 'user_access',
    'access arguments' => array(ASU_DIRECTORY_ADMIN_CONFIG_SETTINGS),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
 * Implements hook_admin()
 * Creates a form for setting the root for the department hierarchy by department ID
 */
function asu_dir_admin($form, &$form_state) {
  $form = array();

  // Environment to determine which Solr Server URL to access
  // (Actual URLs supplied by WSI Settings Endpoint based on chosen environment)
  $form['asu_dir_solr_env'] = array(
    '#type' => 'textfield',
    '#title' => 'Solr Environment',
    '#default_value' => ASU_DIRECTORY_SOLR_ENV,
    '#description' => t('The Solr server you would like to pull data from.'),
    '#required' => TRUE,
  );

  $form['asu_dir_tree_endpoint'] = array(
    '#type' => 'textfield',
    '#title' => 'ASU Directory Tree Enpoint',
    '#default_value' => ASU_DIRECTORY_TREE_ENDPOINT,
    '#description' => t('The URL of the directory tree endpoint.'),
    '#required' => TRUE,
  );

  $form['asu_dir_employee_types_endpoint'] = array(
    '#type' => 'textfield',
    '#title' => 'ASU Employee Types Endpoint',
    '#default_value' => ASU_EMPLOYEE_TYPES_ENDPOINT,
    '#description' => t('The URL of the employee types endpoint.'),
    '#required' => TRUE,
  );

  $form['asu_dir_form_clear_cache'] = array(
    '#type' => 'button',
    '#value' => 'Clear caches for this module',
    // Send in part of the form_state array to know if this is initial page load or not
    '#click' => asu_dir_clear_cache($form_state['buttons']),
  );


  $form['#submit'][] = "asu_dir_admin_submit";
  return system_settings_form($form);
}


/**
 * Clear caches for module when form is submitted
 */
function asu_dir_admin_submit($form, &$form_state) {
  /*maybe clear the cache after submitting*/
  variable_set('asu_dir_solr_endpoint', $form['asu_dir_solr_env']['#value']);
  variable_set('asu_dir_tree_endpoint', $form['asu_dir_tree_endpoint']['#value']);
  variable_set('asu_dir_employee_types_endpoint', $form['asu_dir_employee_types_endpoint']['#value']);
}


/**
 * Function to include the jqTree library, located in libs/jqtree.
 * Documentation for the library can be found here http://mbraak.github.io/jqTree/
 *
 * @return mixed
 *
 */
function asu_dir_libraries_info() {
  // Expected to be extracted into 'sites/all/libraries/jqtree'.
  $libraries['jqtree'] = array(
    'name' => 'jQTree Library',
    'vendor url' => 'http://mbraak.github.io/jqTree/',
    'download url' => 'https://github.com/mbraak/jqTree/archive/0.22.0.zip',
    'version callback' => 'asu_dir_short_circuit_version',
    'files' => array(
      'js' => array('tree.jquery.js'),
      'css' => array('jqtree.css'),
    ),
  );

  return $libraries;
}

/**
 * Short-circuit the version argument.
 */
function asu_dir_short_circuit_version() {
  return TRUE;
}


/**
 * Implements hook_cron()
 *
 *Refresh the cached directory tree and employee types every cron run
 */
function asu_dir_cron() {

  //set timeout of request to 60 seconds
  $options = array(
    'timeout' => 60,
  );

  //Refresh and cache the Tree
  $tree = NULL;

  $tree_endpoint = ASU_DIRECTORY_TREE_ENDPOINT;
  $request = drupal_http_request($tree_endpoint, $options);

  if ($request->code == 200) {
    $tree = $request->data;
  }
  // Create cache, set to hold cache for number of hours specified
  if ($tree != NULL) {
    $expire_date = time() + 3600 * ASU_DIRECTORY_FORM_CACHE_DURATION;
    cache_set('asu_directory_tree', $tree, 'cache', $expire_date);
  }

  //Refresh and cache the employee types
  $employee_types = NULL;

  $endpoint = ASU_EMPLOYEE_TYPES_ENDPOINT;
  $request = drupal_http_request($endpoint, $options);

  if ($request->code == 200) {
    $types = $request->data;
    $employee_types = drupal_json_decode($types);
  }
  // Create cache, set to hold cache for number of hours specified
  if ($employee_types != NULL) {

    $expire_date = time() + 3600 * ASU_DIRECTORY_FORM_CACHE_DURATION;
    cache_set('asu_employee_types', $employee_types, 'cache', $expire_date);
  }


}


/*********************************************************************
 * UTILITY FUNCTIONS
 *********************************************************************/


/**
 * This is a function to clear the tree from cache
 *
 * @param $test
 * @return bool
 */
function asu_dir_clear_cache($test) {
  // $test should determine whether or not this is the initial page load
  if ($test) {
    drupal_set_message(t('Caches for this module have been cleared.'));
    cache_clear_all('asu_directory_tree', 'cache', TRUE);
    return FALSE;
  }
}

/***
 * This is a function to get the department hierarchy tree
 */
function asu_dir_get_dept_tree() {

  $tree = &drupal_static(__FUNCTION__);

  if (!isset($tree) || $tree == "") {
    // Check for cache
    if ($cache = cache_get('asu_directory_tree')) {
      $tree = $cache->data;
    }
    // Create content and cache if no cache available
    else {

      //set timeout of request to 60 seconds
      $options = array(
        'timeout' => 60,
      );

      //Process and deliver data to javascript
      $tree_endpoint = ASU_DIRECTORY_TREE_ENDPOINT;
      $request = drupal_http_request($tree_endpoint, $options);

      if ($request->code == 200) {
        $tree = $request->data;
      }

      // Create cache, set to hold cache for number of hours specified
      if ($tree != NULL) {
        $set_date = time();
        $expire_date = time() + 3600 * ASU_DIRECTORY_FORM_CACHE_DURATION;
        cache_set('asu_directory_tree', $tree, 'cache', $expire_date);
      }
    }
  }

  return $tree;
}


/**
 * This is function which returns an array of employee types
 *
 * @return mixed
 */
function asu_dir_get_employee_types() {

  $employee_types = &drupal_static(__FUNCTION__);

  if (!isset($employee_types) || $employee_types == "") {
    // Check for cache
    if ($cache = cache_get('asu_employee_types')) {
      $employee_types = $cache->data;
    }
    // Create content and cache if no cache available
    else {

      //set timeout of request to 60 seconds
      $options = array(
        'timeout' => 60,
      );

      $endpoint = ASU_EMPLOYEE_TYPES_ENDPOINT;
      $request = drupal_http_request($endpoint, $options);

      if ($request->code == 200) {
        $types = $request->data;
        $employee_types = drupal_json_decode($types);
      }

      // Create cache, set to hold cache for number of hours specified
      if ($employee_types != NULL) {

        $expire_date = time() + 3600 * ASU_DIRECTORY_FORM_CACHE_DURATION;
        cache_set('asu_employee_types', $employee_types, 'cache', $expire_date);
      }
    }
  }

  return $employee_types;

}

function asu_dir_generate_people_display_head() {

  $html = '';
  // Markup for search (possibly sorting down the line)
  $html .= '<div id="asu_directory_people_controls_top" class="asu_directory_people_controls">';

  // Markup for Search interface
  //$html .= '<span class="asu_directory_people_search_group">';
  $html .= '<div class="asu_directory_people_search_group">';
  $html .= '<input class="input-main-search form-control form-text" id="asu_directory_people_search_box" placeholder="Search" />';
  $html .= '<button id="asu_directory_people_search_btn" class="btn-main-search btn btn-primary asu_directory_people_button">
             <i class="fa fa-search"></i></button>';
  $html .= '</div>';
  $html .= '</div>';
  return $html;
}

