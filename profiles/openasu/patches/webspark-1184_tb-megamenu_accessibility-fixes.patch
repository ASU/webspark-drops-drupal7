diff --git a/tb_megamenu.info b/tb_megamenu.info
--- a/tb_megamenu.info
+++ a/tb_megamenu.info
@@ -1,9 +1,15 @@
 name = TB Mega Menu
 description = Megamenu solutions for Drupal
 package = Menu
-version = VERSION
+version = 7.x-1.0-rc2+11-dev
 core = 7.x
 
 dependencies[] = libraries
 dependencies[] = jquery_update
 configure = admin/structure/tb-megamenu
+
+; Information added by Drupal.org packaging script on 2017-11-20
+;version = "7.x-1.0-rc2+10-dev"
+;core = "7.x"
+;project = "tb_megamenu"
+;datestamp = "1511153590"
diff --git a/templates/tb-megamenu-item.tpl.php b/templates/tb-megamenu-item.tpl.php
--- a/templates/tb-megamenu-item.tpl.php
+++ a/templates/tb-megamenu-item.tpl.php
@@ -1,6 +1,8 @@
-<li <?php print $attributes;?> class="<?php print $classes;?>">
-  <a href="<?php print in_array($item['link']['href'], array('<nolink>')) ? "#" : url($item['link']['href'], $item['link']['options']);?>" <?php echo drupal_attributes($item['link']['#attributes']); ?>>
-    <?php if(!empty($item_config['xicon'])) : ?>
+<li <?php print $attributes;?> class="<?php print $classes;?>" role="listitem" aria-level="<?php print $level; ?>">
+  <a href="<?php print in_array($item['link']['href'], array('<nolink>')) ? "#" : url($item['link']['href']);?>"
+     class="<?php print implode(" ", $a_classes);?>"
+     <?php if ($submenu): ?>aria-haspopup="true"<?php endif; ?>
+  >    <?php if(!empty($item_config['xicon'])) : ?>
       <i class="<?php print $item_config['xicon'];?>"></i>
     <?php endif;?>    
     <?php print t($item['link']['title']);?>
diff --git a/templates/tb-megamenu-nav.tpl.php b/templates/tb-megamenu-nav.tpl.php
--- a/templates/tb-megamenu-nav.tpl.php
+++ a/templates/tb-megamenu-nav.tpl.php
@@ -1,3 +1,3 @@
-<ul <?php print $attributes;?> class="<?php print $classes;?>">
+<ul <?php print $attributes;?> class="<?php print $classes;?>" role="list">
   <?php print $lis;?>
 </ul>
diff --git a/templates/tb-megamenu-subnav.tpl.php b/templates/tb-megamenu-subnav.tpl.php
--- a/templates/tb-megamenu-subnav.tpl.php
+++ a/templates/tb-megamenu-subnav.tpl.php
@@ -1,3 +1,3 @@
-<ul <?php print $attributes;?> class="<?php print $classes;?>">
+<ul <?php print $attributes;?> class="<?php print $classes;?>" role="list">
   <?php print $lis;?>
 </ul>
diff --git a/templates/tb-megamenu.tpl.php b/templates/tb-megamenu.tpl.php
--- a/templates/tb-megamenu.tpl.php
+++ a/templates/tb-megamenu.tpl.php
@@ -1,4 +1,4 @@
-<div <?php print $attributes;?> class="<?php print $classes;?>">
+<div <?php print $attributes;?> class="<?php print $classes;?>" role="navigation">
   <?php if($section == 'frontend') :?>
     <button data-target=".nav-collapse" data-toggle="collapse" class="btn btn-navbar tb-megamenu-button" type="button">
       <i class="fa fa-reorder"></i>
diff --git a/js/tb-megamenu-frontend.js b/js/tb-megamenu-frontend.js
index a80c94e..00cb328 100644
--- a/js/tb-megamenu-frontend.js
+++ b/js/tb-megamenu-frontend.js
@@ -25,6 +25,74 @@ Drupal.TBMegaMenu = Drupal.TBMegaMenu || {};
   
   Drupal.behaviors.tbMegaMenuAction = {
     attach: function(context) {
+      var ariaCheck = function() {
+        $("li.tb-megamenu-item").each(function () {
+          if ($(this).is('.mega-group')) {
+            // Mega menu item has mega class (it's a true mega menu)
+            if(!$(this).parents().is('.open')) {
+              // Mega menu item has mega class and its ancestor is closed, so apply appropriate ARIA attributes
+              $(this).children().attr('aria-expanded', 'false');
+            } else if ($(this).parents().is('.open')) {
+              // Mega menu item has mega class and its ancestor is open, so apply appropriate ARIA attributes
+              $(this).children().attr('aria-expanded', 'true');
+            }
+          } else if ($(this).is('.dropdown') || $(this).is('.dropdown-submenu')) {
+            // Mega menu item has dropdown (it's a flyout menu)
+            if (!$(this).is('.open')) {
+              // Mega menu item has dropdown class and is closed, so apply appropriate ARIA attributes
+              $(this).children().attr('aria-expanded', 'false');
+            } else if ($(this).is('.open')) {
+              // Mega menu item has dropdown class and is open, so apply appropriate ARIA attributes
+              $(this).children().attr('aria-expanded', 'true');
+            }
+          } else {
+            // Mega menu item is neither a mega or dropdown class, so remove ARIA attributes (it doesn't have children)
+            $(this).children().removeAttr('aria-expanded');
+          }
+        });
+      };
+      var showMenu = function ($menuItem, mm_timeout) {
+        console.log("showMenu");
+        if ($menuItem.hasClass ('mega')) {
+          $menuItem.addClass ('animating');
+          clearTimeout ($menuItem.data('animatingTimeout'));
+          $menuItem.data('animatingTimeout', setTimeout(function(){$menuItem.removeClass ('animating')}, mm_timeout));
+          clearTimeout ($menuItem.data('hoverTimeout'));
+          $menuItem.data('hoverTimeout', setTimeout(function(){
+            $menuItem.addClass ('open');
+            ariaCheck();
+          }, 100));
+        } else {
+          clearTimeout ($menuItem.data('hoverTimeout'));
+          $menuItem.data('hoverTimeout',
+              setTimeout(function() {
+                $menuItem.addClass ('open');
+                ariaCheck();
+              }, 100));
+        }
+      };
+      var hideMenu = function ($menuItem, mm_timeout) {
+        console.log("hideMenu");
+        $menuItem.children('.dropdown-toggle').attr('aria-expanded', 'false');
+        if ($menuItem.hasClass ('mega')) {
+          $menuItem.addClass ('animating');
+          clearTimeout ($menuItem.data('animatingTimeout'));
+          $menuItem.data('animatingTimeout',
+              setTimeout(function(){$menuItem.removeClass ('animating')}, mm_timeout));
+          clearTimeout ($menuItem.data('hoverTimeout'));
+          $menuItem.data('hoverTimeout', setTimeout(function() {
+            $menuItem.removeClass ('open');
+            ariaCheck();
+          }, 100));
+        } else {
+          clearTimeout ($menuItem.data('hoverTimeout'));
+          $menuItem.data('hoverTimeout',
+              setTimeout(function() {
+                $menuItem.removeClass ('open');
+                ariaCheck();
+              }, 100));
+        }
+      };
       $('.tb-megamenu-button', context).once('menuIstance', function () {
         var This = this;
         $(This).click(function() {
@@ -38,89 +106,85 @@ Drupal.TBMegaMenu = Drupal.TBMegaMenu || {};
           }
         });
       });
-      
-      
+
       var isTouch = 'ontouchstart' in window && !(/hp-tablet/gi).test(navigator.appVersion);
       if(!isTouch){
         $(document).ready(function($){
           var mm_duration = 0;
-          $('.tb-megamenu').each (function(){
+          $('.tb-megamenu', context).each (function(){
             if ($(this).data('duration')) {
               mm_duration = $(this).data('duration');
             }
           });
 
-          /**
-           * Allow tabbing by appending the open class.
-           * Works in tandem with CSS changes that utilize opacity rather than display none
-           */
-          // If the selected anchor is not in the TB Megamenu, remove all "open" class occurrences
-          $('a').focus(function(event){
-            if(!$(this).parent().hasClass('tb-megamenu-item')) {
-              $('.tb-megamenu .open').removeClass('open');
-              $('.tb-megamenu-item.dropdown-submenu.open').removeClass('open');
-            }
+          var mm_timeout = mm_duration ? 100 + mm_duration : 500;
+          $('.nav > li, li.mega', context).bind('mouseenter', function(event) {
+            showMenu($(this), mm_timeout);
           });
-
-          $('.nav > li > a, li.mega > a').focus(function(event) {
-
-            // Remove all occurrences of "open" from other menu trees
-            var siblings = $(this).parents('.tb-megamenu-item').siblings();
-            // var siblings = $(this).closest('.tb-megamenu-item.level-1').siblings();
-            $.each(siblings, function(i, v){
-              var cousins = $(v).find('.open');
-              $.each(cousins, function(index, value){
-                $(value).removeClass('open');
-              });
-              $(v).removeClass('open');
-            });
-            // Open the submenu if the selected item has one
-            if($(this).next(".tb-megamenu-submenu").length > 0){
-                if(!$(this).parent().hasClass("open")){
-                    $(this).parent().addClass("open");
-                }
-            }
-            // If the anchor's top-level parent is not open, open it
-            if(!$(this).closest('.tb-megamenu-item.dropdown').hasClass('open') && $(this).closest('.tb-megamenu-item.dropdown').find('.tb-megamenu-submenu').length > 0){
-                $(this).closest('.tb-megamenu-item.dropdown').addClass('open');
-            }
-            // If anchor's parent submenus are not open, open them
-            var parents = $(this).parents('.tb-megamenu-item.dropdown-submenu');
-            $.each(parents, function(i, v){
-              if(!$(v).hasClass('open')){
-                $(v).addClass('open');
+          $('.nav > li > .dropdown-toggle, li.mega > .dropdown-toggle', context).bind('focus', function(event) {
+            var $this = $(this);
+            var $subMenu = $this.closest('li');
+            console.log("showMenu call");
+            showMenu($subMenu, mm_timeout);
+            // If the focus moves outside of the subMenu, close it.
+            $(document).bind('focusin', function(event) {
+              if ($subMenu.has(event.target).length) {
+                return;
               }
+              $(document).unbind(event);
+              console.log("hideMenu call");
+              hideMenu($subMenu, mm_timeout);
             });
           });
+          $('.nav > li, li.mega', context).bind('mouseleave', function(event) {
+            hideMenu($(this), mm_timeout);
+          });
+        });
 
-          var mm_timeout = mm_duration ? 100 + mm_duration : 500;
-          $('.nav > li, li.mega').hover(function(event) {
-            var $this = $(this);
-            if ($this.hasClass ('mega')) {
-              $this.addClass ('animating');
-              clearTimeout ($this.data('animatingTimeout'));
-              $this.data('animatingTimeout', setTimeout(function(){$this.removeClass ('animating')}, mm_timeout));
-              clearTimeout ($this.data('hoverTimeout'));
-              $this.data('hoverTimeout', setTimeout(function(){$this.addClass ('open')}, 100));  
-            } else {
-              clearTimeout ($this.data('hoverTimeout'));
-              $this.data('hoverTimeout', 
-              setTimeout(function(){$this.addClass ('open')}, 100));
+        /**
+         * Allow tabbing by appending the open class.
+         * Works in tandem with CSS changes that utilize opacity rather than display none
+         */
+        // If the selected anchor is not in the TB Megamenu, remove all "open" class occurrences
+        $('a').focus(function(event){
+          if(!$(this).parent().hasClass('tb-megamenu-item')) {
+            $('.tb-megamenu .open').removeClass('open');
+            $('.tb-megamenu-item.dropdown-submenu.open').removeClass('open');
+            ariaCheck();
+          }
+        });
+
+        $('.nav > li > a, li.mega > a').focus(function(event) {
+
+          // Remove all occurrences of "open" from other menu trees
+          var siblings = $(this).parents('.tb-megamenu-item').siblings();
+          // var siblings = $(this).closest('.tb-megamenu-item.level-1').siblings();
+          $.each(siblings, function(i, v){
+            var cousins = $(v).find('.open');
+            $.each(cousins, function(index, value){
+              $(value).removeClass('open');
+              ariaCheck($(this));
+            });
+            $(v).removeClass('open');
+            ariaCheck();
+          });
+          // Open the submenu if the selected item has one
+          if($(this).next(".tb-megamenu-submenu").length > 0){
+            if(!$(this).parent().hasClass("open")){
+              $(this).parent().addClass("open");
             }
-          },
-          function(event) {
-            var $this = $(this);
-            if ($this.hasClass ('mega')) {
-              $this.addClass ('animating');
-              clearTimeout ($this.data('animatingTimeout'));
-              $this.data('animatingTimeout', 
-              setTimeout(function(){$this.removeClass ('animating')}, mm_timeout));
-              clearTimeout ($this.data('hoverTimeout'));
-              $this.data('hoverTimeout', setTimeout(function(){$this.removeClass ('open')}, 100));
-            } else {
-              clearTimeout ($this.data('hoverTimeout'));
-              $this.data('hoverTimeout', 
-              setTimeout(function(){$this.removeClass ('open')}, 100));
+          }
+          // If the anchor's top-level parent is not open, open it
+          if(!$(this).closest('.tb-megamenu-item.dropdown').hasClass('open') && $(this).closest('.tb-megamenu-item.dropdown').find('.tb-megamenu-submenu').length > 0){
+            $(this).closest('.tb-megamenu-item.dropdown').addClass('open');
+            ariaCheck();
+          }
+          // If anchor's parent submenus are not open, open them
+          var parents = $(this).parents('.tb-megamenu-item.dropdown-submenu');
+          $.each(parents, function(i, v){
+            if(!$(v).hasClass('open')){
+              $(v).addClass('open');
+              ariaCheck();
             }
           });
         });
@@ -137,3 +201,4 @@ Drupal.TBMegaMenu = Drupal.TBMegaMenu || {};
   }
 })(jQuery);
 
+
